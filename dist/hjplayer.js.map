{"version":3,"sources":["webpack://HJPlayer/webpack/universalModuleDefinition","webpack://HJPlayer/webpack/bootstrap","webpack://HJPlayer/./Utils/Logger.ts","webpack://HJPlayer/./Events/index.ts","webpack://HJPlayer/./Loaders/LoaderStatus.ts","webpack://HJPlayer/./Utils/Exception.ts","webpack://HJPlayer/../node_modules/eventemitter3/index.js","webpack://HJPlayer/./Utils/getGlobalObject.ts","webpack://HJPlayer/./Loaders/LoaderErrors.ts","webpack://HJPlayer/./Utils/Browser.ts","webpack://HJPlayer/./Utils/workerCmd.ts","webpack://HJPlayer/./Errors/index.ts","webpack://HJPlayer/./Loaders/LoaderEvent.ts","webpack://HJPlayer/./Loaders/BaseLoader.ts","webpack://HJPlayer/./Utils/SampleInfo.ts","webpack://HJPlayer/./Utils/logging-control.ts","webpack://HJPlayer/./Utils/createHLSDefaultConfig.ts","webpack://HJPlayer/./Controller/TransmuxingController.ts","webpack://HJPlayer/./Loaders/FragmentLoader.ts","webpack://HJPlayer/./Utils/utf8-conv.ts","webpack://HJPlayer/./Codecs/FLVCodec/Demuxer/AmfParser.ts","webpack://HJPlayer/./Codecs/FLVCodec/Demuxer/ExpGolomb.ts","webpack://HJPlayer/./Codecs/FLVCodec/Demuxer/SpsParser.ts","webpack://HJPlayer/./Codecs/FLVCodec/Events/index.ts","webpack://HJPlayer/./Codecs/FLVCodec/errors.ts","webpack://HJPlayer/./Utils/media-info.ts","webpack://HJPlayer/./Codecs/FLVCodec/Remuxer/mp4-generator.ts","webpack://HJPlayer/./Codecs/FLVCodec/Remuxer/aac-silent.ts","webpack://HJPlayer/./Codecs/FLVCodec/Remuxer/browser.ts","webpack://HJPlayer/./Codecs/FLVCodec/Remuxer/media-segment-info.ts","webpack://HJPlayer/./Codecs/FLVCodec/Remuxer/mp4-remuxer.ts","webpack://HJPlayer/./Codecs/FLVCodec/Demuxer/FLVDemuxer.ts","webpack://HJPlayer/./Codecs/FLVCodec/config.ts","webpack://HJPlayer/./Codecs/FLVCodec/Utils/getMediaTypeSupport.ts","webpack://HJPlayer/./Codecs/FLVCodec.ts","webpack://HJPlayer/./Codecs/TSCodec/errors.ts","webpack://HJPlayer/./Codecs/TSCodec/Demuxer/adts.ts","webpack://HJPlayer/./Codecs/TSCodec/Demuxer/mpegaudio.ts","webpack://HJPlayer/./Codecs/TSCodec/Events/index.ts","webpack://HJPlayer/./Codecs/TSCodec/Demuxer/exp-golomb.ts","webpack://HJPlayer/./Codecs/TSCodec/TSUtils/createAVCSample.ts","webpack://HJPlayer/./Codecs/TSCodec/Remuxer/aac-helper.ts","webpack://HJPlayer/./Codecs/TSCodec/Remuxer/mp4-generator.ts","webpack://HJPlayer/./Codecs/TSCodec/Remuxer/mp4-remuxer.ts","webpack://HJPlayer/./Codecs/TSCodec/Demuxer/TSDemuxer.ts","webpack://HJPlayer/./Codecs/TSCodec/config.ts","webpack://HJPlayer/./Codecs/TSCodec/TSUtils/getMediaTypeSupport.ts","webpack://HJPlayer/./Codecs/TSCodec.ts","webpack://HJPlayer/../node_modules/url-toolkit/src/url-toolkit.js","webpack://HJPlayer/./Controller/MediaInfo.ts","webpack://HJPlayer/./Loaders/FetchStreamLoader.ts","webpack://HJPlayer/./Loaders/XHRLoader.ts","webpack://HJPlayer/./Utils/param-seek-handler.ts","webpack://HJPlayer/./Loaders/Fragment.ts","webpack://HJPlayer/./Parser/LevelKey.ts","webpack://HJPlayer/./Parser/Level.ts","webpack://HJPlayer/./Utils/attr-list.ts","webpack://HJPlayer/./Utils/codecs.ts","webpack://HJPlayer/./Parser/M3u8Parser.ts","webpack://HJPlayer/./Interfaces/Loader.ts","webpack://HJPlayer/./Utils/computeReloadInterval.ts","webpack://HJPlayer/./Loaders/PlaylistLoader.ts","webpack://HJPlayer/./Utils/networkSpeedChecker.ts","webpack://HJPlayer/./Loaders/XHRMozChunkedLoader.ts","webpack://HJPlayer/./Loaders/SpeedChecker.ts","webpack://HJPlayer/./Loaders/XhrRangeLoader.ts","webpack://HJPlayer/./Loaders/WebSocketLoader.ts","webpack://HJPlayer/./Utils/range-seek-handler.ts","webpack://HJPlayer/./Controller/IOController.ts","webpack://HJPlayer/./Utils/support-helper.ts","webpack://HJPlayer/./Utils/mediasource-helper.ts","webpack://HJPlayer/../node_modules/webworkify-webpack/index.js","webpack://HJPlayer/./Controller/TransmuxingWorker.ts","webpack://HJPlayer/../node_modules/es6-promise/dist/es6-promise.js","webpack://HJPlayer/../node_modules/process/browser.js","webpack://HJPlayer/../node_modules/webpack/buildin/global.js","webpack://HJPlayer/./Player/NativePlayer.ts","webpack://HJPlayer/./Utils/getMediaTypeSupport.ts","webpack://HJPlayer/./Controller/Transmuxer.ts","webpack://HJPlayer/./Utils/IDRSampleList.ts","webpack://HJPlayer/./Controller/MSEController.ts","webpack://HJPlayer/./Player/MSEPlayer.ts","webpack://HJPlayer/./Codecs/index.ts","webpack://HJPlayer/./Utils/DefaultConfig.ts","webpack://HJPlayer/./HJPlayer.ts","webpack://HJPlayer/./Utils/Polyfill.ts","webpack://HJPlayer/./index.ts"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","eventEmitter","Logger","_tag","TAG","_config","config","on","eventName","callback","emitter","once","off","clearEvents","removeAllListeners","error","tag","msg","FORCE_GLOBAL_TAG","GLOBAL_TAG","str","ENABLE_CALLBACK","emit","HJ_PLAYER_LOG","ENABLE_ERROR","console","warn","log","info","ENABLE_INFO","ENABLE_WARN","debug","ENABLE_DEBUG","INIT_SEGMENT","MEDIA_SEGMENT","GET_SEI_INFO","MEDIA_INFO","LOAD_COMPLETE","DATA_ARRIVED","STATISTICS_INFO","FRAG_PARSED","FRAG_PARSING_METADATA","FRAG_PARSING_USERDATA","INIT_PTS_FOUND","FRAG_PARSING_INIT_SEGMENT","MEDIA_SEEK","RECOVERED_EARLY_EOF","RECOMMEND_SEEKPOINT","METADATA_ARRIVED","SCRIPTDATA_ARRIVED","UPDATE_END","BUFFER_FULL","SOURCE_OPEN","ERROR","MANIFEST_PARSED","IO_ERROR","DEMUX_ERROR","WORKER_LOG","LOAD_NEXT_FRAG","LoaderStatus","message","_message","toString","RuntimeException","has","prefix","Events","EE","fn","context","addListener","event","TypeError","listener","evt","_events","push","_eventsCount","clearEvent","EventEmitter","__proto__","eventNames","events","names","slice","getOwnPropertySymbols","concat","listeners","handlers","length","ee","Array","listenerCount","a1","a2","a3","a4","a5","args","len","arguments","removeListener","undefined","apply","j","prefixed","getGlobalObject","window","self","LoaderErrors","wg","Browser","ua","navigator","userAgent","toLowerCase","match","exec","indexOf","platformMatch","matched","browser","version","majorVersion","platform","versionArray","split","major","parseInt","string","minor","build","chrome","opr","safari","webkit","rv","iemobile","edge","android","detect","INIT","START","STOP","SEEK","PAUSE","RESUME","DESTROY","LOG_CONFIG_CHANGE","UN_SUPPORT_MEDIA","NETWORK_ERROR","TRANSMUXING_ERROR","OK","EXCEPTION","HTTP_STATUS_CODE_INVALID","CONNECTING_TIMEOUT","EARLY_EOF","UNRECOVERABLE_EARLY_EOF","MEDIA_ERROR","MEDIA_MSE_ERROR","FORMAT_ERROR","FORMAT_UNSUPPORTED","CODEC_UNSUPPORTED","ParserEvents","type","supportType","Tag","_type","_status","kIdle","_needStash","_onContentLengthKnown","_onURLRedirect","_onDataArrival","_onError","_onComplete","destroy","isWorking","kConnecting","kBuffering","startLoad","mediaConfig","range","abort","dts","pts","duration","originalDts","isSync","isSyncPoint","fileposition","enable","LoggingControl","_notifyChange","getConfig","globalTag","forceGlobalTag","enableDebug","enableInfo","enableWarn","enableError","enableCallback","applyConfig","registerListener","addLogListener","removeLogListener","forceKeyFrameOnDiscontinuity","maxAudioFramesDrift","maxBufferHole","maxFragLookUpTolerance","stretchShortVideoTrack","GG","mediaDataSource","typeSupported","_emitter","_mediaCodec","cors","withCredentials","_mediaDataSource","totalDuration","_currentSegmentIndex","segments","filesize","fileSize","url","live","isLive","forEach","segment","timestampBase","referrerPolicy","Number","isNaN","_mediaInfo","_ioctl","_pendingSeekTime","_pendingResolveSeekPoint","_statisticsReportTimer","_disableStatisticsReporter","start","_loadSegment","_enableStatisticsReporter","segmentIndex","optionalFrom","dataSource","IOController","ioctl","onError","_onIOException","onSeeked","_onIOSeeked","onComplete","_onIOComplete","onRedirect","_onIORedirect","onRecoveredEarlyEof","_onIORecoveredEarlyEof","onManifestParsed","_onManifestParsed","bindDataSource","onDataArrival","_onInitChunkArrival","open","stop","_internalAbort","pause","resume","isPaused","seek","milliseconds","tsSeek","isSeekable","targetSegmentIndex","_searchSegmentIndexContains","segmentInfo","keyframe","getNearestKeyframe","targetSegmentInfo","insertDiscontinuity","resetMediaInfo","_reportSegmentMediaInfo","idx","data","byteStart","extraData","parseChunks","FLVCodec","probe","mds","overridedDuration","hasAudio","overridedHasAudio","hasVideo","overridedHasVideo","_mediaCodecBindEvents","TSCodec","resetInitSegment","Uint8Array","initSegmentData","audioCodec","videoCodec","totalduration","resetTimeStamp","byteLength","Promise","resolve","then","Errors","_onMediaInfo","mediaInfo","keyframesIndex","segmentCount","setPrototypeOf","MediaInfo","target","_onMetaDataArrived","metadata","_onScriptDataArrived","nextSegmentIndex","flushStashedSamples","redirectedURL","code","reason","_onDemuxException","_onRemuxerInitSegmentArrival","initSegment","_onRemuxerMediaSegmentArrival","mediaSegment","syncPoints","seekpoint","setInterval","_reportStatisticsInfo","statisticsInfoReportInterval","clearInterval","exportInfo","currentURL","hasRedirect","currentRedirectedURL","speed","currentSpeed","loaderType","currentSegmentIndex","totalSegmentCount","scriptdata","InitSegment","MediaSegment","loadNextFrag","global","seekHandler","audioCodecSwitch","levels","startFragRequested","bitrateTest","stats","stashFrag","sn","loading","masterLevels","currentFrag","loader","_pause","audioCodecSwap","_seekHandler","_requestAbort","_contentLength","_receivedLength","_parser","pl","_dataSource","_range","isSupport","kComplete","_loadingM3U8Complete","LOADING_ERROR","_loadingM3U8Error","PARSE_ERROR","_parseM3U8Error","LOADIND_TIMEOUT","_loadingM3U8Timeout","load","details","endSN","frag","loadFrag","loaderContext","responseType","progressData","Math","random","byteRangeStartOffset","end","byteRangeEndOffset","isFinite","rangeStart","rangeEnd","loaderCallbacks","onSuccess","_loadsuccess","_loaderror","onTimeout","_loadtimeout","onProgress","_loadprogress","timeout","maxRetry","retryDelay","maxRetryDelay","tolerance","status","fragmentIndex","fragments","max","codec","aac","heaac","level","tsAutoLevelChoose","tempSource","err","onFragLoaded","payload","currentLevel","tbuffered","performance","now","tparsed","tsCodeRate","_caluCodeRate","levelIndex","_findSuitableLevels","_getAudioCodec","fragCurrent","accurateTimeOffset","defaultAudioCodec","response","networkDetails","kError","text","errData","loadedLength","mySupportCodeRate","trequest","PARSE_PLAYLISTING_ERROR","codeRate","arr","index","bitrate","checkContinuation","uint8array","checkLength","array","buf","out","input","String","fromCharCode","ucs4","join","ArrayBuffer","DataView","setInt16","Int16Array","parseScriptData","arrayBuffer","dataOffset","dataSize","AMF","parseValue","size","e","parseObject","Error","parseString","isObjectEnd","objectEnd","parseVariable","getUint16","parseLongString","getUint32","parseDate","v","timestamp","getFloat64","localTimeOffset","getInt16","Date","offset","getUint8","amfstr","terminal","amfobj","amfvar","strictArrayLength","val","date","amfLongStr","bytesAvailable","word","bitsAvailable","loadWord","position","workingBytes","availableBytes","min","set","subarray","buffer","skipBits","count","skipBytes","readBits","bits","valu","skipLZ","leadingZeroCount","skipUEG","skipEG","readUEG","clz","readEG","readBoolean","readUByte","readUShort","readUInt","skipScalingList","lastScale","nextScale","readSPS","numRefFramesInPicOrderCntCycle","scalingListCount","frameCropLeftOffset","frameCropRightOffset","frameCropTopOffset","frameCropBottomOffset","profileIdc","chromaFormatIdc","picOrderCntType","picWidthInMbsMinus1","picHeightInMapUnitsMinus1","frameMbsOnlyFlag","pixelRatio","width","ceil","height","readSliceType","_ebsp2rbsp","src","srcLength","dst","dstIndex","parseSPS","rbsp","SPSParser","gb","levelIdc","profileString","getProfileString","levelString","getLevelString","chromaFormat","bitDepth","_skipScalingList","refFrames","sarWidth","sarHeight","fps","fpsFixed","fpsNum","fpsDen","aspectRatioIdc","numUnitsInTick","timeScale","sarScale","cropUnitX","cropUnitY","codecWidth","codecHeight","presentWidth","chromaFormatString","getChromaFormatString","frameRate","fixed","sarRatio","codecSize","presentSize","toFixed","chroma","MEDIA_DATA_ARRIVED","SCRIPT_DATA_ARRIVED","ErrorTypes","ErrorDetails","mimeType","audioDataRate","videoDataRate","audioSampleRate","audioChannelCount","profile","sarNum","sarDen","hasKeyframesIndex","isComplete","audioInfoComplete","videoInfoComplete","table","keyframeIdx","_search","times","filepositions","list","last","mid","lbound","ubound","floor","init","MP4","types","avc1","avcC","btrt","dinf","dref","esds","ftyp","hdlr","mdat","mdhd","mdia","mfhd","minf","moof","moov","mp4a","mvex","mvhd","sdtp","stbl","stco","stsc","stsd","stsz","stts","tfdt","tfhd","traf","trak","trun","trex","tkhd","vmhd","smhd","keys","charCodeAt","FTYP","STSD_PREFIX","STTS","STCO","STSC","STSZ","HDLR_VIDEO","HDLR_AUDIO","DREF","SMHD","VMHD","box","result","datas","arrayCount","generateInitSegment","meta","timescale","trackId","id","presentHeight","xmhd","mp3","channelCount","sampleRate","configSize","avcc","track","baseMediaDecodeTime","sequenceNumber","samples","sampleCount","flags","isLeading","dependsOn","isDependedOn","hasRedundancy","cts","isNonSync","getSilentFrame","beginDts","endDts","beginPts","endPts","originalBeginDts","originalEndDts","firstSample","lastSample","appendSyncPoint","sampleInfo","_list","clear","appendArray","getLastSyncPointBeforeDts","_lastAppendLocation","isEmpty","_searchNearestSegmentBefore","neworiginalDts","_searchNearestSegmentAfter","append","mediaSegmentInfo","msi","lastAppendIdx","insertIdx","splice","getLastSegmentBefore","getLastSampleBefore","getLastSyncPointBefore","segmentIdx","_isLive","_dtsBase","_dtsBaseInited","_audioDtsBase","Infinity","_videoDtsBase","_audioNextRefDts","_audioNextDts","_videoNextDts","_audioStashedLastSample","_videoStashedLastSample","_audioMeta","_videoMeta","_audioSegmentInfoList","MediaSegmentInfoList","_videoSegmentInfoList","_forceFirstIDR","_fillSilentAfterSeek","msedge","msie","_mp3UseMpegAudio","firefox","_fillAudioTimestampGap","fixAudioTimestampGap","remux","audioTrack","videoTrack","_calculateDtsBase","_remuxVideo","_remuxAudio","_onTrackMetadataReceived","metabox","container","mediaDuration","videoSample","audioSample","force","dtsCorrection","lastDts","firstDts","refSampleDuration","mpegRawTrack","firstSegmentAfterSeek","insertPrefixSilentFrame","mdatbox","mdatBytes","pop","sample","unshift","firstSampleOriginalDts","originalCodec","distance","firstSampleDts","videoSegment","silentUnit","silentFrameDuration","unit","mp4Samples","needFillSilentFrames","silentFrames","sampleDuration","curRefDts","delta","frameCount","round","intDts","intDuration","frame","latest","MediaSegmentInfo","SampleInfo","moofbox","_mergeBoxes","timestampOffset","lastPts","firstPts","isKeyframe","syncPoint","units","shift","probeData","FLVDemuxer","remuxer","_dataOffset","_firstParse","_dispatch","_hasAudio","hasAudioTrack","_hasVideo","hasVideoTrack","_hasAudioFlagOverrided","_hasVideoFlagOverrided","_audioInitialMetadataDispatched","_videoInitialMetadataDispatched","_metadata","_audioMetadata","_videoMetadata","_naluLengthSize","_timestampBase","_timescale","_duration","_durationOverrided","_referenceFrameRate","_flvSoundRateTable","_mpegSamplingRates","_mpegAudioV10SampleRateTable","_mpegAudioV20SampleRateTable","_mpegAudioV25SampleRateTable","_mpegAudioL1BitRateTable","_mpegAudioL2BitRateTable","_mpegAudioL3BitRateTable","_videoTrack","_audioTrack","_littleEndian","getLittleEndian","chunk","le","tagType","ts2","ts1","_parseAudioData","_parseVideoData","_parseScriptData","prevTagSize","_isInitialMetadataDispatched","scriptData","onMetaData","audiodatarate","videodatarate","framerate","keyframes","_parseKeyframesIndex","time","tagTimestamp","soundSpec","soundFormat","soundRate","soundRateIndex","soundType","aacData","_parseAACAudioData","packetType","misc","samplingRate","mi","aacDataUnitArray","aacSample","_parseMP3AudioData","sampleRate2","timescale2","bitRate","mp3Sample","fatal","_parseAACAudioSpecificConfig","originalAudioObjectType","samplingIndex","audioObjectType","extensionSamplingIndex","samplingFrequence","channelConfig","requestHeader","ver","layer","bitrateIndex","samplingFreqIndex","tagPosition","spec","frameType","codecId","_parseAVCVideoPacket","_parseAVCDecoderConfigurationRecord","_parseAVCVideoData","avcProfile","spsCount","sps","codecArray","codecString","h","ppsCount","lengthSize","naluSize","unitType","unitArray","avcSample","mismatch","consumed","base","MediaSource","WebKitMediaSource","mp4","isTypeSupported","mpeg","_demuxer","appendData","isHeaderPattern","getHeaderLength","getFullFrameLength","isHeader","initTrackConfig","observer","samplerate","adtsObjectType","adtsExtensionSampleingIndex","adtsChanelConfig","manifestCodec","adtsSampleingRates","adtsSampleingIndex","test","getAudioConfig","getFrameDuration","appendFrame","frameIndex","header","frameDuration","frameLength","headerLength","stamp","parseFrameHeader","MpegAudio","BitratesMap","SamplingRateMap","SamplesCoefficients","BytesInSlot","parseHeader","samplesPerFrame","headerB","headerC","headerE","headerF","headerG","columnInBitrates","columnInSampleRates","sampleCoefficient","bytesInSlot","newOffset","META_DATA","ExpGolomb","UINT32_MAX","pasp","videoHdlr","audioHdlr","HDLR_TYPES","video","audio","STSD","majorBrand","avc1Brand","minorVersion","DINF","mergePayload","upperWordDuration","lowerWordDuration","tracks","boxes","bytes","pps","hSpacing","vSpacing","configlen","isAAC","sampleDependencyTable","upperWordBaseMediaDecodeTime","lowerWordBaseMediaDecodeTime","arraylen","paddingValue","degradPrio","movie","agentInfo","isSafari","Boolean","vendor","ISGenerated","_initPTS","_initDTS","nextAvcDts","nextAudioPts","defaultTimeStamp","id3Track","textTrack","timeOffset","contiguous","generateIS","nbAudioSamples","nbVideoSamples","audioTimeOffset","videoTimeOffset","audiovideoDeltaDts","inputTimeScale","MP4Remuxer","audioData","remuxAudio","audioTrackLength","endPTS","startPTS","remuxVideo","videoData","remuxEmptyAudio","remuxID3","remuxText","initPTS","initDTS","audioSamples","videoSamples","computePTSDTS","trackNames","trackName","levelCodec","parent","content","mp4SampleDuration","firstPTS","firstDTS","inputSamples","outputSamples","nbSamples","ptsNormalize","_PTSNormalize","judgement1","abs","judgement2","sort","a","b","deltadts","deltapts","PTSDTSshift","reduce","prev","curr","lastDTS","lastPTS","nbNalu","naluLen","nbUnits","sampleLen","mdatSize","view","setUint32","avcSampleUnits","mp4SampleLength","compositionTimeOffset","unitData","unitDataLen","lastFrameDuration","gapTolerance","deltaToFrameEnd","dropped","mergeData","data1","data2","startDTS","endDTS","nb","fillFrame","mp4timeScale","scaleFactor","inputSampleDuration","rawMPEG","mp4Sample","filter","nextPts","missing","newStamp","numMissingFrames","unitLen","lastSampleDuration","silentFrame","reference","RemuxerTrackIdConfig","id3","sampleAes","_onTrackMetadata","_onDataAvailable","_avcTrack","TSDemuxer","createVideoTrack","createAudioTrack","_id3Track","createId3Track","_txtTrack","createTextTrack","pmtParsed","_pmtId","aacOverFlow","aacLastPTS","chunks","decryptdata","lastFrag","discontinuity","cc","trackSwitch","nextSN","pushDecrypted","defaultInitPTS","syncOffset","_syncOffset","scanwindow","createTrack","pid","pes","stt","unknownPIDs","avcTrack","avcId","audioId","id3Id","pmtId","avcData","pesData","id3Data","parsePAT","_parsePAT","parsePMT","_parsePMT","parsePES","_parsePES","parseAVCPES","_parseAVCPES","parseAACPES","_parseAACPES","parseMPEGPES","_parseMPEGPES","parseID3PES","_parseID3PES","parsedPIDs","avc","_parseMediaInfo","_createMetadata","mpegSupported","isSampleAes","tableEnd","stream","pesFlags","pesLen","pesHdrLen","pesPts","pesDts","payloadStartOffset","newData","dataLen","pushAccesUnit","expGolombDecoder","_parseAVCNALu","spsfound","audFound","sliceType","discardEPB","payloadType","payloadSize","endOfCaptions","firstByte","totalCCs","byteArray","_insertSampleInOrder","uuidStrArray","userDataPayloadBytes","uuid","userData","userDataBytes","codecarray","codecstring","pos","_getLastNalUnit","lastUnit","overflow","state","naluState","lastState","lastUnitStart","lastUnitType","tmp","EPBPositions","newLength","sourceIndex","newPTS","MD","audiosamplerate","compatibleBrands","ms","typeData","URL_REGEX","FIRST_SEGMENT_REGEX","SLASH_DOT_REGEX","SLASH_DOT_DOT_REGEX","URLToolkit","buildAbsoluteURL","baseURL","relativeURL","opts","trim","alwaysNormalize","basePartsForNormalise","parseURL","path","normalizePath","buildURLFromParts","relativeParts","scheme","baseParts","netLoc","pathParts","builtParts","params","query","fragment","baseURLPath","newPath","substring","lastIndexOf","parts","reverse","replace","GlobalEnvironment","userConfig","seekRange","from","to","requestAbort","contentLength","receivedLength","isSupported","isWorkWellEdge","browserNotBlacklisted","fetch","ReadableStream","sourceURL","reuseRedirectedURL","seekConfig","headers","Headers","method","cache","credentials","res","ok","removeURLParameters","lengthHeader","body","_pump","getReader","statusText","reader","read","done","cancel","xhrSetup","requestTimeout","retryTimeout","callbacks","readyState","aborted","clearTimeout","retry","tfirst","loaded","total","tload","loadInternal","xhr","XMLHttpRequest","setRequestHeader","onreadystatechange","readystatechange","onprogress","loadprogress","setTimeout","loadtimeout","send","currentTarget","responseText","responseURL","lengthComputable","paramStart","paramEnd","_startName","_endName","baseUrl","needAnd","seekedURL","queryIndex","resultParams","pairs","pair","requireAnd","ElementaryStreamTypes","baseURI","relativeURI","_uri","iv","baseuri","reluri","_url","_byteRange","_decryptdata","_elementaryStreams","AUDIO","VIDEO","deltaPTS","rawProgramDateTime","programDateTime","title","tagList","urlId","setByteRange","previousFrag","byteRange","relurl","baseurl","levelkey","setDecryptDataFromLevelKey","uri","addElementaryStream","hasElementaryStream","createInitializationVector","segmentNumber","uint8View","endCC","needSidxRanges","startCC","startSN","startTimeOffset","targetduration","averagetargetduration","DECIMAL_RESOLUTION_REGEX","ATTR_LIST_REGEX","attrs","AttrList","parseAttrList","attr","decimalInteger","attrName","intValue","MAX_SAFE_INTEGER","hexadecimalInteger","stringValue","hexadecimalIntegerAsNumber","decimalFloatingPoint","parseFloat","enumeratedString","decimalResolution","lastIndex","sampleEntryCodesISO","a3ds","alac","alaw","dra1","dtsc","dtse","dtsh","enca","g719","g726","m4ae","mha1","mha2","mhm1","mhm2","mlpa","Opus","samr","sawb","sawp","sevc","sqcp","ssmv","twos","ulaw","avc2","avc3","avc4","avcp","drac","dvav","dvhe","encv","hev1","hvc1","mjp2","mp4v","mvc1","mvc2","mvc3","mvc4","resv","rv60","s263","svc1","svc2","vp08","vp09","MASTER_PLAYLIST_REGEX","MASTER_PLAYLIST_MEDIA_REGEX","LEVEL_PLAYLIST_REGEX_FAST","RegExp","source","LEVEL_PLAYLIST_REGEX_SLOW","MP4_REGEX_SUFFIX","findGroup","groups","mediaGroupId","matchingGroup","group","convertAVC1ToAVCOTI","avcdata","substr","parseMasterPlaylist","setCodecs","codecs","filtered","typeCodes","isCodecType","preferred","unknownCodecs","M3U8Parser","resolution","NAME","CODECS","parseMasterPlaylistMedia","audioGroups","medias","TYPE","groupId","LANGUAGE","default","DEFAULT","autoselect","AUTOSELECT","forced","FORCED","lang","URI","groupCodec","parseLevelPlaylist","levelUrlId","currentSN","prevFrag","firstPdtIndex","assignProgramDateTime","value1","value2","toUpperCase","keyAttrs","decryptmethod","decrypturi","decryptiv","mapAttrs","BYTERANGE","every","startIndex","fragPrev","backfillProgramDateTimes","parse","endProgramDateTime","PlaylistContextType","PlaylistLevelType","timer","currentPlaylist","lastestM3U8Content","loadSuccess","loadError","loadTimeout","MANIFEST","XHRLoader","_handleTrackOrLevelPlaylist","_handleMasterPlaylist","_handleManifestParsingError","_getResponseUrl","levelId","levelType","mapContextToLevelType","levelDetails","singleLevel","LoaderEvent","audioTracks","reloadInterval","newPlaylist","lastRequestTime","minReloadInterval","computeReloadInterval","map","subtitles","AUDIO_TRACK","SUBTITLE_TRACK","SUBTITLE","MAIN","GW","_firstCheckpoint","_lastCheckpoint","_intervalBytes","_totalBytes","_lastSecondBytes","_now","reset","addBytes","durationSeconds","currentKBps","_xhr","_requestURL","onloadend","onerror","_onReadyStateChange","_onProgress","_onLoadEnd","_onXhrError","constructor","BaseLoader","_chunkSizeKBList","_currentChunkSizeKB","_currentSpeedNormalized","_zeroSpeedChunkCount","_speedSampler","_waitForTotalLength","_totalLengthReceived","_currentRequestURL","_currentRedirectedURL","_currentRequestRange","_totalLength","_lastTimeLoaded","destory","onload","lastSecondKBps","useRefTotalLength","_openSubRange","_internalOpen","chunkSize","_onLoad","openNextRange","KBps","normalized","_normalizeSpeed","reportComplete","_ws","WebSocket","ws","binaryType","onopen","_onWebSocketOpen","onclose","_onWebSocketClose","onmessage","_onWebSocketMessage","_onWebSocketError","close","_dispatchArrayBuffer","Blob","FileReader","readAsArrayBuffer","arraybuffer","zeroStart","_zeroStart","param","Range","_extraData","_stashInitialSize","stashInitialSize","_stashUsed","_stashSize","_bufferSize","_stashBuffer","_stashByteStart","_enableStash","enableStashBuffer","_loader","_loaderClass","_mediaConfig","_isWebSocketURL","_refTotalLength","_tsExtraData","_fullRequestFlag","_currentRange","_redirectedURL","_speedNormalized","_speedChecker","_speedNormalizeList","_isEarlyEofReconnecting","_paused","_resumeFrom","_onSeeked","_onRedirect","_onRecoveredEarlyEof","_selectSeekHandler","_selectLoader","_createLoader","seekType","rangeLoadZeroStart","seekParamStart","seekParamEnd","CustomSeekHandler","customLoader","FetchStreamLoader","FragmentLoader","_bindLoaderEvents","needStashBuffer","onContentLengthKnown","onURLRedirect","_onLoaderChunkArrival","_onLoaderComplete","_onLoaderError","_internalSeek","dropUnconsumed","_flushStashBuffer","requestRange","_expandBuffer","expectedBytes","bufferNewSize","newBuffer","stashOldArray","_adjustStashSize","stashSizeKB","bufferSize","_dispatchChunks","stashArray","remainArray","remain","nextFrom","mediaSource","sourceBuffer","SourceBuffer","WebKitSourceBuffer","sourceBufferValidAPI","appendBuffer","remove","webpackBootstrapFunc","configurable","oe","f","ENTRY_MODULE","quoteRegExp","getModuleDependencies","sources","queueName","retval","fnString","wrapperSignature","webpackRequireName","re","hasValuesInQueues","queues","hasValues","options","main","requiredModules","all","modulesQueue","seenModules","moduleToCheck","newModules","newModulesKeys","getRequiredModules","entryModule","JSON","stringify","blob","bare","workerUrl","URL","webkitURL","mozURL","msURL","createObjectURL","worker","Worker","objectURL","controller","logcatListener","logType","logInfo","postMessage","onInitSegment","obj","onMediaSegment","onLoadingComplete","onMediaInfo","onMetaDataArrived","onScriptDataArrived","onStatisticsInfo","statInfo","onIOError","onDemuxError","onRecommendSeekpoint","onGetSeiInfo","addEventListener","cmd","isFunction","x","isArray","vertxNext","customSchedulerFn","asap","arg","queue","flush","scheduleFlush","browserWindow","browserGlobal","BrowserMutationObserver","MutationObserver","WebKitMutationObserver","isNode","process","isWorker","Uint8ClampedArray","importScripts","MessageChannel","useSetTimeout","globalSetTimeout","channel","iterations","node","onFulfillment","onRejection","child","noop","PROMISE_ID","makePromise","_state","invokeCallback","_result","subscribe","resolve$1","promise","nextTick","document","createTextNode","observe","characterData","port1","port2","vertx","Function","require","runOnLoop","runOnContext","attemptVertx","handleMaybeThenable","maybeThenable","then$$1","thenable","fulfill","reject","handleOwnThenable","sealed","fulfillmentHandler","rejectionHandler","tryThen","_label","handleForeignThenable","publishRejection","_onerror","publish","_subscribers","subscribers","settled","detail","hasCallback","succeeded","Enumerator","Constructor","_instanceConstructor","_remaining","_enumerate","_eachEntry","entry","resolve$$1","_then","didError","_settledAt","Promise$1","_willSettleAt","enumerator","resolver","needsResolver","initializePromise","needsNew","catch","finally","entries","race","_","_setScheduler","scheduleFn","_setAsap","asapFn","_asap","polyfill","local","P","promiseToString","cast","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","draining","queueIndex","cleanUpNextTick","drainQueue","run","marker","runClearTimeout","Item","env","argv","versions","prependListener","prependOnceListener","binding","cwd","chdir","dir","umask","g","Codec","onvLoadedMetadata","_onvLoadedMetadata","_mediaElement","unload","detachMediaElement","statisticsInfo","attachMediaElement","mediaElement","currentTime","removeAttribute","removeEventListener","preload","play","buffered","volume","muted","seconds","mediaPrefix","HTMLAudioElement","HTMLVideoElement","videoWidth","videoHeight","playerType","hasQualityInfo","decoded","getVideoPlaybackQuality","quality","totalVideoFrames","droppedVideoFrames","webkitDecodedFrameCount","webkitDroppedFrameCount","decodedFrames","droppedFrames","webworkify","getMediaTypeSupport","tempNavigator","WORK","enableWorker","_worker","_workerDestroying","_onWorkerMessage","onLoggingConfigChanged","_onLoggingConfigChanged","_controller","TransmuxingController","ctl","_onIOError","_onDemuxError","_onInitSegment","_onMediaSegment","_onLoadingComplete","_onStatisticsInfo","_onRecommendSeekpoint","_onGetSeiInfo","_onMainfestParsed","hasWorker","terminate","onSourceOpen","_onSourceOpen","onSourceEnded","_onSourceEnded","onSourceClose","_onSourceClose","onSourceBufferError","onSourceBufferUpdateEnd","_onSourceBufferUpdateEnd","_mediaSourceObjectURL","_mediaSource","_isBufferFull","_hasPendingEos","_requireSetMediaDuration","_pendingMediaDuration","_pendingSourceBufferInit","_mimeTypes","_sourceBuffers","_lastInitSegments","_pendingSegments","_pendingRemoveRanges","_idrList","autoCleanupSourceBuffer","sourceOpenEvent","handleSourceOpen","ps","sb","removeSourceBuffer","endOfStream","revokeObjectURL","appendInitSegment","deferred","is","firstInitSegment","addSourceBuffer","updating","_doAppendSegments","_updateMediaSourceDuration","appendMediaSegment","_needCleanupSourceBuffer","_doCleanupSourceBuffer","_hasPendingRemoveRanges","_doRemoveRanges","lastInitSegment","_hasPendingSegments","some","autoCleanupMaxBackwardDuration","doRemove","removeEnd","autoCleanupMinBackwardDuration","current","ranges","pendingSegments","currentOffset","targetOffset","pendings","prr","setMediaSourceDuration","onvSeeking","_onvSeeking","onvCanPlay","_onvCanPlay","onvStalled","_onvStalled","onvProgress","_onvProgress","_requestSetTime","_seekpointRecord","_progressCheckTimer","_msectl","_transmuxer","_mseSourceOpened","_hasPendingLoad","_receivedCanPlay","_statisticsInfo","chromeNeedIDRFix","_alwaysSeekKeyframe","accurateSeek","_manifestParsed","_startPosition","_currentDetail","_onmseUpdateEnd","_onmseBufferFull","deferLoadAfterSourceOpen","_setMediaCurrentTime","lazyLoad","lazyLoadMaxDuration","_suspendTransmuxer","_fillStatisticsInfo","currentRangeEnd","_checkProgressAndResume","needResume","lazyLoadRecoverDuration","_isTimepointBuffered","directSeek","directSeekBegin","directSeekBeginTime","videoBeginTime","idr","setTime","_checkAndApplyUnbufferedSeekpoint","recordTime","_checkAndResumeStuckPlayback","stalled","media","seekPoint","getSupportCodec","DefaultConfig","HJPlayer","es6Promise","install","Polyfill","addIsNaN","addIsInfinite","addPromise"],"mappings":"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ACdA,EAAKwe,WAAW,GAChBxe,EAAKwe,WAAW,GAChBxe,EAAKwe,WAAW,GAChBxe,EAAKwe,WAAW,OAIxBrC,EAAIsC,KAAO,IAAIpW,WAAW,CACtB,IACA,IACA,IACA,IACA,EACA,EACA,EACA,EACA,IACA,IACA,IACA,IACA,GACA,IACA,GACA,KAGJ8T,EAAIuC,YAAc,IAAIrW,WAAW,CAC7B,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IAGJ8T,EAAIwC,KAAO,IAAItW,WAAW,CACtB,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IAEJ8T,EAAIyC,KAAOzC,EAAIwC,KACfxC,EAAI0C,KAAO1C,EAAIwC,KAEfxC,EAAI2C,KAAO,IAAIzW,WAAW,CACtB,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IAGJ8T,EAAI4C,WAAa,IAAI1W,WAAW,CAC5B,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IACA,IACA,IACA,IACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,IACA,IACA,IACA,IACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IAEJ8T,EAAI6C,WAAa,IAAI3W,WAAW,CAC5B,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IACA,IACA,IACA,IACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,IACA,IACA,IACA,IACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IAGJ8T,EAAI8C,KAAO,IAAI5W,WAAW,CACtB,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,IACA,IACA,IACA,GACA,EACA,EACA,EACA,IAIJ8T,EAAI+C,KAAO,IAAI7W,WAAW,CACtB,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IAIJ8T,EAAIgD,KAAO,IAAI9W,WAAW,CACtB,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,KAKD,EAAA+W,IAAP,SAAWpf,G,IAAqB,wDAM5B,IALA,IAAIgT,EAAO,EACPqM,EAAS,KACPC,EAAQ,EAAIxjB,GACZyjB,EAAaD,EAAMjkB,OAEjBxH,EAAI,EAAGA,EAAI0rB,EAAY1rB,IAC3Bmf,GAAQsM,EAAMzrB,GAAG8U,YAGrB0W,EAAS,IAAIhX,WAAW2K,IACjB,GAAMA,IAAS,GAAM,IAC5BqM,EAAO,GAAMrM,IAAS,GAAM,IAC5BqM,EAAO,GAAMrM,IAAS,EAAK,IAC3BqM,EAAO,GAAY,IAAPrM,EAEZqM,EAAOjK,IAAIpV,EAAM,GAEjB,IAAIkU,EAAS,EACb,IAAQrgB,EAAI,EAAGA,EAAI0rB,EAAY1rB,IAE3BwrB,EAAOjK,IAAIkK,EAAMzrB,GAAIqgB,GACrBA,GAAUoL,EAAMzrB,GAAG8U,WAGvB,OAAO0W,GAIJ,EAAAG,oBAAP,SAA2BC,GACvB,IAAM9C,EAAOR,EAAIiD,IAAIjD,EAAIC,MAAMO,KAAMR,EAAIsC,MACnCtB,EAAOhB,EAAIgB,KAAKsC,GAEhBJ,EAAS,IAAIhX,WAAWsU,EAAKhU,WAAawU,EAAKxU,YAGrD,OAFA0W,EAAOjK,IAAIuH,EAAM,GACjB0C,EAAOjK,IAAI+H,EAAMR,EAAKhU,YACf0W,GAIJ,EAAAlC,KAAP,SAAYsC,GACR,IAAMnC,EAAOnB,EAAImB,KAAKmC,EAAKC,UAAWD,EAAKne,UACrC2c,EAAO9B,EAAI8B,KAAKwB,GAChBpC,EAAOlB,EAAIkB,KAAKoC,GACtB,OAAOtD,EAAIiD,IAAIjD,EAAIC,MAAMe,KAAMG,EAAMW,EAAMZ,IAIxC,EAAAC,KAAP,SAAYoC,EAAmBpe,GAC3B,YAD2B,IAAAA,MAAA,GACpB6a,EAAIiD,IACPjD,EAAIC,MAAMkB,KACV,IAAIjV,WAAW,CACX,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACCqX,IAAc,GAAM,IACpBA,IAAc,GAAM,IACpBA,IAAc,EAAK,IACR,IAAZA,EACCpe,IAAa,GAAM,IACnBA,IAAa,GAAM,IACnBA,IAAa,EAAK,IACR,IAAXA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IACA,IACA,IACA,QAML,EAAA2c,KAAP,SAAYwB,GACR,OAAOtD,EAAIiD,IAAIjD,EAAIC,MAAM6B,KAAM9B,EAAIiC,KAAKqB,GAAOtD,EAAIY,KAAK0C,KAIrD,EAAArB,KAAP,SAAYqB,GACR,IAAME,EAAUF,EAAKG,GACfte,EAAWme,EAAKne,UAAY,EAC5BmW,EAAQgI,EAAK5F,aACblC,EAAS8H,EAAKI,cAEpB,OAAO1D,EAAIiD,IACPjD,EAAIC,MAAMgC,KACV,IAAI/V,WAAW,CACX,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACCsX,IAAY,GAAM,IAClBA,IAAY,GAAM,IAClBA,IAAY,EAAK,IACR,IAAVA,EACA,EACA,EACA,EACA,EACCre,IAAa,GAAM,IACnBA,IAAa,GAAM,IACnBA,IAAa,EAAK,IACR,IAAXA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,EACA,EACA,EACCmW,IAAU,EAAK,IACR,IAARA,EACA,EACA,EACCE,IAAW,EAAK,IACR,I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PgF,OAAO,CACJ,EACA,EACA,KAGZ,OAAOihB,EAAIiD,IAAIjD,EAAIC,MAAMM,KAAMpV,IAG5B,EAAA+U,KAAP,SAAYoD,GACA,IAAAU,EAASV,EAAL,KACNhI,EAAQgI,EAAK9F,WACbhC,EAAS8H,EAAK7F,YAEdtS,EAAO,IAAIe,WAAW,CACxB,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACCoP,IAAU,EAAK,IACR,IAARA,EACCE,IAAW,EAAK,IACR,IAATA,EACA,EACA,GACA,EACA,EACA,EACA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,IACA,IACA,IACA,GACA,IACA,IACA,IACA,GACA,IACA,IACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,IACA,MAEJ,OAAOwE,EAAIiD,IAAIjD,EAAIC,MAAMC,KAAM/U,EAAM6U,EAAIiD,IAAIjD,EAAIC,MAAME,KAAM6D,KAI1D,EAAA9C,KAAP,SAAYoC,GACR,OAAOtD,EAAIiD,IAAIjD,EAAIC,MAAMiB,KAAMlB,EAAIgC,KAAKsB,KAIrC,EAAAtB,KAAP,SAAYsB,GACR,IAAME,EAAUF,EAAKG,GACftY,EAAO,IAAIe,WAAW,CACxB,EACA,EACA,EACA,EACCsX,IAAY,GAAM,IAClBA,IAAY,GAAM,IAClBA,IAAY,EAAK,IACR,IAAVA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IAEJ,OAAOxD,EAAIiD,IAAIjD,EAAIC,MAAM+B,KAAM7W,IAI5B,EAAA4V,KAAP,SAAYkD,EAAcC,GACtB,OAAOlE,EAAIiD,IACPjD,EAAIC,MAAMc,KACVf,EAAIa,KAAKoD,EAAME,gBACfnE,EAAI6B,KAAKoC,EAAOC,KAIjB,EAAArD,KAAP,S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ACA,EACA,EACA,KAEN,GAAoB,IAAjB2X,EACD,OAAO,IAAI3X,WAAW,CAClB,EACA,IACA,EACA,IACA,GACA,IACA,EACA,GACA,GACA,EACA,IACA,EACA,IACA,GACA,EACA,IACA,EACA,GACA,IACA,EACA,KAEN,GAAoB,IAAjB2X,EACD,OAAO,IAAI3X,WAAW,CAClB,EACA,IACA,EACA,IACA,GACA,IACA,EACA,GACA,GACA,EACA,IACA,EACA,IACA,GACA,EACA,IACA,EACA,GACA,IACA,EACA,EACA,IACA,EACA,GACA,EACA,UAGL,CAEH,GAAoB,IAAjB2X,EAEC,OAAO,IAAI3X,WAAW,CAClB,EACA,GACA,GACA,IACA,IACA,GACA,IACA,IACA,IACA,EACA,EACA,EACA,EACA,GACA,EACA,IACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,KAEN,GAAoB,IAAjB2X,EAED,OAAO,IAAI3X,WAAW,CAClB,EACA,GACA,GACA,IACA,IACA,GACA,IACA,IACA,IACA,EACA,EACA,EACA,EACA,EACA,IACA,EACA,EACA,IACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,KAEN,GAAoB,IAAjB2X,EAED,OAAO,IAAI3X,WAAW,CAClB,EACA,GACA,GACA,IACA,IACA,GACA,IACA,IACA,IACA,EACA,EACA,EACA,EACA,EACA,IACA,EACA,EACA,IACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,G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ACA,EACA,IACA,EACA,IACA,GACA,IACA,EACA,EACA,KAEN,GAAoB,IAAjB2X,EACD,OAAO,IAAI3X,WAAW,CAClB,EACA,IACA,EACA,IACA,GACA,IACA,EACA,GACA,GACA,EACA,IACA,EACA,IACA,GACA,EACA,IACA,EACA,GACA,IACA,EACA,KAEN,GAAoB,IAAjB2X,EACD,OAAO,IAAI3X,WAAW,CAClB,EACA,IACA,EACA,IACA,GACA,IACA,EACA,GACA,GACA,EACA,IACA,EACA,IACA,GACA,EACA,IACA,EACA,GACA,IACA,EACA,EACA,IACA,EACA,GACA,EACA,MAIR,MAEJ,QACI,GAAoB,IAAjB2X,EAEC,OAAO,IAAI3X,WAAW,CAClB,EACA,GACA,GACA,IACA,IACA,GACA,IACA,IACA,IACA,EACA,EACA,EACA,EACA,GACA,EACA,IACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,KAEN,GAAoB,IAAjB2X,EAED,OAAO,IAAI3X,WAAW,CAClB,EACA,GACA,GACA,IACA,IACA,GACA,IACA,IACA,IACA,EACA,EACA,EACA,EACA,EACA,IACA,EACA,EACA,IACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,KAEN,GAAoB,IAAjB2X,EAED,OAAO,IAAI3X,WAAW,CAClB,EACA,GACA,GACA,IACA,IACA,GACA,IACA,IACA,IACA,EACA,EACA,EACA,EACA,EACA,IACA,EACA,EACA,IACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,KAKZ,OAAO,MAEf,EAzSA,G,qXCGMspB,EAAa,WAAK,IAAK,EA0oCd,EAxoCf,yBAsoCA,OA/mCW,EAAAzV,KAAP,WACIC,EAAIC,MAAQ,CACRC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACN,OAAQ,GACRC,KAAM,GACNC,KAAM,GACNsU,KAAM,GACNrU,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,IAGV/pB,OAAOgqB,KAAKpC,EAAIC,OAAOrY,SAAQ,SAAC/D,GAC5Bmc,EAAIC,MAAMpc,GAAQ,CACdA,EAAKwe,WAAW,GAChBxe,EAAKwe,WAAW,GAChBxe,EAAKwe,WAAW,GAChBxe,EAAKwe,WAAW,OAIxB,IAAMqT,EAAY,IAAIxpB,WAAW,CAC7B,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IACA,IACA,IACA,IACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,IACA,IACA,IACA,IACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IAGEypB,EAAY,IAAIzpB,WAAW,CAC7B,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IACA,IACA,IACA,IACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EAC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EACA,EACA,EACA,EACA,EACA,GACA,GACA,KAEJwI,EACAhE,EAAIiD,IACAjD,EAAIC,MAAMG,KACV,IAAIlU,WAAW,CACX,EACA,GACA,IACA,IACA,EACA,GACA,IACA,IACA,EACA,GACA,IACA,OAGR8T,EAAIiD,IACAjD,EAAIC,MAAMwV,KACV,IAAIvpB,WAAW,CACXyqB,GAAY,GACXA,GAAY,GAAM,IAClBA,GAAY,EAAK,IACP,IAAXA,EACAC,GAAY,GACXA,GAAY,GAAM,IAClBA,GAAY,EAAK,IACP,IAAXA,OAMT,EAAArW,KAAP,SAAY0D,GACR,IAAM4S,EAAY5S,EAAMlqB,OAASkqB,EAAMlqB,OAAOmF,OAAS,EACvD,OAAO,IAAIgN,WACP,CACI,EACA,EACA,EACA,EAEA,EACA,GAAO2qB,EACP,EACA,EACA,EAEA,EACA,GAAOA,EACP,GACA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EAEA,GAEC93B,OAAO,CAAC83B,IACR93B,OAAOklB,EAAMlqB,QACbgF,OAAO,CAAC,EAAM,EAAM,MAI1B,EAAAkiB,KAAP,SAAYgD,GACA,IAAAkP,EAAelP,EAAL,WAClB,OAAOjE,EAAIiD,IACPjD,EAAIC,MAAMgB,KACV,IAAI/U,WAAW,CACX,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA+X,EAAMJ,aACN,EACA,GACA,EACA,EACA,EACA,EACCsP,GAAc,EAAK,IACP,IAAbA,EACA,EACA,IAEJnT,EAAIiD,IAAIjD,EAAIC,MAAMM,KAAMP,EAAIO,KAAK0D,MAIlC,EAAAL,IAAP,SAAWK,GACC,IAAAkP,EAAelP,EAAL,WAClB,OAAOjE,EAAIiD,IACPjD,EAAIC,MAAM,QACV,IAAI/T,WAAW,CACX,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA+X,EAAMJ,aACN,EACA,GACA,EACA,EACA,EACA,EACCsP,GAAc,EAAK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","file":"hjplayer.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"HJPlayer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"HJPlayer\"] = factory();\n\telse\n\t\troot[\"HJPlayer\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 31);\n","/**\n * Log部分\n */\nimport EventEmitter from 'eventemitter3';\nimport LogConfig from '../Interfaces/LogConfig';\nimport HJPlayerEvents from '../Events/index';\n\nconst eventEmitter = new EventEmitter();\n\nclass Logger {\n    static _config: LogConfig\n\n    static _tag: string\n\n    static get GLOBAL_TAG() {\n        return Logger._tag;\n    }\n\n    static set GLOBAL_TAG(TAG: string) {\n        Logger._tag = TAG;\n    }\n\n    static get config() {\n        if(!Logger._config) {\n            Logger._config = Object.create(null);\n            // throw new Error(\"please set Logger's config first!\")\n        }\n        return Logger._config;\n    }\n\n    static set config(config: LogConfig) {\n        Logger._config = config;\n    }\n\n    static get emitter() {\n        return eventEmitter;\n    }\n\n    static on(eventName: string, callback: EventEmitter.ListenerFn) {\n        Logger.emitter.on(eventName, callback);\n    }\n\n    static once(eventName: string, callback: EventEmitter.ListenerFn) {\n        Logger.emitter.once(eventName, callback);\n    }\n\n    static off(eventName: string, callback: EventEmitter.ListenerFn) {\n        Logger.emitter.off(eventName, callback);\n    }\n\n    static clearEvents() {\n        Logger.emitter.removeAllListeners();\n    }\n\n    static error(tag: string, msg: string) {\n        if(!tag || Logger.config.FORCE_GLOBAL_TAG) tag = Logger.GLOBAL_TAG;\n\n        const str = `[${tag}] > ${msg}`;\n\n        if(Logger.config.ENABLE_CALLBACK) {\n            Logger.emitter.emit(HJPlayerEvents.HJ_PLAYER_LOG, 'error', str);\n        }\n\n        if(!Logger.config.ENABLE_ERROR) {\n            return;\n        }\n\n        if(console.error) {\n            console.error(str);\n        } else if(console.warn) {\n            console.warn(str);\n        } else {\n            console.log(str);\n        }\n    }\n\n    /**\n     * 在控制台打印程序运行时的一些日志信息\n     * @param tag 文件标签\n     * @param msg 消息\n     */\n    static info(tag: string, msg: string) {\n        if(!tag || Logger.config.FORCE_GLOBAL_TAG) tag = Logger.GLOBAL_TAG;\n\n        const str = `[${tag}] > ${msg}`;\n\n        if(Logger.config.ENABLE_CALLBACK) {\n            Logger.emitter.emit(HJPlayerEvents.HJ_PLAYER_LOG, 'info', str);\n        }\n\n        if(!Logger.config.ENABLE_INFO) {\n            return;\n        }\n\n        if(console.info) {\n            console.info(str);\n        } else {\n            console.log(str);\n        }\n    }\n\n    static log(tag: string, msg: string) {\n        if(!tag || Logger.config.FORCE_GLOBAL_TAG) tag = Logger.GLOBAL_TAG;\n\n        const str = `[${tag}] > ${msg}`;\n\n        if(Logger.config.ENABLE_CALLBACK) {\n            Logger.emitter.emit(HJPlayerEvents.HJ_PLAYER_LOG, 'log', str);\n        }\n\n        if(!Logger.config.ENABLE_INFO) {\n            return;\n        }\n\n        console.log(str);\n    }\n\n    static warn(tag: string, msg: string) {\n        if(!tag || Logger.config.FORCE_GLOBAL_TAG) tag = Logger.GLOBAL_TAG;\n\n        const str = `[${tag}] > ${msg}`;\n\n        if(Logger.config.ENABLE_CALLBACK) {\n            Logger.emitter.emit(HJPlayerEvents.HJ_PLAYER_LOG, 'warn', str);\n        }\n\n        if(!Logger.config.ENABLE_WARN) {\n            return;\n        }\n\n        if(console.warn) {\n            console.warn(str);\n        } else {\n            console.log(str);\n        }\n    }\n\n    static debug(tag: string, msg: string) {\n        if(!tag || Logger.config.FORCE_GLOBAL_TAG) tag = Logger.GLOBAL_TAG;\n\n        const str = `[${tag}] > ${msg}`;\n\n        if(Logger.config.ENABLE_CALLBACK) {\n            Logger.emitter.emit(HJPlayerEvents.HJ_PLAYER_LOG, 'debug', str);\n        }\n\n        if(!Logger.config.ENABLE_DEBUG) {\n            return;\n        }\n\n        if(console.debug) {\n            console.debug(str);\n        } else {\n            console.log(str);\n        }\n    }\n}\n\nexport default Logger;\n","/**\n * 存放事件的集合\n */\nconst HJPlayerEvents = {\n    // 当转码器解析出初始化片段时触发, 不对外\n    INIT_SEGMENT: 'INIT_SEGMENT',\n\n    // 当转码器解析出媒体化片段时触发 不对外\n    MEDIA_SEGMENT: 'MEDIA_SEGMENT',\n\n    // 当转码器解析出媒体增强信息时触发 对外\n    GET_SEI_INFO: 'GET_SEI_INFO',\n\n    // 当转码器解析出媒体信息时触发 对外\n    MEDIA_INFO: 'MEDIA_INFO',\n\n    // 当 loader 加载媒体文件完成时触发 // 对外\n    LOAD_COMPLETE: 'LOAD_COMPLETE',\n\n    // 当 loader 获得到媒体数据时触发 不对外\n    DATA_ARRIVED: 'DATA_ARRIVED',\n\n    // 媒体统计信息 对外\n    STATISTICS_INFO: 'STATISTICS_INFO',\n\n    // 播放器log事件 对外\n    HJ_PLAYER_LOG: 'HJ_PLAYER_LOG',\n\n    // FRAG_PARSED\n    FRAG_PARSED: 'FRAG_PARSED',\n\n    // FRAG_PARSING_METADATA 不对外\n    FRAG_PARSING_METADATA: 'FRAG_PARSING_METADATA',\n\n    // FRAG_PARSING_USERDATA\n    FRAG_PARSING_USERDATA: 'FRAG_PARSING_USERDATA',\n\n    // INIT_PTS_FOUND\n    INIT_PTS_FOUND: 'INIT_PTS_FOUND',\n\n    // FRAG_PARSING_INIT_SEGMENT\n    FRAG_PARSING_INIT_SEGMENT: 'FRAG_PARSING_INIT_SEGMENT',\n\n    // 媒体 SEEK 事件 不对外\n    MEDIA_SEEK: 'MEDIA_SEEK',\n\n    // 从文件过早结束的异常中恢复 对外\n    RECOVERED_EARLY_EOF: 'RECOVERED_EARLY_EOF',\n\n    // 推荐的SEEK点 不对外\n    RECOMMEND_SEEKPOINT: 'RECOMMEND_SEEKPOINT',\n\n    // 媒体信息 对外\n    METADATA_ARRIVED: 'METADATA_ARRIVED',\n\n    // FLV ScriptData 对外\n    SCRIPTDATA_ARRIVED: 'SCRIPTDATA_ARRIVED',\n\n    // 更新结束, 不对外\n    UPDATE_END: 'UPDATE_END',\n\n    // sourceBuffer 已满 不对外\n    BUFFER_FULL: 'BUFFER_FULL',\n\n    // sourceBuffer 已开 不对外\n    SOURCE_OPEN: 'SOURCE_OPEN',\n\n    // 总错误事件 对外\n    ERROR: 'ERROR',\n\n    // m3u8 playlist 解析完事件 对外\n    MANIFEST_PARSED: 'MANIFEST_PARSED',\n\n    // IO 出现错误时触发 对外\n    IO_ERROR: 'IO_ERROR',\n\n    // 解码出现错误时触发 对外\n    DEMUX_ERROR: 'DEMUX_ERROR',\n\n    // webworker 发送log日志\n    WORKER_LOG: 'WORKER_LOG',\n\n    // 加载下一个 frag, 不对外\n    LOAD_NEXT_FRAG: 'LOAD_NEXT_FRAG'\n};\n\nexport default HJPlayerEvents;\n","enum LoaderStatus {\n    kIdle,\n    kConnecting,\n    kBuffering,\n    kError,\n    kComplete\n}\n\nexport default LoaderStatus;\n","/**\n * 定义异常\n */\nexport class RuntimeException {\n    _message: string\n\n    constructor(message: string) {\n        this._message = message;\n    }\n\n    get name() {\n        return 'RuntimeException';\n    }\n\n    get message() {\n        return this._message;\n    }\n\n    toString() {\n        return `${this.name}: ${this.message}`;\n    }\n}\n\nexport class IllegalStateException extends RuntimeException {\n    constructor(message: string) {\n        super(message);\n    }\n\n    get name() {\n        return 'IllegalStateException';\n    }\n}\n\nexport class InvalidArgumentException extends RuntimeException {\n    constructor(message: string) {\n        super(message);\n    }\n\n    get name() {\n        return 'InvalidArgumentException';\n    }\n}\n\nexport class NotImplementedException extends RuntimeException {\n    constructor(message: string) {\n        super(message);\n    }\n\n    get name() {\n        return 'NotImplementedException';\n    }\n}\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","/**\n * 获取全局, 在web worker环境中时, 不存在window对象\n */\n/* eslint-disable */\nexport default function getGlobalObject(): Window {\n    if(typeof window === 'undefined') {\n        return self;\n    }\n    return window;\n}\n/* eslint-enable */\n","enum LoaderErrors {\n    OK = 'OK',\n    EXCEPTION = 'EXCEPTION',\n    HTTP_STATUS_CODE_INVALID = 'HTTP_STATUS_CODE_INVALID',\n    CONNECTING_TIMEOUT = 'CONNECTING_TIMEOUT',\n    EARLY_EOF = 'EARLY_EOF',\n    UNRECOVERABLE_EARLY_EOF = 'UNRECOVERABLE_EARLY_EOF',\n    PARSE_PLAYLISTING_ERROR = 'PARSE_PLAYLISTING_ERROR'\n}\nexport default LoaderErrors;\n","/**\n * 浏览器探测\n */\nimport getGlobal from './getGlobalObject';\n\nconst wg = getGlobal();\n\nfunction detect() {\n    // modified from jquery-browser-plugin\n\n    const ua = wg.navigator.userAgent.toLowerCase();\n\n    const match: any[] | RegExpExecArray = /(edge)\\/([\\w.]+)/.exec(ua)\n        || /(opr)[/]([\\w.]+)/.exec(ua)\n        || /(chrome)[/]([\\w.]+)/.exec(ua)\n        || /(iemobile)[/]([\\w.]+)/.exec(ua)\n        || /(version)(applewebkit)[/]([\\w.]+).*(safari)[/]([\\w.]+)/.exec(ua)\n        || /(webkit)[/]([\\w.]+).*(version)[/]([\\w.]+).*(safari)[/]([\\w.]+)/.exec(ua)\n        || /(webkit)[/]([\\w.]+)/.exec(ua)\n        || /(opera)(?:.*version|)[/]([\\w.]+)/.exec(ua)\n        || /(msie) ([\\w.]+)/.exec(ua)\n        || (ua.indexOf('trident') >= 0 && /(rv)(?::| )([\\w.]+)/.exec(ua))\n        || (ua.indexOf('compatible') < 0 && /(firefox)[/]([\\w.]+)/.exec(ua))\n        || [];\n\n    const platformMatch: any[] | RegExpExecArray = /(ipad)/.exec(ua)\n        || /(ipod)/.exec(ua)\n        || /(windows phone)/.exec(ua)\n        || /(iphone)/.exec(ua)\n        || /(kindle)/.exec(ua)\n        || /(android)/.exec(ua)\n        || /(windows)/.exec(ua)\n        || /(mac)/.exec(ua)\n        || /(linux)/.exec(ua)\n        || /(cros)/.exec(ua)\n        || [];\n\n    const matched = {\n        browser: match[5] || match[3] || match[1] || '',\n        version: match[2] || match[4] || '0',\n        majorVersion: match[4] || match[2] || '0',\n        platform: platformMatch[0] || ''\n    };\n\n    const browser = Object.create(null);\n\n    if(matched.browser) {\n        browser[matched.browser] = true;\n\n        const versionArray = matched.majorVersion.split('.');\n        browser.version = {\n            major: parseInt(matched.majorVersion, 10),\n            string: matched.version\n        };\n        if(versionArray.length > 1) {\n            browser.version.minor = parseInt(versionArray[1], 10);\n        }\n        if(versionArray.length > 2) {\n            browser.version.build = parseInt(versionArray[2], 10);\n        }\n    }\n\n    if(matched.platform) {\n        browser[matched.platform] = true;\n    }\n\n    if(browser.chrome || browser.opr || browser.safari) {\n        browser.webkit = true;\n    }\n\n    // MSIE. IE11 has 'rv' identifer\n    if(browser.rv || browser.iemobile) {\n        if(browser.rv) {\n            delete browser.rv;\n        }\n        const msie = 'msie';\n        matched.browser = msie;\n        browser[msie] = true;\n    }\n\n    // Microsoft Edge\n    if(browser.edge) {\n        delete browser.edge;\n        const msedge = 'msedge';\n        matched.browser = msedge;\n        browser[msedge] = true;\n    }\n\n    // Opera 15+\n    if(browser.opr) {\n        const opera = 'opera';\n        matched.browser = opera;\n        browser[opera] = true;\n    }\n\n    // Stock android browsers are marked as Safari\n    if(browser.safari && browser.android) {\n        const android = 'android';\n        matched.browser = android;\n        browser[android] = true;\n    }\n\n    browser.name = matched.browser;\n    browser.platform = matched.platform;\n\n    return browser;\n}\n\nconst Browser = detect();\n\nexport default Browser;\n","const WEBWORKER_CMD = {\n    INIT: 'INIT',\n    START: 'START',\n    STOP: 'STOP',\n    SEEK: 'SEEK',\n    PAUSE: 'PAUSE',\n    RESUME: 'RESUME',\n    DESTROY: 'DESTROY',\n    LOG_CONFIG_CHANGE: 'LOG_CONFIG_CHANGE'\n};\n\nexport default WEBWORKER_CMD;\n","// import IOError from './IOError'\n\n// export { IOError }\n\nconst HJPlayerErrors = {\n    // 当 解码器探测返回false时触发\n    UN_SUPPORT_MEDIA: 'UN_SUPPORT_MEDIA',\n\n    // 当 loader 加载媒体文件遇到网络错误时触发\n    NETWORK_ERROR: 'NETWORK_ERROR',\n\n    // 解析错误\n    TRANSMUXING_ERROR: 'TRANSMUXING_ERROR',\n\n    // LoaderIO 出现错误\n    IO_ERROR: 'IO_ERROR',\n\n    /**\n     * 加载相关的错误\n     */\n    OK: 'OK',\n\n    // 加载异常\n    EXCEPTION: 'EXCEPTION',\n\n    // 加载是遇到 不可用的 HTTP的请求\n    HTTP_STATUS_CODE_INVALID: 'HTTP_STATUS_CODE_INVALID',\n\n    // 加载超时\n    CONNECTING_TIMEOUT: 'CONNECTING_TIMEOUT',\n\n    // 读取文件时非正常的提前进入EOF状态\n    EARLY_EOF: 'EARLY_EOF',\n\n    // 不可恢复的文件EOF异常\n    UNRECOVERABLE_EARLY_EOF: 'UNRECOVERABLE_EARLY_EOF',\n\n    // 媒体错误\n    MEDIA_ERROR: 'MEDIA_ERROR',\n\n    //\n    MEDIA_MSE_ERROR: 'MEDIA_MSE_ERROR',\n\n    FORMAT_ERROR: 'FORMAT_ERROR',\n\n    FORMAT_UNSUPPORTED: 'FORMAT_UNSUPPORTED',\n\n    CODEC_UNSUPPORTED: 'CODEC_UNSUPPORTED'\n};\n\nexport default HJPlayerErrors;\n","/*\n * 抛出的事件\n * */\nenum ParserEvents {\n    LOADING_ERROR = 'LOADING_ERROR', // 加载M3U8文件失败\n    LOAD_COMPLETE = 'LOAD_COMPLETE', // 加载M3U8文件完毕\n    MANIFEST_PARSED = 'MANIFEST_PARSED', // m3u8解析完成\n    DEMUXER_PUSH = 'DEMUXER_PUSH',\n    PARSE_SUCCESS = 'PARSE_SUCCESS', // 解析成功\n    PARSE_ERROR = 'PARSE_ERROR', // 解析失败\n    GET_TS_URL = 'GET_TS_URL', // 获取TS路径\n    LOADIND_TIMEOUT = 'LOADIND_TIMEOUT'\n}\n\nexport default ParserEvents;\n","import EventEmitter from 'eventemitter3';\nimport BaseLoaderInterface from '../Interfaces/BaseLoader';\nimport { NotImplementedException } from '../Utils/Exception';\nimport LoaderStatus from './LoaderStatus';\nimport SeekRange from '../Interfaces/SeekRange';\nimport MediaConfig from '../Interfaces/MediaConfig';\n\nclass BaseLoader implements BaseLoaderInterface {\n    Tag: string\n\n    supportType: string\n\n    _type: string\n\n    _needStash: boolean\n\n    _onContentLengthKnown: Function | null\n\n    _onDataArrival: Function | null\n\n    _onError: Function | null\n\n    _onComplete: Function | null\n\n    _status: number\n\n    _onURLRedirect: Function | null\n\n    eventEmitter: EventEmitter\n\n    constructor(type: string, supportType: string) {\n        this.Tag = 'BaseLoader';\n        this.supportType = supportType;\n        this._type = type || 'undefined';\n        this._status = LoaderStatus.kIdle;\n        this._needStash = false;\n        // callbacks\n        this._onContentLengthKnown = null;\n        this._onURLRedirect = null;\n        this._onDataArrival = null;\n        this._onError = null;\n        this._onComplete = null;\n        this.eventEmitter = new EventEmitter();\n    }\n\n    on(eventName: string, callback: EventEmitter.ListenerFn): void {\n        this.eventEmitter.on(eventName, callback);\n    }\n\n    once(eventName: string, callback: EventEmitter.ListenerFn): void {\n        this.eventEmitter.once(eventName, callback);\n    }\n\n    off(eventName: string, callback?: EventEmitter.ListenerFn): void {\n        this.eventEmitter.off(eventName, callback);\n    }\n\n    destroy() {\n        this.eventEmitter.removeAllListeners();\n        delete (this as any).eventEmitter;\n        this._status = LoaderStatus.kIdle;\n        this._onContentLengthKnown = null;\n        this._onURLRedirect = null;\n        this._onDataArrival = null;\n        this._onError = null;\n        this._onComplete = null;\n    }\n\n    isWorking() {\n        return this._status === LoaderStatus.kConnecting || this._status === LoaderStatus.kBuffering;\n    }\n\n    get type() {\n        return this._type;\n    }\n\n    get status() {\n        return this._status;\n    }\n\n    get needStashBuffer() {\n        return this._needStash;\n    }\n\n    get onContentLengthKnown() {\n        return this._onContentLengthKnown;\n    }\n\n    set onContentLengthKnown(callback) {\n        this._onContentLengthKnown = callback;\n    }\n\n    get onURLRedirect() {\n        return this._onURLRedirect;\n    }\n\n    set onURLRedirect(callback) {\n        this._onURLRedirect = callback;\n    }\n\n    get onDataArrival() {\n        return this._onDataArrival;\n    }\n\n    set onDataArrival(callback) {\n        this._onDataArrival = callback;\n    }\n\n    get onError() {\n        return this._onError;\n    }\n\n    set onError(callback) {\n        this._onError = callback;\n    }\n\n    get onComplete() {\n        return this._onComplete;\n    }\n\n    set onComplete(callback) {\n        this._onComplete = callback;\n    }\n\n    startLoad(mediaConfig: MediaConfig, range: SeekRange) {\n        throw new NotImplementedException('Unimplemented abstract function!');\n    }\n\n    abort() {\n        throw new NotImplementedException('Unimplemented abstract function!');\n    }\n}\n\nexport default BaseLoader;\n","export default class SampleInfo {\n    dts: number\n\n    pts: number\n\n    duration: number\n\n    originalDts: number\n\n    isSyncPoint: boolean\n\n    fileposition: number | null\n\n    constructor(dts: number, pts: number, duration: number, originalDts: number, isSync: boolean) {\n        this.dts = dts;\n        this.pts = pts;\n        this.duration = duration;\n        this.originalDts = originalDts;\n        this.isSyncPoint = isSync;\n        this.fileposition = null;\n    }\n}\n","import EventEmitter from 'eventemitter3';\nimport Log from './Logger';\nimport UserConfig from '../Interfaces/UserConfig';\nimport HJPlayerEvents from '../Events/index';\n\nclass LoggingControl {\n    static emitter: EventEmitter\n\n    static get forceGlobalTag() {\n        return Log.config.FORCE_GLOBAL_TAG || false;\n    }\n\n    static set forceGlobalTag(enable: boolean) {\n        Log.config.FORCE_GLOBAL_TAG = enable;\n        LoggingControl._notifyChange();\n    }\n\n    static get globalTag() {\n        return Log.GLOBAL_TAG;\n    }\n\n    static set globalTag(tag: string) {\n        Log.GLOBAL_TAG = tag;\n        LoggingControl._notifyChange();\n    }\n\n    static get enableAll() {\n        return (\n            Log.config.ENABLE_DEBUG\n            && Log.config.ENABLE_INFO\n            && Log.config.ENABLE_WARN\n            && Log.config.ENABLE_ERROR\n        );\n    }\n\n    static set enableAll(enable) {\n        Log.config.ENABLE_DEBUG = enable;\n        Log.config.ENABLE_INFO = enable;\n        Log.config.ENABLE_WARN = enable;\n        Log.config.ENABLE_ERROR = enable;\n        LoggingControl._notifyChange();\n    }\n\n    static get enableDebug() {\n        return Log.config.ENABLE_DEBUG;\n    }\n\n    static set enableDebug(enable) {\n        Log.config.ENABLE_DEBUG = enable;\n        LoggingControl._notifyChange();\n    }\n\n    static get enableInfo() {\n        return Log.config.ENABLE_INFO;\n    }\n\n    static set enableInfo(enable) {\n        Log.config.ENABLE_INFO = enable;\n        LoggingControl._notifyChange();\n    }\n\n    static get enableWarn() {\n        return Log.config.ENABLE_WARN;\n    }\n\n    static set enableWarn(enable) {\n        Log.config.ENABLE_WARN = enable;\n        LoggingControl._notifyChange();\n    }\n\n    static get enableError() {\n        return Log.config.ENABLE_ERROR;\n    }\n\n    static set enableError(enable) {\n        Log.config.ENABLE_ERROR = enable;\n        LoggingControl._notifyChange();\n    }\n\n    static getConfig() {\n        return {\n            globalTag: Log.GLOBAL_TAG,\n            forceGlobalTag: Log.config.FORCE_GLOBAL_TAG,\n            enableDebug: Log.config.ENABLE_DEBUG,\n            enableInfo: Log.config.ENABLE_INFO,\n            enableWarn: Log.config.ENABLE_WARN,\n            enableError: Log.config.ENABLE_ERROR,\n            enableCallback: Log.config.ENABLE_CALLBACK\n        };\n    }\n\n    static applyConfig(config: UserConfig) {\n        Log.GLOBAL_TAG = config.GLOBAL_TAG || 'HJPLAYER';\n        Log.config.FORCE_GLOBAL_TAG = config.FORCE_GLOBAL_TAG;\n        Log.config.ENABLE_DEBUG = config.ENABLE_DEBUG;\n        Log.config.ENABLE_INFO = config.ENABLE_INFO;\n        Log.config.ENABLE_WARN = config.ENABLE_WARN;\n        Log.config.ENABLE_ERROR = config.ENABLE_ERROR;\n        Log.config.ENABLE_CALLBACK = config.ENABLE_CALLBACK;\n    }\n\n    static _notifyChange() {\n        const { emitter } = LoggingControl;\n\n        if(emitter.listenerCount('change') > 0) {\n            const config = LoggingControl.getConfig();\n            emitter.emit('change', config);\n        }\n    }\n\n    static registerListener(listener: EventEmitter.ListenerFn) {\n        LoggingControl.emitter.addListener('change', listener);\n    }\n\n    static removeListener(listener: EventEmitter.ListenerFn) {\n        LoggingControl.emitter.removeListener('change', listener);\n    }\n\n    static addLogListener(listener: EventEmitter.ListenerFn) {\n        Log.emitter.addListener(HJPlayerEvents.HJ_PLAYER_LOG, listener);\n        if(Log.emitter.listenerCount(HJPlayerEvents.HJ_PLAYER_LOG) > 0) {\n            Log.config.ENABLE_CALLBACK = true;\n            LoggingControl._notifyChange();\n        }\n    }\n\n    static removeLogListener(listener: EventEmitter.ListenerFn) {\n        Log.emitter.removeListener(HJPlayerEvents.HJ_PLAYER_LOG, listener);\n        if(Log.emitter.listenerCount(HJPlayerEvents.HJ_PLAYER_LOG) === 0) {\n            Log.config.ENABLE_CALLBACK = false;\n            LoggingControl._notifyChange();\n        }\n    }\n}\n\nLoggingControl.emitter = new EventEmitter();\n\nexport default LoggingControl;\n","/**\n * 带优化, 很多都用不到\n */\nconst createHLSDefaultConfig = function createHLSDefaultConfig() {\n    return {\n        forceKeyFrameOnDiscontinuity: true,\n        maxAudioFramesDrift: 1,\n        maxBufferHole: 0.5,\n        maxFragLookUpTolerance: 0.25,\n        stretchShortVideoTrack: false\n    };\n};\n\nexport default createHLSDefaultConfig;\n","import EventEmitter from 'eventemitter3';\nimport Browser from '../Utils/Browser';\nimport MediaInfo from './MediaInfo';\nimport Errors from '../Errors/index';\nimport IOController from './IOController';\nimport Events from '../Events/index';\nimport createHLSDefaultConfig from '../Utils/createHLSDefaultConfig';\nimport typeSupportData from '../Interfaces/typeSupportData';\nimport TempNavigatorType from '../Interfaces/TempNavigator';\nimport Logger from '../Utils/Logger';\nimport Metadata from '../Interfaces/Metadata';\nimport ErrorData from '../Interfaces/ErrorData';\nimport { MediaSegment, InitSegment } from '../Interfaces/Segment';\nimport MediaConfig from '../Interfaces/MediaConfig';\nimport FileSegment from '../Interfaces/FileSegment';\nimport TSCodec from '../Codecs/TSCodec'; // TS解码器和转码器\nimport FLVCodec from '../Codecs/FLVCodec'; // FLV的解码器和转码器\nimport HJPlayerConfig from '../Interfaces/HJPlayerConfig';\nimport { TSExtraData } from '../Interfaces/TSExtraData';\nimport getGlobal from '../Utils/getGlobalObject';\nimport TSManifest from '../Interfaces/TSManifest';\n\nconst GG = getGlobal();\n// Transmuxing (IO, Demuxing, Remuxing) controller, with multipart support\nclass TransmuxingController {\n    /**\n     * 文件标签\n     */\n    Tag: string\n\n    /**\n     * 事件中心\n     */\n    private _emitter: EventEmitter\n\n    /**\n     * 媒体设置\n     */\n    private _mediaDataSource: MediaConfig\n\n    /**\n     * 用户设置\n     */\n    private _config: HJPlayerConfig\n\n    /**\n     * MediaSource对MP4, MEPG, MP3格式是否支持\n     */\n    private typeSupported: typeSupportData\n\n    /**\n     * 上一级缓存的关于navigator的数据, 用于在worker中解码TS音视频的必要参数\n     */\n    private navigator: TempNavigatorType\n\n    /**\n     * 当前播放的媒体片段的索引值, 在MediaConfig中无segment选项是 0\n     */\n    private _currentSegmentIndex: number\n\n    /**\n     * 媒体信息\n     */\n    private _mediaInfo: MediaInfo | null | any\n\n    /**\n     * IO 控制器, 主要负责缓存loader发送过来的数据\n     */\n    private _ioctl: IOController | null\n\n    /**\n     * 未加载时 挂起的 seek 时间点\n     */\n    private _pendingSeekTime: number | null\n\n    /**\n     * 等待解决的seek时间点 (单位: 毫秒)\n     */\n    private _pendingResolveSeekPoint: number | null\n\n    /**\n     * 统计信息报告定时器\n     */\n    private _statisticsReportTimer: number | undefined | null\n\n    /**\n     * 新版解码器 待实现\n     */\n    private _mediaCodec: TSCodec | FLVCodec | null\n\n    /**\n     * 旧版解码器\n     */\n    private _demuxer: null\n\n    /**\n     * 旧版转码器\n     */\n    private _remuxer: null\n\n    constructor(\n        mediaDataSource: MediaConfig,\n        config: HJPlayerConfig,\n        typeSupported: typeSupportData,\n        navigator: TempNavigatorType\n    ) {\n        this.Tag = 'TransmuxingController';\n        this._emitter = new EventEmitter();\n        this._config = config;\n        this.typeSupported = typeSupported;\n        this.navigator = navigator;\n        this._mediaCodec = null;\n        // fill in default IO params if not exists\n        if(typeof mediaDataSource.cors !== 'boolean') {\n            mediaDataSource.cors = true;\n        }\n\n        if(typeof mediaDataSource.withCredentials !== 'boolean') {\n            mediaDataSource.withCredentials = false;\n        }\n\n        this._mediaDataSource = mediaDataSource;\n        let totalDuration = 0;\n        this._currentSegmentIndex = 0;\n        // treat single part media as multipart media, which has only one segment\n        if(!mediaDataSource.segments) {\n            this._mediaDataSource.segments = [\n                {\n                    duration: mediaDataSource.duration as any, // 可能是 undefined\n                    filesize: mediaDataSource.fileSize,\n                    url: mediaDataSource.url,\n                    type: mediaDataSource.type,\n                    live: config.isLive\n                }\n            ];\n        }\n\n        this._mediaDataSource.segments!.forEach((segment) => {\n            // timestampBase for each segment, and calculate total duration\n            segment.timestampBase = totalDuration;\n            totalDuration += <number>segment.duration;\n            // params needed by IOController\n            segment.cors = mediaDataSource.cors;\n            segment.withCredentials = mediaDataSource.withCredentials;\n            // referrer policy control, if exist\n            if(config.referrerPolicy) {\n                segment.referrerPolicy = config.referrerPolicy;\n            }\n        });\n\n        if(!Number.isNaN(totalDuration) && this._mediaDataSource.duration !== totalDuration) {\n            this._mediaDataSource.duration = totalDuration;\n        }\n\n        this._mediaInfo = null;\n\n        this._mediaCodec = null;\n\n        this._ioctl = null;\n\n        this._pendingSeekTime = null;\n\n        this._pendingResolveSeekPoint = null;\n\n        this._statisticsReportTimer = null;\n    }\n\n    destroy() {\n        this._mediaInfo = null;\n\n        delete (this as any)._mediaDataSource;\n\n        if(this._statisticsReportTimer) {\n            this._disableStatisticsReporter();\n        }\n\n        if(this._ioctl) {\n            this._ioctl.destroy();\n            this._ioctl = null;\n        }\n\n        // 摧毁解码器\n        if(this._mediaCodec) {\n            this._mediaCodec.destroy();\n            this._mediaCodec = null;\n        }\n\n        this._emitter.removeAllListeners();\n        delete (this as any)._emitter;\n    }\n\n    on(event: string, listener: EventEmitter.ListenerFn) {\n        this._emitter.on(event, listener);\n    }\n\n    off(event: string, listener: EventEmitter.ListenerFn) {\n        this._emitter.off(event, listener);\n    }\n\n    start() {\n        this._loadSegment(0);\n        this._enableStatisticsReporter();\n    }\n\n    /**\n     * 加载segment\n     * @param { Number } segmentIndex - segment 索引值\n     * @param {  Number } optionalFrom - 选择的开始地点\n     */\n    _loadSegment(segmentIndex: number, optionalFrom?: number) {\n        this._currentSegmentIndex = segmentIndex;\n        const dataSource = (this._mediaDataSource.segments as Array<FileSegment>)[segmentIndex];\n        this._ioctl = new IOController(dataSource, this._config, segmentIndex);\n        const ioctl = this._ioctl;\n        ioctl.onError = this._onIOException.bind(this);\n        ioctl.onSeeked = this._onIOSeeked.bind(this);\n        ioctl.onComplete = this._onIOComplete.bind(this);\n        ioctl.onRedirect = this._onIORedirect.bind(this);\n        ioctl.onRecoveredEarlyEof = this._onIORecoveredEarlyEof.bind(this);\n        ioctl.onManifestParsed = this._onManifestParsed.bind(this);\n\n        if(optionalFrom && this._mediaCodec) {\n            this._mediaCodec.bindDataSource(this._ioctl);\n        } else {\n            ioctl.onDataArrival = this._onInitChunkArrival.bind(this);\n        }\n\n        ioctl.open(optionalFrom);\n    }\n\n    stop() {\n        this._internalAbort();\n        this._disableStatisticsReporter();\n    }\n\n    _internalAbort() {\n        if(this._ioctl) {\n            this._ioctl.destroy();\n            this._ioctl = null;\n        }\n    }\n\n    pause() {\n        // take a rest\n        if(this._ioctl && this._ioctl.isWorking()) {\n            this._ioctl.pause();\n            this._disableStatisticsReporter();\n        }\n    }\n\n    resume() {\n        if(this._ioctl && this._ioctl.isPaused()) {\n            this._ioctl.resume();\n            this._enableStatisticsReporter();\n        }\n    }\n\n    seek(milliseconds: number) {\n        if(this._mediaDataSource.type === 'm3u8') {\n            // m3u8 处理seek部分 需要去fragment-loader里去处理\n            this._ioctl && this._ioctl.tsSeek(milliseconds);\n            this.resume();\n        } else {\n            // flv 处理 seek\n            if(this._mediaInfo == null || !this._mediaInfo.isSeekable()) {\n                return;\n            }\n\n            const targetSegmentIndex = this._searchSegmentIndexContains(milliseconds);\n            if(targetSegmentIndex === this._currentSegmentIndex) {\n                // intra-segment seeking\n                const segmentInfo = this._mediaInfo.segments\n                    ? this._mediaInfo.segments[targetSegmentIndex]\n                    : undefined;\n\n                if(!segmentInfo) {\n                    // current segment loading started, but mediainfo hasn't received yet\n                    // wait for the metadata loaded, then seek to expected position\n                    this._pendingSeekTime = milliseconds;\n                } else {\n                    const keyframe = segmentInfo.getNearestKeyframe(milliseconds);\n                    this._mediaCodec && this._mediaCodec.seek(keyframe.milliseconds);\n                    this._ioctl && this._ioctl.seek(keyframe.fileposition);\n                    // Will be resolved in _onRemuxerMediaSegmentArrival()\n                    this._pendingResolveSeekPoint = keyframe.milliseconds;\n                }\n            } else {\n                // cross-segment seeking\n                const targetSegmentInfo = this._mediaInfo.segments && this._mediaInfo.segments[targetSegmentIndex]\n                    ? this._mediaInfo.segments[targetSegmentIndex]\n                    : undefined;\n\n                if(targetSegmentInfo === undefined) {\n                    // target segment hasn't been loaded. We need metadata then seek to expected time\n                    this._pendingSeekTime = milliseconds;\n                    this._internalAbort();\n                    if(this._mediaCodec) {\n                        this._mediaCodec.seek();\n                        this._mediaCodec.insertDiscontinuity();\n                    }\n                    this._loadSegment(targetSegmentIndex);\n                    // Here we wait for the metadata loaded, then seek to expected position\n                } else {\n                    // We have target segment's metadata, direct seek to target position\n                    const keyframe = targetSegmentInfo.getNearestKeyframe(milliseconds);\n                    this._internalAbort();\n                    if(this._mediaCodec) {\n                        this._mediaCodec.seek();\n                        this._mediaCodec.insertDiscontinuity();\n                        this._mediaCodec.resetMediaInfo();\n                        this._mediaCodec.timestampBase = (this._mediaDataSource.segments as Array<\n                            FileSegment\n                        >)[targetSegmentIndex].timestampBase;\n                    }\n                    this._loadSegment(targetSegmentIndex, keyframe.fileposition);\n                    this._pendingResolveSeekPoint = keyframe.milliseconds;\n                    this._reportSegmentMediaInfo(targetSegmentIndex);\n                }\n            }\n        }\n\n        this._enableStatisticsReporter();\n    }\n\n    /**\n     * 根据要跳转的毫秒数和每个Segment的timestampBase的比较, 来查找相应的Segment索引值\n     * @param milliseconds 跳转的毫秒数\n     */\n    _searchSegmentIndexContains(milliseconds: number) {\n        const segments = this._mediaDataSource.segments as Array<FileSegment>;\n        let idx = segments.length - 1;\n\n        for(let i = 0; i < segments.length; i++) {\n            if(milliseconds < segments[i].timestampBase) {\n                idx = i - 1;\n                break;\n            }\n        }\n        return idx;\n    }\n\n    /**\n     * 当loader第一次发送过来数据时, 先判断解码器是否能解码数据, 然后初始化解码器, 绑定事件, 否则触发错误\n     * @param { ArrayBuffer } data  flv 是 array  m3u8的loader是Uint8Array\n     * @param { Number } byteStart 本次收到的数据的偏移量\n     * @param { Number } receivedLength 累计的bytelength\n     * @param { Object } extraData m3u8的fragmentLoader所发出来的数据 详见 fragment-loader\n     */\n    _onInitChunkArrival(\n        data: ArrayBuffer,\n        byteStart: number,\n        extraData: TSExtraData\n    ) {\n        /**\n         * probe功能探测数据返回的结果\n         */\n        let probeData = null;\n        /**\n         * 已被处理的数据的长度\n         */\n        let consumed = 0;\n        if(byteStart > 0) {\n            // IOController seeked immediately after opened, byteStart > 0 callback may received\n            if(this._mediaCodec) {\n                this._mediaCodec.bindDataSource(this._ioctl);\n                this._mediaCodec.timestampBase = (this._mediaDataSource.segments as Array<\n                    FileSegment\n                >)[this._currentSegmentIndex].timestampBase;\n                consumed = this._mediaCodec.parseChunks(data, byteStart, extraData);\n                return consumed;\n            }\n        }\n\n        probeData = FLVCodec.probe(data);\n\n        if(probeData.match) {\n            // Always create new FLVDemuxer\n            this._mediaCodec = new FLVCodec(data, this._config);\n\n            const mds = this._mediaDataSource;\n            if(mds.duration !== undefined && !Number.isNaN(mds.duration)) {\n                this._mediaCodec.overridedDuration = mds.duration;\n            }\n\n            if(typeof mds.hasAudio === 'boolean') {\n                this._mediaCodec.overridedHasAudio = mds.hasAudio;\n            }\n\n            if(typeof mds.hasVideo === 'boolean') {\n                this._mediaCodec.overridedHasVideo = mds.hasVideo;\n            }\n\n            this._mediaCodec.timestampBase = (mds.segments as Array<FileSegment>)[\n                this._currentSegmentIndex\n            ].timestampBase;\n\n            this._mediaCodecBindEvents();\n            // this._remuxer.bindDataSource(this._demuxer.bindDataSource(this._ioctl));\n            this._mediaCodec.bindDataSource(this._ioctl);\n\n            consumed = this._mediaCodec.parseChunks(data, byteStart);\n            return consumed;\n        }\n\n        const tsProbeResult = TSCodec.probe(data);\n        if(tsProbeResult) {\n            this._mediaCodec = new TSCodec(\n                createHLSDefaultConfig(),\n                this.typeSupported,\n                this.navigator\n            );\n\n            this._mediaCodecBindEvents();\n\n            this._mediaCodec.resetInitSegment(\n                new Uint8Array(extraData.initSegmentData),\n                extraData.audioCodec,\n                extraData.videoCodec,\n                extraData.totalduration\n            );\n            this._mediaCodec.resetTimeStamp(undefined); // ts的_demuxer.resetTimeStamp 是没有任何作用的\n            this._mediaCodec.bindDataSource(this._ioctl);\n            this._mediaCodec.parseChunks(new Uint8Array(data), byteStart, extraData);\n            consumed = data.byteLength; // 每个TS文件都为188个字节的整数倍, 所以处理过的数据应为全部数据, 没有余量\n            return consumed;\n        }\n\n        probeData = null;\n\n        Logger.error(this.Tag, `Unsupported media type, this ${this._mediaDataSource.type} stream is not standard format`);\n\n        Promise.resolve().then(() => {\n            this._internalAbort();\n        });\n\n        this._emitter.emit(\n            Events.DEMUX_ERROR,\n            Errors.FORMAT_UNSUPPORTED,\n            `Unsupported media type, this ${this._mediaDataSource.type} stream is not standard format!`\n        );\n        consumed = 0;\n        return consumed;\n    }\n\n    _onMediaInfo(mediaInfo: MediaInfo) {\n        if(this._mediaInfo === null) {\n            // Store first segment's mediainfo as global mediaInfo\n            this._mediaInfo = { ...mediaInfo };\n            this._mediaInfo.keyframesIndex = null;\n            this._mediaInfo.segments = [];\n            this._mediaInfo.segmentCount = (this._mediaDataSource.segments as Array<\n                FileSegment\n            >).length;\n            Object.setPrototypeOf(this._mediaInfo, MediaInfo.prototype);\n        }\n\n        const segmentInfo = { ...mediaInfo };\n\n        Object.setPrototypeOf(segmentInfo, MediaInfo.prototype);\n\n        (this._mediaInfo.segments as any)[this._currentSegmentIndex] = segmentInfo;\n\n        // notify mediaInfo update\n        this._reportSegmentMediaInfo(this._currentSegmentIndex);\n\n        if(this._pendingSeekTime != null) {\n            Promise.resolve().then(() => {\n                const target = Number(this._pendingSeekTime);\n                this._pendingSeekTime = null;\n                this.seek(target);\n            });\n        }\n    }\n\n    _onMetaDataArrived(metadata: Metadata) {\n        this._emitter.emit(Events.METADATA_ARRIVED, metadata);\n    }\n\n    _onScriptDataArrived(data: any) {\n        this._emitter.emit(Events.SCRIPTDATA_ARRIVED, data);\n    }\n\n    _onIOSeeked() {\n        this._mediaCodec && this._mediaCodec.insertDiscontinuity();\n    }\n\n    _onIOComplete(extraData: number) {\n        const segmentIndex = extraData;\n        const nextSegmentIndex = segmentIndex + 1;\n        if(this._mediaCodec) {\n            if(nextSegmentIndex < (this._mediaDataSource.segments as Array<FileSegment>).length) {\n                this._internalAbort();\n                this._mediaCodec.flushStashedSamples && this._mediaCodec.flushStashedSamples();\n                this._loadSegment(nextSegmentIndex);\n            } else {\n                this._mediaCodec.flushStashedSamples && this._mediaCodec.flushStashedSamples();\n                this._emitter.emit(Events.LOAD_COMPLETE);\n                this._disableStatisticsReporter();\n            }\n        }\n    }\n\n    _onIORedirect(redirectedURL: string) {\n        const segmentIndex: number = <number>(this._ioctl as IOController).extraData;\n        (this._mediaDataSource.segments as Array<FileSegment>)[\n            segmentIndex\n        ].redirectedURL = redirectedURL;\n    }\n\n    _onIORecoveredEarlyEof() {\n        this._emitter.emit(Events.RECOVERED_EARLY_EOF);\n    }\n\n    _onIOException(type: string, info: ErrorData) {\n        Logger.error(\n            this.Tag,\n            `IOException: type = ${type}, code = ${info.code}, msg = ${info.reason}`\n        );\n        this._emitter.emit(Events.IO_ERROR, type, info);\n        this._disableStatisticsReporter();\n    }\n\n    _onDemuxException(type: string, info: ErrorData) {\n        Logger.error(this.Tag, `DemuxException: type = ${type}, info = ${info.reason}`);\n        this._emitter.emit(Events.DEMUX_ERROR, type, info);\n    }\n\n    _onRemuxerInitSegmentArrival(type: string, initSegment: InitSegment) {\n        this._emitter.emit(Events.INIT_SEGMENT, type, initSegment);\n    }\n\n    _onRemuxerMediaSegmentArrival(type: string, mediaSegment: MediaSegment) {\n        if(this._pendingSeekTime != null) {\n            // Media segments after new-segment cross-seeking should be dropped.\n            return;\n        }\n        this._emitter.emit(Events.MEDIA_SEGMENT, type, mediaSegment);\n\n        // Resolve pending seekPoint\n        if(this._pendingResolveSeekPoint != null && type === 'video') {\n            const { syncPoints } = mediaSegment.info;\n            let seekpoint = this._pendingResolveSeekPoint;\n            this._pendingResolveSeekPoint = null;\n\n            // Safari: Pass PTS for recommend_seekpoint\n            if(\n                Browser.safari\n                && syncPoints.length > 0\n                && syncPoints[0].originalDts === seekpoint\n            ) {\n                seekpoint = syncPoints[0].pts;\n            }\n            // else: use original DTS (keyframe.milliseconds)\n\n            this._emitter.emit(Events.RECOMMEND_SEEKPOINT, seekpoint);\n        }\n    }\n\n    _enableStatisticsReporter() {\n        if(this._statisticsReportTimer == null) {\n            this._statisticsReportTimer = GG.setInterval(\n                this._reportStatisticsInfo.bind(this),\n                this._config.statisticsInfoReportInterval\n            );\n        }\n    }\n\n    _disableStatisticsReporter() {\n        if(this._statisticsReportTimer) {\n            GG.clearInterval(this._statisticsReportTimer);\n            this._statisticsReportTimer = null;\n        }\n    }\n\n    _reportSegmentMediaInfo(segmentIndex: number) {\n        const segmentInfo = ((this._mediaInfo as MediaInfo).segments as Array<FileSegment>)[\n            segmentIndex\n        ];\n        const exportInfo = { ...segmentInfo };\n\n        exportInfo.duration = <number>(this._mediaInfo as MediaInfo).duration;\n        exportInfo.segmentCount = (this._mediaInfo as MediaInfo).segmentCount;\n        delete exportInfo.segments;\n        delete exportInfo.keyframesIndex;\n\n        this._emitter.emit(Events.MEDIA_INFO, exportInfo);\n    }\n\n    _reportStatisticsInfo() {\n        const info = Object.create(null);\n\n        if(this._ioctl) {\n            info.url = this._ioctl.currentURL;\n            info.hasRedirect = this._ioctl.hasRedirect;\n            if(info.hasRedirect) {\n                info.redirectedURL = this._ioctl.currentRedirectedURL;\n            }\n            info.speed = this._ioctl.currentSpeed;\n            info.loaderType = this._ioctl.loaderType;\n        }\n        info.currentSegmentIndex = this._currentSegmentIndex;\n        info.totalSegmentCount = (this._mediaDataSource.segments as Array<FileSegment>).length;\n\n        this._emitter.emit(Events.STATISTICS_INFO, info);\n    }\n\n    _onManifestParsed(data: TSManifest) {\n        this._emitter.emit(Events.MANIFEST_PARSED, data);\n    }\n\n    _mediaCodecBindEvents() {\n        if(!this._mediaCodec) {\n            return;\n        }\n\n        this._mediaCodec.on(Events.ERROR, (info: ErrorData) => {\n            this._onDemuxException(Errors.TRANSMUXING_ERROR, info);\n        });\n\n        this._mediaCodec.on(Events.MEDIA_INFO, (mediaInfo: MediaInfo) => {\n            this._onMediaInfo(mediaInfo);\n        });\n\n        this._mediaCodec.on(Events.METADATA_ARRIVED, (metadata: Metadata) => {\n            this._onMetaDataArrived(metadata);\n        });\n\n        this._mediaCodec.on(Events.SCRIPTDATA_ARRIVED, (scriptdata: any) => {\n            this._onScriptDataArrived(scriptdata);\n        });\n\n        // FLV-demuxer 向上发送SEI信息\n        this._mediaCodec.on(Events.GET_SEI_INFO, (data: Uint8Array) => {\n            this._emitter.emit(Events.GET_SEI_INFO, data);\n        });\n\n        this._mediaCodec.on(Events.INIT_SEGMENT, (type: string, InitSegment: InitSegment) => {\n            this._onRemuxerInitSegmentArrival(type, InitSegment);\n        });\n\n        this._mediaCodec.on(Events.MEDIA_SEGMENT, (type: string, MediaSegment: MediaSegment) => {\n            this._onRemuxerMediaSegmentArrival(type, MediaSegment);\n        });\n\n        // 上一个fragment解析完毕, 通知loader加载下一个fragment\n        this._mediaCodec.on(Events.LOAD_NEXT_FRAG, () => {\n            if(this._ioctl && this._ioctl.isWorking()) {\n                this._ioctl.loadNextFrag();\n            }\n        });\n    }\n}\n\nexport default TransmuxingController;\n","import EventEmitter from 'eventemitter3';\nimport BaseLoader from './BaseLoader';\nimport XHRLoader from './XHRLoader';\nimport logger from '../Utils/Logger';\nimport ParamSeekHandler from './ParamSeekHandler';\nimport PlayListLoader from './PlaylistLoader';\nimport LoaderEvent from './LoaderEvent';\nimport support from '../Utils/support-helper';\nimport MediaConfig from '../Interfaces/MediaConfig';\nimport LoaderStatus from './LoaderStatus';\nimport LoaderErrors from './LoaderErrors';\nimport { RuntimeException } from '../Utils/Exception';\nimport {\n    FragLoaderContext,\n    LoaderConfiguration,\n    LoaderCallbacks,\n    SingleLevels,\n    LoaderStats,\n    ResponseData,\n    LoaderResponse,\n    ErrorData,\n    timeoutData\n} from '../Interfaces/Loader';\nimport Fragment from './Fragment';\nimport getGlobalObject from '../Utils/getGlobalObject';\nimport HJPlayerConfig from '../Interfaces/HJPlayerConfig';\n\nconst global = getGlobalObject();\n\nclass FragmentLoader extends BaseLoader {\n    eventEmitter: EventEmitter = new EventEmitter()\n\n    Tag: string = 'FragmentLoader'\n\n    _seekHandler: ParamSeekHandler\n\n    // todo 确认类型\n    _config: HJPlayerConfig\n\n    _needStash: boolean\n\n    _requestAbort: boolean\n\n    _contentLength: number | null\n\n    _receivedLength: number\n\n    // 收到数据的长度\n    _parser: any\n\n    // todo 确定类型\n    _dataSource: any\n\n    // todo 貌似没有用到\n    _range: any\n\n    // todo 确定用处\n    pl: PlayListLoader | null\n\n    audioCodecSwitch: boolean = false\n\n    levels: SingleLevels[] | null = null\n\n    startFragRequested: boolean = false\n\n    bitrateTest: boolean = false\n\n    // 默认不测试, 当返回的levels的长度大于1时, 进行码率测试后, 测试完后值为false\n    stats: LoaderStats | null = null\n\n    stashFrag: Fragment[] = []\n\n    // playlist-loader 获取到的fragments数组, 每次取最新的\n    sn: number | 'initSegment' = -1\n\n    // 加载的上一个fragment的sn, 用于查找下一个fragment, sn的序号是连续的\n    loading: boolean = false\n\n    masterLevels: SingleLevels[] = []\n\n    // 从master.m3u8文件中获取到的levels; length > 1\n    currentFrag: Fragment | null = null\n\n    loader: XHRLoader | null = null\n\n    _pause: boolean = false\n\n    audioCodecSwap: boolean = false\n\n    constructor(seekHandler: ParamSeekHandler, mediaConfig: HJPlayerConfig) {\n        super('fragment-loader', 'm3u8');\n        this._seekHandler = seekHandler;\n        this._config = mediaConfig;\n        this._needStash = true;\n        this._requestAbort = false;\n        this._contentLength = null;\n        this._receivedLength = 0;\n        this._parser = null;\n        this.pl = null;\n        this._dataSource = null; // todo 有没有用到\n        this._range = null; // todo 确定用处\n    }\n\n    /**\n     * 判断在当前浏览器环境下是否支持加载相应媒体类型的文件\n     * @param mediaType 媒体类型 flv或者m3u8 // todo\n     */\n    static isSupport(): boolean {\n        return support();\n    }\n\n    on(eventName: string, callback: EventEmitter.ListenerFn): void {\n        this.eventEmitter.on(eventName, callback);\n    }\n\n    once(eventName: string, callback: EventEmitter.ListenerFn): void {\n        this.eventEmitter.once(eventName, callback);\n    }\n\n    off(eventName: string, callback?: EventEmitter.ListenerFn): void {\n        this.eventEmitter.off(eventName, callback);\n    }\n\n    get onComplete() {\n        return this._onComplete;\n    }\n\n    set onComplete(callback) {\n        this._onComplete = callback;\n    }\n\n    destroy() {\n        this.abort();\n        this.pl && this.pl.abort();\n        this.pl = null;\n        this.currentFrag = null;\n        this.loader = null;\n        this.bitrateTest = false;\n        this.eventEmitter.removeAllListeners();\n        delete (this as any).masterLevels;\n        delete (this as any).eventEmitter;\n        delete (this as any).stashFrag;\n        delete (this as any).levels;\n        delete (this as any).stats;\n    }\n\n    /**\n     * 取消清秀\n     */\n    abort(): void {\n        this._pause = true;\n        this._requestAbort = true;\n        this.loading = false;\n        this._status = LoaderStatus.kComplete;\n        this.loader && this.loader.abort();\n    }\n\n    /**\n     * loader 暂停\n     */\n    pause(): void {\n        this._pause = true;\n        this.loading = false;\n    }\n\n    /**\n     * 恢复\n     */\n    resume(): void {\n        logger.debug(this.Tag, '恢复下载');\n        this._pause = false;\n        this._requestAbort = false;\n        this.loading = false;\n        // 下载前一个ts文件, 让bufferd接上\n        // if(typeof this.sn === 'number') {\n        //     this.sn = Math.max(this.sn - 1, 0);\n        // }\n        // this.loadNextFrag();\n    }\n\n    isWorking(): boolean {\n        return this._pause === false;\n    }\n\n    /**\n     * 开始下载M3U8文件\n     * @param { Object } dataSource\n     * @param { Number } range\n     */\n    open(dataSource: MediaConfig, range: any) {\n        // _range _dataSource 用处\n        this._dataSource = dataSource;\n        this._range = range;\n\n        this.pl = new PlayListLoader(dataSource);\n        this.pl.on(LoaderEvent.MANIFEST_PARSED, this.onManifestParsed.bind(this));\n        this.pl.on(LoaderEvent.LOAD_COMPLETE, this._loadingM3U8Complete.bind(this));\n        this.pl.on(LoaderEvent.LOADING_ERROR, this._loadingM3U8Error.bind(this));\n        this.pl.on(LoaderEvent.PARSE_ERROR, this._parseM3U8Error.bind(this));\n        this.pl.on(LoaderEvent.LOADIND_TIMEOUT, this._loadingM3U8Timeout.bind(this));\n        this.pl.load();\n    }\n\n    startLoad(dataSource: MediaConfig, range: any) {\n        this.open(dataSource, range);\n    }\n\n    /**\n     * Fragment-loader 去加载下一个片段;\n     */\n    loadNextFrag(): void {\n        if(this._requestAbort) {\n            // 取消请求\n            return;\n        }\n\n        if(this._pause) {\n            // 如果被暂停了也不下载了\n            return;\n        }\n\n        if(!this.levels) {\n            return;\n        }\n\n        // 非直播流且已经下载最后一个fragment时不再下载\n        if(this.levels[0].details.live === false && this.sn === this.levels[0].details.endSN) {\n            this.pl && this.pl.stop && this.pl.stop(); // 取消Playlist-loader\n            this.onComplete && this.onComplete(); // 加载完毕事件\n            return;\n        }\n\n        let frag: Fragment = this.stashFrag[0];\n\n        if(this.sn === 'initSegment') {\n            // 第一个TS文件时initSegment\n            frag = this.stashFrag[1];\n            if(!frag) return;\n            this.loadFrag(frag);\n        } else {\n            for(let i = 0; i < this.stashFrag.length; i++) {\n                if(this.stashFrag[i].sn === this.sn + 1) {\n                    frag = this.stashFrag[i];\n                    break;\n                }\n            }\n            if(!frag) return;\n            if(this.sn < frag.sn) {\n                this.loadFrag(frag);\n            }\n        }\n    }\n\n    loadFrag(frag: Fragment): void {\n        if(this.loading) return;\n        this.loading = true;\n        this._status = LoaderStatus.kConnecting;\n        this.currentFrag = frag;\n        this.sn = frag.sn;\n        const loaderContext: FragLoaderContext = {\n            url: <string>frag.url,\n            frag,\n            responseType: 'arraybuffer',\n            progressData: false\n        };\n\n        if(this.bitrateTest) {\n            // 当处于码率测试时给frag的url加随机参数, 防止缓存, 让码率测试不准\n            if(frag.url!.indexOf('?') > -1) {\n                frag.url += `&r=${Math.random()}`;\n            } else {\n                frag.url += `?r=${Math.random()}`;\n            }\n        }\n\n        const start = frag.byteRangeStartOffset;\n        const end = frag.byteRangeEndOffset;\n\n        if(Number.isFinite(start) && Number.isFinite(end)) {\n            loaderContext.rangeStart = start;\n            loaderContext.rangeEnd = end;\n        }\n\n        const loaderConfig: LoaderConfiguration = {\n            timeout: 10000,\n            maxRetry: 1,\n            retryDelay: 200,\n            maxRetryDelay: 200\n        };\n\n        const loaderCallbacks: LoaderCallbacks<FragLoaderContext> = {\n            onSuccess: this._loadsuccess.bind(this),\n            onError: this._loaderror.bind(this),\n            onTimeout: this._loadtimeout.bind(this),\n            onProgress: this._loadprogress.bind(this)\n        };\n\n        this.loader = null;\n\n        this.loader = new XHRLoader();\n\n        this.loader.load(loaderContext, loaderConfig, loaderCallbacks);\n    }\n\n    seek(milliseconds: number): void {\n        const frag = this.currentFrag;\n        const tolerance = this._config.maxFragLookUpTolerance;\n\n        if(!this.currentFrag || !frag || !this.loader || !this.levels) {\n            return;\n        }\n\n        const DoseTheFragIsDownLoading = this.status === LoaderStatus.kConnecting\n        && milliseconds >= (frag.start + tolerance) * 1000\n        && milliseconds <= (frag.start + frag.duration - tolerance) * 1000;\n\n        if(!DoseTheFragIsDownLoading) {\n            this.loader.abort();\n            let fragmentIndex = 0;\n            const fragments = this.stashFrag || [];\n            for(let i = 0; i < fragments.length; i++) {\n                if(\n                    milliseconds >= fragments[i].start * 1000\n                    && milliseconds <= (fragments[i].start + fragments[i].duration) * 1000\n                ) {\n                    fragmentIndex = i;\n                    break;\n                }\n            }\n            fragmentIndex = Math.max(fragmentIndex - 1, 0);\n            this.currentFrag = fragments[fragmentIndex];\n            this.sn = fragments[fragmentIndex].sn;\n            this.loadFrag(fragments[fragmentIndex]);\n        }\n    }\n\n    onManifestParsed(data: any): void {\n        // todo 确定data的类型\n        let aac = false;\n        let heaac = false;\n        let codec;\n\n        if(!this.pl) {\n            return;\n        }\n        data.levels.forEach((level: { audioCodec: string }) => {\n            // detect if we have different kind of audio codecs used amongst playlists\n            codec = level.audioCodec;\n            if(codec) {\n                if(codec.indexOf('mp4a.40.2') !== -1) {\n                    aac = true;\n                }\n\n                if(codec.indexOf('mp4a.40.5') !== -1) {\n                    heaac = true;\n                }\n            }\n        });\n        this.audioCodecSwitch = aac && heaac;\n        if(this.audioCodecSwitch) {\n            logger.log(\n                this.Tag,\n                'both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC'\n            );\n        }\n\n        // 多码率播放, 在config中设置tsAutoLevelChoose为true时, 需先用低码率的playlist下载TS, 测试网速, 再去采用适合网速的playlist\n        // 单码率直接使用levels[0];\n        if(data.type === 'masterPlaylist' && data.levels.length > 0) {\n            if(this._config.tsAutoLevelChoose) {\n                this.bitrateTest = true;\n            }\n            const tempSource = this._dataSource;\n            tempSource.url = data.levels[0].url;\n            this.masterLevels = data.levels;\n            this.pl.dataSource = tempSource;\n            this.pl.url = data.levels[0].url;\n            this.pl.load();\n        } else if(data.type === 'levelPlaylist') {\n            // 单码率播放列表, 可直接下载ts文件\n            this.levels = data.levels;\n            this.stashFrag = data.levels[0].details.fragments;\n            this.startFragRequested = false;\n            this.loadNextFrag();\n            this.eventEmitter.emit(LoaderEvent.MANIFEST_PARSED, data.levels[0]);\n        } else {\n            const err = { code: -1, reason: 'can not find useful playlist' };\n            if(this._onError) {\n                this._onError(LoaderEvent.LOADING_ERROR, err);\n            } else {\n                throw new RuntimeException(err.reason);\n            }\n        }\n    }\n\n    // payload, frag, stats, networkDetails\n    onFragLoaded(data: {payload: string | ArrayBuffer, frag: Fragment, stats: LoaderStats, networkDetails: any}): void {\n        const payload:ArrayBuffer = <ArrayBuffer>data.payload;\n        const { frag } = data;\n        const defaultLevel = 0; // 默认为0\n        if(!this.levels || !this.pl) {\n            return;\n        }\n        if(frag.type === 'main') {\n            const { stats } = data;\n            const currentLevel = this.levels[defaultLevel];\n            const { details } = currentLevel;\n            this.stats = stats;\n            if(this.bitrateTest) {\n                this.startFragRequested = false;\n                stats.tbuffered = global.performance.now();\n                stats.tparsed = global.performance.now();\n                // window.hls.trigger(Event.FRAG_BUFFERED, { stats: stats, frag: fragCurrent, id: 'main' });\n                const tsCodeRate = this._caluCodeRate(payload.byteLength, stats);\n                const levelIndex = this._findSuitableLevels(tsCodeRate);\n                this.pl.url = this.masterLevels[levelIndex].url;\n                this.pl.load();\n                this.bitrateTest = false;\n            } else if(frag.sn === 'initSegment') {\n                stats.tbuffered = global.performance.now();\n                stats.tparsed = global.performance.now();\n                details.initSegment.data = data.payload;\n                this.loadNextFrag();\n            } else {\n                // Bitrate test frags are not usually buffered so the fragment tracker ignores them. If Hls.js decides to buffer\n                // it (and therefore ends up at this line), then the fragment tracker needs to be manually informed.\n                if((frag as any).bitrateTest) {\n                    (frag as any).bitrateTest = false;\n                }\n                // time Offset is accurate if level PTS is known, or if playlist is not sliding (not live) and if media is not seeking (this is to overcome potential timestamp drifts between playlists and fragments)\n                const accurateTimeOffset = false;\n                const initSegmentData = details.initSegment ? details.initSegment.data : [];\n                const audioCodec = this._getAudioCodec(currentLevel);\n\n                // transmux the MPEG-TS data to ISO-BMFF segments\n                // const demuxer = this.demuxer = this.demuxer || new Demuxer(this.hls, 'main');\n                const { videoCodec } = currentLevel;\n                const { totalduration } = details;\n                const byteStart = this._receivedLength;\n                this._receivedLength += payload.byteLength;\n                // 下载完之后向上发送\n                if(this._onDataArrival) {\n                    this._onDataArrival(payload, byteStart, this._receivedLength, {\n                        initSegmentData,\n                        audioCodec,\n                        videoCodec,\n                        fragCurrent: frag,\n                        totalduration,\n                        accurateTimeOffset\n                    });\n                }\n                if(this._requestAbort && this._pause) {\n                    this.sn = <number>(this.sn) - 1;\n                    this.currentFrag = this.stashFrag[this.sn];\n                }\n            }\n        }\n        // this.fragLoadError = 0; 没有用到\n    }\n\n    _getAudioCodec(currentLevel: any): string {\n        // todo 确定类型\n        let audioCodec = this._config.defaultAudioCodec || currentLevel.audioCodec;\n        if(this.audioCodecSwap) {\n            logger.log(this.Tag, 'swapping playlist audio codec');\n            if(audioCodec) {\n                if(audioCodec.indexOf('mp4a.40.5') !== -1) {\n                    audioCodec = 'mp4a.40.2';\n                } else {\n                    audioCodec = 'mp4a.40.5';\n                }\n            }\n        }\n        return audioCodec;\n    }\n\n    _loadsuccess(\n        response: LoaderResponse,\n        stats: LoaderStats,\n        context: FragLoaderContext,\n        networkDetails: any = null\n    ) {\n        this.loading = false;\n        const payload: string | ArrayBuffer = response.data;\n        const { frag } = context;\n        this._status = LoaderStatus.kComplete;\n        if(frag) {\n            this.onFragLoaded({\n                payload, frag, stats, networkDetails\n            });\n        }\n    }\n\n    _loaderror(response: ErrorData, context: FragLoaderContext, networkDetails: any = null) {\n        this.loading = false;\n        this._status = LoaderStatus.kError;\n\n        const err = { code: response.code, reason: response.text };\n        if(this._onError) {\n            this._onError(LoaderErrors.HTTP_STATUS_CODE_INVALID, err);\n        } else {\n            throw new RuntimeException(err.reason);\n        }\n    }\n\n    _loadtimeout(stats: LoaderStats, context: FragLoaderContext, networkDetails: any = null) {\n        this.loading = false;\n        this._status = LoaderStatus.kError;\n        const err = { code: -1, reason: 'fragment request is timeout' };\n        if(this._onError) {\n            this._onError(LoaderErrors.CONNECTING_TIMEOUT, err);\n        } else {\n            throw new RuntimeException(err.reason);\n        }\n    }\n\n    // data will be used for progressive parsing\n    _loadprogress(stats: LoaderStats, context: FragLoaderContext, networkDetails: any = null) {\n        // jshint ignore:line\n        const { frag } = context;\n        // this.hls.trigger(Event.FRAG_LOAD_PROGRESS, { frag: frag, stats: stats, networkDetails: networkDetails });\n    }\n\n    _loadingM3U8Complete() {}\n\n    _loadingM3U8Error(errData: ResponseData): void {\n        this.loading = false;\n        this._status = LoaderStatus.kError;\n        const err = { code: errData.response.code, reason: errData.response.text };\n        if(this._onError) {\n            this._onError(LoaderErrors.HTTP_STATUS_CODE_INVALID, err);\n        } else {\n            throw new RuntimeException(err.reason);\n        }\n    }\n\n    _loadingM3U8Timeout(errData: timeoutData): void {\n        this.loading = false;\n        this._status = LoaderStatus.kError;\n        const err = { code: -1, reason: errData.stats.text };\n        if(this._onError) {\n            this._onError(LoaderErrors.CONNECTING_TIMEOUT, err);\n        } else {\n            throw new RuntimeException(<string>err.reason);\n        }\n    }\n\n    /**\n     * 计算当前网速的码率\n     * @param { Number } loadedLength - 已经加载的ts文件的byte长度\n     * @param { Object } stats - 请求状态\n     * @returns { Number } mySupportCodeRate - 当前网速所满足的最大码率 bit/s\n     */\n    _caluCodeRate(loadedLength: number, stats: LoaderStats) {\n        const loadedBit = loadedLength * 8;\n        const takeTime = ((stats.tparsed as number) - stats.trequest) / 1000;\n        let mySupportCodeRate = loadedBit / takeTime;\n        mySupportCodeRate *= 0.8; // 20%的预留, 带宽不一定是 100%的\n        return mySupportCodeRate;\n    }\n\n    _parseM3U8Error(errData: LoaderResponse): void {\n        this.loading = false;\n        this._status = LoaderStatus.kError;\n        const err = { code: -1, reason: 'parse playlist error', url: errData.url };\n        if(this._onError) {\n            this._onError(LoaderErrors.PARSE_PLAYLISTING_ERROR, err);\n        } else {\n            throw new RuntimeException(err.reason);\n        }\n    }\n\n    /**\n     * 在masterLevels中查找适合当前网速相应码率的level Index\n     * @param { Number } codeRate -当前网速所能支持的码率\n     * @returns { Number }\n     */\n    _findSuitableLevels(codeRate: number) {\n        const arr = this.masterLevels;\n        let index = 0;\n        for(let i = arr.length - 1; i > 0; i--) {\n            if(arr[i].bitrate < codeRate) {\n                index = i;\n                break;\n            }\n        }\n        return index;\n    }\n}\n\nexport default FragmentLoader;\n","/**\n * 解析Uint8Array, 生成相应字符串\n * @param uint8array\n * @param start\n * @param checkLength\n */\n\nfunction checkContinuation(uint8array: Uint8Array, start: number, checkLength: number) {\n    const array = uint8array;\n    if(start + checkLength < array.length) {\n        while(checkLength--) {\n            if((array[++start] & 0xc0) !== 0x80) return false;\n        }\n        return true;\n    }\n    return false;\n}\n\nfunction decodeUTF8(uint8array: Uint8Array) {\n    const out = [];\n    const input = uint8array;\n    let i = 0;\n    const { length } = uint8array;\n\n    while(i < length) {\n        if(input[i] < 0x80) {\n            out.push(String.fromCharCode(input[i]));\n            ++i;\n            continue;\n        } else if(input[i] < 0xc0) {\n            // fallthrough\n        } else if(input[i] < 0xe0) {\n            if(checkContinuation(input, i, 1)) {\n                const ucs4 = ((input[i] & 0x1f) << 6) | (input[i + 1] & 0x3f);\n                if(ucs4 >= 0x80) {\n                    out.push(String.fromCharCode(ucs4 & 0xffff));\n                    i += 2;\n                    continue;\n                }\n            }\n        } else if(input[i] < 0xf0) {\n            if(checkContinuation(input, i, 2)) {\n                const ucs4 = ((input[i] & 0xf) << 12) | ((input[i + 1] & 0x3f) << 6) | (input[i + 2] & 0x3f);\n                if(ucs4 >= 0x800 && (ucs4 & 0xf800) !== 0xd800) {\n                    out.push(String.fromCharCode(ucs4 & 0xffff));\n                    i += 3;\n                    continue;\n                }\n            }\n        } else if(input[i] < 0xf8) {\n            if(checkContinuation(input, i, 3)) {\n                let ucs4 = ((input[i] & 0x7) << 18)\n                    | ((input[i + 1] & 0x3f) << 12)\n                    | ((input[i + 2] & 0x3f) << 6)\n                    | (input[i + 3] & 0x3f);\n                if(ucs4 > 0x10000 && ucs4 < 0x110000) {\n                    ucs4 -= 0x10000;\n                    out.push(String.fromCharCode((ucs4 >>> 10) | 0xd800));\n                    out.push(String.fromCharCode((ucs4 & 0x3ff) | 0xdc00));\n                    i += 4;\n                    continue;\n                }\n            }\n        }\n        out.push(String.fromCharCode(0xfffd));\n        ++i;\n    }\n\n    return out.join('');\n}\n\nexport default decodeUTF8;\n","import decodeUTF8 from '../../../Utils/utf8-conv';\nimport { ScriptData } from '../Interface';\n\nconst le = (function littleEdian() {\n    const buf = new ArrayBuffer(2);\n    new DataView(buf).setInt16(0, 256, true); // little-endian write\n    return new Int16Array(buf)[0] === 256; // platform-spec read, if equal then LE\n}());\n\nclass AMF {\n    static parseScriptData(arrayBuffer: ArrayBuffer, dataOffset: number, dataSize: number) {\n        const info: ScriptData = Object.create(null);\n\n        try {\n            const name: ScriptData = AMF.parseValue(arrayBuffer, dataOffset, dataSize);\n            const size: number = name.size || 0;\n            const data: string = name.data || '';\n            const value: ScriptData = AMF.parseValue(\n                arrayBuffer,\n                dataOffset + size,\n                dataSize - size\n            );\n\n            info[data] = value.data;\n        } catch (e) {\n            // Log.e('AMF', e.toString());\n        }\n\n        return info;\n    }\n\n    static parseObject(arrayBuffer: ArrayBuffer, dataOffset: number, dataSize: number) {\n        if(dataSize < 3) {\n            throw new Error('Data not enough when parse ScriptDataObject');\n        }\n        const name = AMF.parseString(arrayBuffer, dataOffset, dataSize);\n        const value = AMF.parseValue(arrayBuffer, dataOffset + name.size, dataSize - name.size);\n        const size: number = value.size || 0;\n        const isObjectEnd = value.objectEnd;\n\n        return {\n            data: {\n                name: name.data,\n                value: value.data\n            },\n            size: name.size + size,\n            objectEnd: isObjectEnd\n        };\n    }\n\n    static parseVariable(arrayBuffer: ArrayBuffer, dataOffset: number, dataSize: number) {\n        return AMF.parseObject(arrayBuffer, dataOffset, dataSize);\n    }\n\n    static parseString(arrayBuffer: ArrayBuffer, dataOffset: number, dataSize: number) {\n        if(dataSize < 2) {\n            throw new Error('Data not enough when parse String');\n        }\n        const v = new DataView(arrayBuffer, dataOffset, dataSize);\n        const length = v.getUint16(0, !le);\n\n        let str;\n        if(length > 0) {\n            str = decodeUTF8(new Uint8Array(arrayBuffer, dataOffset + 2, length));\n        } else {\n            str = '';\n        }\n\n        return {\n            data: str,\n            size: 2 + length\n        };\n    }\n\n    static parseLongString(arrayBuffer: ArrayBuffer, dataOffset: number, dataSize: number) {\n        if(dataSize < 4) {\n            throw new Error('Data not enough when parse LongString');\n        }\n        const v = new DataView(arrayBuffer, dataOffset, dataSize);\n        const length = v.getUint32(0, !le);\n\n        let str;\n        if(length > 0) {\n            str = decodeUTF8(new Uint8Array(arrayBuffer, dataOffset + 4, length));\n        } else {\n            str = '';\n        }\n\n        return {\n            data: str,\n            size: 4 + length\n        };\n    }\n\n    static parseDate(arrayBuffer: ArrayBuffer, dataOffset: number, dataSize: number) {\n        if(dataSize < 10) {\n            throw new Error('Data size invalid when parse Date');\n        }\n        const v = new DataView(arrayBuffer, dataOffset, dataSize);\n        let timestamp = v.getFloat64(0, !le);\n        const localTimeOffset = v.getInt16(8, !le);\n        timestamp += localTimeOffset * 60 * 1000; // get UTC time\n\n        return {\n            data: new Date(timestamp),\n            size: 8 + 2\n        };\n    }\n\n    static parseValue(arrayBuffer: ArrayBuffer, dataOffset: number, dataSize: number): ScriptData {\n        if(dataSize < 1) {\n            throw new Error('Data not enough when parse Value');\n        }\n\n        const v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n        let offset = 1;\n        const type = v.getUint8(0);\n        let value: any;\n        let objectEnd = false;\n\n        try {\n            switch(type) {\n            case 0: // Number(Double) type\n                value = v.getFloat64(1, !le);\n                offset += 8;\n                break;\n            case 1: {\n                // Boolean type\n                const b = v.getUint8(1);\n                value = !!b;\n                offset += 1;\n                break;\n            }\n            case 2: {\n                // String type\n                const amfstr = AMF.parseString(arrayBuffer, dataOffset + 1, dataSize - 1);\n                value = amfstr.data;\n                offset += amfstr.size;\n                break;\n            }\n            case 3: {\n                // Object(s) type\n                value = {};\n                let terminal = 0; // workaround for malformed Objects which has missing ScriptDataObjectEnd\n                if((v.getUint32(dataSize - 4, !le) & 0x00ffffff) === 9) {\n                    terminal = 3;\n                }\n                while(offset < dataSize - 4) {\n                    // 4 === type(UI8) + ScriptDataObjectEnd(UI24)\n                    const amfobj = AMF.parseObject(\n                        arrayBuffer,\n                        dataOffset + offset,\n                        dataSize - offset - terminal\n                    );\n                    if(amfobj.objectEnd) break;\n                    value[amfobj.data.name] = amfobj.data.value;\n                    offset += amfobj.size;\n                }\n                if(offset <= dataSize - 3) {\n                    const marker = v.getUint32(offset - 1, !le) & 0x00ffffff;\n                    if(marker === 9) {\n                        offset += 3;\n                    }\n                }\n                break;\n            }\n            case 8: {\n                // ECMA array type (Mixed array)\n                value = {};\n                offset += 4; // ECMAArrayLength(UI32)\n                let terminal = 0; // workaround for malformed MixedArrays which has missing ScriptDataObjectEnd\n                if((v.getUint32(dataSize - 4, !le) & 0x00ffffff) === 9) {\n                    terminal = 3;\n                }\n                while(offset < dataSize - 8) {\n                    // 8 === type(UI8) + ECMAArrayLength(UI32) + ScriptDataVariableEnd(UI24)\n                    const amfvar = AMF.parseVariable(\n                        arrayBuffer,\n                        dataOffset + offset,\n                        dataSize - offset - terminal\n                    );\n                    if(amfvar.objectEnd) break;\n                    value[amfvar.data.name] = amfvar.data.value;\n                    offset += amfvar.size;\n                }\n                if(offset <= dataSize - 3) {\n                    const marker = v.getUint32(offset - 1, !le) & 0x00ffffff;\n                    if(marker === 9) {\n                        offset += 3;\n                    }\n                }\n                break;\n            }\n            case 9: // ScriptDataObjectEnd\n                value = undefined;\n                offset = 1;\n                objectEnd = true;\n                break;\n            case 10: {\n                // Strict array type\n                // ScriptDataValue[n]. NOTE: according to video_file_format_spec_v10_1.pdf\n                value = [];\n                const strictArrayLength = v.getUint32(1, !le);\n                offset += 4;\n                for(let i = 0; i < strictArrayLength; i++) {\n                    const val: ScriptData = AMF.parseValue(\n                        arrayBuffer,\n                        dataOffset + offset,\n                        dataSize - offset\n                    );\n                    const size = val.size || 0;\n                    value.push(val.data);\n                    offset += size;\n                }\n                break;\n            }\n            case 11: {\n                // Date type\n                const date = AMF.parseDate(arrayBuffer, dataOffset + 1, dataSize - 1);\n                value = date.data;\n                offset += date.size;\n                break;\n            }\n            case 12: {\n                // Long string type\n                const amfLongStr = AMF.parseString(arrayBuffer, dataOffset + 1, dataSize - 1);\n                value = amfLongStr.data;\n                offset += amfLongStr.size;\n                break;\n            }\n            default:\n                // ignore and skip\n                offset = dataSize;\n                // Log.w('AMF', 'Unsupported AMF value type ' + type);\n            }\n        } catch (e) {\n            // Log.e('AMF', e.toString());\n        }\n\n        return {\n            data: value,\n            size: offset,\n            objectEnd\n        };\n    }\n}\n\nexport default AMF;\n","import Log from '../../../Utils/Logger';\n\nclass ExpGolomb {\n    Tag: string\n\n    data: Uint8Array\n\n    bytesAvailable: number\n\n    word: number\n\n    bitsAvailable: number\n\n    constructor(data: Uint8Array) {\n        this.Tag = 'ExpGolomb';\n        this.data = data;\n        // the number of bytes left to examine in this.data\n        this.bytesAvailable = data.byteLength;\n        // the current word being examined\n        this.word = 0; // :uint\n        // the number of bits left to examine in the current word\n        this.bitsAvailable = 0; // :uint\n    }\n\n    // ():void\n    loadWord(): void {\n        const { data } = this;\n        const { bytesAvailable } = this;\n        const position = data.byteLength - bytesAvailable;\n        const workingBytes = new Uint8Array(4);\n        const availableBytes = Math.min(4, bytesAvailable);\n        if(availableBytes === 0) {\n            throw new Error('no bytes available');\n        }\n\n        workingBytes.set(data.subarray(position, position + availableBytes));\n        this.word = new DataView(workingBytes.buffer).getUint32(0);\n        // track the amount of this.data that has been processed\n        this.bitsAvailable = availableBytes * 8;\n        this.bytesAvailable -= availableBytes;\n    }\n\n    // (count:int):void\n    skipBits(count: number): void {\n        let skipBytes; // :int\n        if(this.bitsAvailable > count) {\n            this.word <<= count;\n            this.bitsAvailable -= count;\n        } else {\n            count -= this.bitsAvailable;\n            skipBytes = count >> 3;\n            count -= skipBytes >> 3;\n            this.bytesAvailable -= skipBytes;\n            this.loadWord();\n            this.word <<= count;\n            this.bitsAvailable -= count;\n        }\n    }\n\n    // (size:int):uint\n    readBits(size: number): number {\n        let bits = Math.min(this.bitsAvailable, size); // :uint\n        const valu = this.word >>> (32 - bits); // :uint\n        if(size > 32) {\n            Log.error(this.Tag, 'Cannot read more than 32 bits at a time');\n        }\n\n        this.bitsAvailable -= bits;\n        if(this.bitsAvailable > 0) {\n            this.word <<= bits;\n        } else if(this.bytesAvailable > 0) {\n            this.loadWord();\n        }\n\n        bits = size - bits;\n        if(bits > 0 && this.bitsAvailable) {\n            return (valu << bits) | this.readBits(bits);\n        }\n        return valu;\n    }\n\n    // ():uint\n    skipLZ(): number {\n        let leadingZeroCount; // :uint\n        for(leadingZeroCount = 0; leadingZeroCount < this.bitsAvailable; ++leadingZeroCount) {\n            if((this.word & (0x80000000 >>> leadingZeroCount)) !== 0) {\n                // the first bit of working word is 1\n                this.word <<= leadingZeroCount;\n                this.bitsAvailable -= leadingZeroCount;\n                return leadingZeroCount;\n            }\n        }\n        // we exhausted word and still have not found a 1\n        this.loadWord();\n        return leadingZeroCount + this.skipLZ();\n    }\n\n    // ():void\n    skipUEG(): void {\n        this.skipBits(1 + this.skipLZ());\n    }\n\n    // ():void\n    skipEG(): void {\n        this.skipBits(1 + this.skipLZ());\n    }\n\n    // ():uint\n    readUEG(): number {\n        const clz = this.skipLZ(); // :uint\n        return this.readBits(clz + 1) - 1;\n    }\n\n    // ():int\n    readEG(): number {\n        const valu = this.readUEG(); // :int\n        if(0x01 & valu) {\n            // the number is odd if the low order bit is set\n            return (1 + valu) >>> 1; // add 1 to make it even, and divide by 2\n        }\n        return -1 * (valu >>> 1); // divide by two then make it negative\n    }\n\n    // Some convenience functions\n    // :Boolean\n    readBoolean(): boolean {\n        return this.readBits(1) === 1;\n    }\n\n    // ():int\n    readUByte(): number {\n        return this.readBits(8);\n    }\n\n    // ():int\n    readUShort(): number {\n        return this.readBits(16);\n    }\n\n    // ():int\n    readUInt(): number {\n        return this.readBits(32);\n    }\n\n    /**\n     * Advance the ExpGolomb decoder past a scaling list. The scaling\n     * list is optionally transmitted as part of a sequence parameter\n     * set and is not relevant to transmuxing.\n     * @param count {number} the number of entries in this scaling list\n     * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\n     */\n    skipScalingList(count: number): void {\n        let lastScale = 8;\n        let nextScale = 8;\n        let j;\n        let deltaScale;\n        for(j = 0; j < count; j++) {\n            if(nextScale !== 0) {\n                deltaScale = this.readEG();\n                nextScale = (lastScale + deltaScale + 256) % 256;\n            }\n            lastScale = nextScale === 0 ? lastScale : nextScale;\n        }\n    }\n\n    /**\n     * Read a sequence parameter set and return some interesting video\n     * properties. A sequence parameter set is the H264 metadata that\n     * describes the properties of upcoming video frames.\n     * @param data {Uint8Array} the bytes of a sequence parameter set\n     * @return {object} an object with configuration parsed from the\n     * sequence parameter set, including the dimensions of the\n     * associated video frames.\n     */\n    readSPS() {\n        let frameCropLeftOffset = 0;\n        let frameCropRightOffset = 0;\n        let frameCropTopOffset = 0;\n        let frameCropBottomOffset = 0;\n        let numRefFramesInPicOrderCntCycle;\n        let scalingListCount;\n        let i;\n        const readUByte = this.readUByte.bind(this);\n        const readBits = this.readBits.bind(this);\n        const readUEG = this.readUEG.bind(this);\n        const readBoolean = this.readBoolean.bind(this);\n        const skipBits = this.skipBits.bind(this);\n        const skipEG = this.skipEG.bind(this);\n        const skipUEG = this.skipUEG.bind(this);\n        const skipScalingList = this.skipScalingList.bind(this);\n\n        readUByte();\n        const profileIdc = readUByte(); // profile_idc\n        const profileCompat = readBits(5); // constraint_set[0-4]_flag, u(5)\n        skipBits(3); // reserved_zero_3bits u(3),\n        const levelIdc = readUByte(); // level_idc u(8)\n        skipUEG(); // seq_parameter_set_id\n        // some profiles have more optional data we don't need\n        if(\n            profileIdc === 100\n            || profileIdc === 110\n            || profileIdc === 122\n            || profileIdc === 244\n            || profileIdc === 44\n            || profileIdc === 83\n            || profileIdc === 86\n            || profileIdc === 118\n            || profileIdc === 128\n        ) {\n            const chromaFormatIdc = readUEG();\n            if(chromaFormatIdc === 3) {\n                skipBits(1);\n            } // separate_colour_plane_flag\n\n            skipUEG(); // bit_depth_luma_minus8\n            skipUEG(); // bit_depth_chroma_minus8\n            skipBits(1); // qpprime_y_zero_transform_bypass_flag\n            if(readBoolean()) {\n                // seq_scaling_matrix_present_flag\n                scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;\n                for(i = 0; i < scalingListCount; i++) {\n                    if(readBoolean()) {\n                        // seq_scaling_list_present_flag[ i ]\n                        if(i < 6) {\n                            skipScalingList(16);\n                        } else {\n                            skipScalingList(64);\n                        }\n                    }\n                }\n            }\n        }\n        skipUEG(); // log2_max_frame_num_minus4\n        const picOrderCntType = readUEG();\n        if(picOrderCntType === 0) {\n            readUEG(); // log2_max_pic_order_cnt_lsb_minus4\n        } else if(picOrderCntType === 1) {\n            skipBits(1); // delta_pic_order_always_zero_flag\n            skipEG(); // offset_for_non_ref_pic\n            skipEG(); // offset_for_top_to_bottom_field\n            numRefFramesInPicOrderCntCycle = readUEG();\n            for(i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\n                skipEG();\n            } // offset_for_ref_frame[ i ]\n        }\n        skipUEG(); // max_num_ref_frames\n        skipBits(1); // gaps_in_frame_num_value_allowed_flag\n        const picWidthInMbsMinus1 = readUEG();\n        const picHeightInMapUnitsMinus1 = readUEG();\n        const frameMbsOnlyFlag = readBits(1);\n        if(frameMbsOnlyFlag === 0) {\n            skipBits(1);\n        } // mb_adaptive_frame_field_flag\n\n        skipBits(1); // direct_8x8_inference_flag\n        if(readBoolean()) {\n            // frame_cropping_flag\n            frameCropLeftOffset = readUEG();\n            frameCropRightOffset = readUEG();\n            frameCropTopOffset = readUEG();\n            frameCropBottomOffset = readUEG();\n        }\n        let pixelRatio = [1, 1];\n        if(readBoolean()) {\n            // vui_parameters_present_flag\n            if(readBoolean()) {\n                // aspect_ratio_info_present_flag\n                const aspectRatioIdc = readUByte();\n                switch(aspectRatioIdc) {\n                case 1:\n                    pixelRatio = [1, 1];\n                    break;\n                case 2:\n                    pixelRatio = [12, 11];\n                    break;\n                case 3:\n                    pixelRatio = [10, 11];\n                    break;\n                case 4:\n                    pixelRatio = [16, 11];\n                    break;\n                case 5:\n                    pixelRatio = [40, 33];\n                    break;\n                case 6:\n                    pixelRatio = [24, 11];\n                    break;\n                case 7:\n                    pixelRatio = [20, 11];\n                    break;\n                case 8:\n                    pixelRatio = [32, 11];\n                    break;\n                case 9:\n                    pixelRatio = [80, 33];\n                    break;\n                case 10:\n                    pixelRatio = [18, 11];\n                    break;\n                case 11:\n                    pixelRatio = [15, 11];\n                    break;\n                case 12:\n                    pixelRatio = [64, 33];\n                    break;\n                case 13:\n                    pixelRatio = [160, 99];\n                    break;\n                case 14:\n                    pixelRatio = [4, 3];\n                    break;\n                case 15:\n                    pixelRatio = [3, 2];\n                    break;\n                case 16:\n                    pixelRatio = [2, 1];\n                    break;\n                case 255: {\n                    pixelRatio = [\n                        (readUByte() << 8) | readUByte(),\n                        (readUByte() << 8) | readUByte()\n                    ];\n                    break;\n                }\n                default:\n                    pixelRatio = [1, 1];\n                    break;\n                }\n            }\n        }\n        return {\n            width: Math.ceil(\n                (picWidthInMbsMinus1 + 1) * 16 - frameCropLeftOffset * 2 - frameCropRightOffset * 2\n            ),\n            height:\n                (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16\n                - (frameMbsOnlyFlag ? 2 : 4) * (frameCropTopOffset + frameCropBottomOffset),\n            pixelRatio\n        };\n    }\n\n    readSliceType(): number {\n        // skip NALu type\n        this.readUByte();\n        // discard first_mb_in_slice\n        this.readUEG();\n        // return slice_type\n        return this.readUEG();\n    }\n}\n\nexport default ExpGolomb;\n","import ExpGolomb from './ExpGolomb';\n\nclass SPSParser {\n    static _ebsp2rbsp(uint8array: Uint8Array) {\n        const src = uint8array;\n        const srcLength = src.byteLength;\n        const dst = new Uint8Array(srcLength);\n        let dstIndex = 0;\n\n        for(let i = 0; i < srcLength; i++) {\n            if(i >= 2) {\n                // Unescape: Skip 0x03 after 00 00\n                if(src[i] === 0x03 && src[i - 1] === 0x00 && src[i - 2] === 0x00) {\n                    continue;\n                }\n            }\n            dst[dstIndex] = src[i];\n            dstIndex++;\n        }\n\n        return new Uint8Array(dst.buffer, 0, dstIndex);\n    }\n\n    static parseSPS(uint8array: Uint8Array) {\n        const rbsp = SPSParser._ebsp2rbsp(uint8array);\n        let gb: ExpGolomb | null = new ExpGolomb(rbsp);\n\n        gb.readUByte();\n        const profileIdc = gb.readUByte(); // profile_idc\n        gb.readUByte(); // constraint_set_flags[5] + reserved_zero[3]\n        const levelIdc = gb.readUByte(); // level_idc\n        gb.readUEG(); // seq_parameter_set_id\n\n        const profileString = SPSParser.getProfileString(profileIdc);\n        const levelString = SPSParser.getLevelString(levelIdc);\n        let chromaFormatIdc = 1;\n        let chromaFormat = 420;\n        const chromaFormatTable = [0, 420, 422, 444];\n        let bitDepth = 8;\n\n        if(\n            profileIdc === 100\n            || profileIdc === 110\n            || profileIdc === 122\n            || profileIdc === 244\n            || profileIdc === 44\n            || profileIdc === 83\n            || profileIdc === 86\n            || profileIdc === 118\n            || profileIdc === 128\n            || profileIdc === 138\n            || profileIdc === 144\n        ) {\n            chromaFormatIdc = gb.readUEG();\n            if(chromaFormatIdc === 3) {\n                gb.readBits(1); // separate_colour_plane_flag\n            }\n            if(chromaFormatIdc <= 3) {\n                chromaFormat = chromaFormatTable[chromaFormatIdc];\n            }\n\n            bitDepth = gb.readUEG() + 8; // bitDepth_luma_minus8\n            gb.readUEG(); // bitDepth_chroma_minus8\n            gb.readBits(1); // qpprime_y_zero_transform_bypass_flag\n            if(gb.readBoolean()) {\n                // seq_scaling_matrix_present_flag\n                const scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;\n                for(let i = 0; i < scalingListCount; i++) {\n                    if(gb.readBoolean()) {\n                        // seq_scaling_list_present_flag\n                        if(i < 6) {\n                            SPSParser._skipScalingList(gb, 16);\n                        } else {\n                            SPSParser._skipScalingList(gb, 64);\n                        }\n                    }\n                }\n            }\n        }\n        gb.readUEG(); // log2_max_frame_num_minus4\n        const picOrderCntType = gb.readUEG();\n        if(picOrderCntType === 0) {\n            gb.readUEG(); // log2_max_pic_order_cnt_lsb_minus_4\n        } else if(picOrderCntType === 1) {\n            gb.readBits(1); // delta_pic_order_always_zero_flag\n            gb.readUEG(); // offset_for_non_ref_pic\n            gb.readUEG(); // offset_for_top_to_bottom_field\n            const numRefFramesInPicOrderCntCycle = gb.readUEG();\n            for(let i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\n                gb.readUEG(); // offset_for_ref_frame\n            }\n        }\n        const refFrames = gb.readUEG(); // max_num_refFrames\n        gb.readBits(1); // gaps_in_frame_num_value_allowed_flag\n\n        const picWidthInMbsMinus1 = gb.readUEG();\n        const picHeightInMapUnitsMinus1 = gb.readUEG();\n\n        const frameMbsOnlyFlag = gb.readBits(1);\n        if(frameMbsOnlyFlag === 0) {\n            gb.readBits(1); // mb_adaptive_frame_field_flag\n        }\n        gb.readBits(1); // direct_8x8_inference_flag\n\n        let frameCropLeftOffset = 0;\n        let frameCropRightOffset = 0;\n        let frameCropTopOffset = 0;\n        let frameCropBottomOffset = 0;\n\n        const frameCroppingFlag = gb.readBoolean();\n        if(frameCroppingFlag) {\n            frameCropLeftOffset = gb.readUEG();\n            frameCropRightOffset = gb.readUEG();\n            frameCropTopOffset = gb.readUEG();\n            frameCropBottomOffset = gb.readUEG();\n        }\n\n        let sarWidth = 1;\n        let sarHeight = 1;\n        let fps = 0;\n        let fpsFixed = true;\n        let fpsNum = 0;\n        let fpsDen = 0;\n\n        const vuiParametersPresentFlag = gb.readBoolean();\n        if(vuiParametersPresentFlag) {\n            if(gb.readBoolean()) {\n                // aspect_ratio_info_present_flag\n                const aspectRatioIdc = gb.readUByte();\n                const sarWTable = [1, 12, 10, 16, 40, 24, 20, 32, 80, 18, 15, 64, 160, 4, 3, 2];\n                const sarHTable = [1, 11, 11, 11, 33, 11, 11, 11, 33, 11, 11, 33, 99, 3, 2, 1];\n\n                if(aspectRatioIdc > 0 && aspectRatioIdc < 16) {\n                    sarWidth = sarWTable[aspectRatioIdc - 1];\n                    sarHeight = sarHTable[aspectRatioIdc - 1];\n                } else if(aspectRatioIdc === 255) {\n                    sarWidth = (gb.readUByte() << 8) | gb.readUByte();\n                    sarHeight = (gb.readUByte() << 8) | gb.readUByte();\n                }\n            }\n\n            if(gb.readBoolean()) {\n                // overscan_info_present_flag\n                gb.readBoolean(); // overscan_appropriate_flag\n            }\n            if(gb.readBoolean()) {\n                // video_signal_type_present_flag\n                gb.readBits(4); // video_format & video_full_range_flag\n                if(gb.readBoolean()) {\n                    // colour_description_present_flag\n                    gb.readBits(24); // colour_primaries & transfer_characteristics & matrix_coefficients\n                }\n            }\n            if(gb.readBoolean()) {\n                // chroma_loc_info_present_flag\n                gb.readUEG(); // chroma_sample_loc_type_top_field\n                gb.readUEG(); // chroma_sample_loc_type_bottom_field\n            }\n            if(gb.readBoolean()) {\n                // timing_info_present_flag\n                const numUnitsInTick = gb.readBits(32);\n                const timeScale = gb.readBits(32);\n                fpsFixed = gb.readBoolean(); // fixed_frameRate_flag\n\n                fpsNum = timeScale;\n                fpsDen = numUnitsInTick * 2;\n                fps = fpsNum / fpsDen;\n            }\n        }\n\n        let sarScale = 1;\n        if(sarWidth !== 1 || sarHeight !== 1) {\n            sarScale = sarWidth / sarHeight;\n        }\n\n        let cropUnitX = 0;\n        let cropUnitY = 0;\n        if(chromaFormatIdc === 0) {\n            cropUnitX = 1;\n            cropUnitY = 2 - frameMbsOnlyFlag;\n        } else {\n            const subWc = chromaFormatIdc === 3 ? 1 : 2;\n            const subHc = chromaFormatIdc === 1 ? 2 : 1;\n            cropUnitX = subWc;\n            cropUnitY = subHc * (2 - frameMbsOnlyFlag);\n        }\n\n        let codecWidth = (picWidthInMbsMinus1 + 1) * 16;\n        let codecHeight = (2 - frameMbsOnlyFlag) * ((picHeightInMapUnitsMinus1 + 1) * 16);\n\n        codecWidth -= (frameCropLeftOffset + frameCropRightOffset) * cropUnitX;\n        codecHeight -= (frameCropTopOffset + frameCropBottomOffset) * cropUnitY;\n\n        const presentWidth = Math.ceil(codecWidth * sarScale);\n\n        // gb.destroy();\n        gb = null;\n\n        return {\n            profileString, // baseline, high, high10, ...\n            levelString, // 3, 3.1, 4, 4.1, 5, 5.1, ...\n            bitDepth, // 8bit, 10bit, ...\n            refFrames,\n            chromaFormat, // 4:2:0, 4:2:2, ...\n            chromaFormatString: SPSParser.getChromaFormatString(chromaFormat),\n            frameRate: {\n                fixed: fpsFixed,\n                fps,\n                fpsDen,\n                fpsNum\n            },\n            sarRatio: {\n                width: sarWidth,\n                height: sarHeight\n            },\n            codecSize: {\n                width: codecWidth,\n                height: codecHeight\n            },\n            presentSize: {\n                width: presentWidth,\n                height: codecHeight\n            }\n        };\n    }\n\n    static _skipScalingList(gb: ExpGolomb, count: number) {\n        let lastScale = 8;\n        let nextScale = 8;\n        let deltaScale = 0;\n        for(let i = 0; i < count; i++) {\n            if(nextScale !== 0) {\n                deltaScale = gb.readUEG();\n                nextScale = (lastScale + deltaScale + 256) % 256;\n            }\n            lastScale = nextScale === 0 ? lastScale : nextScale;\n        }\n    }\n\n    static getProfileString(profileIdc: number) {\n        switch(profileIdc) {\n        case 66:\n            return 'Baseline';\n        case 77:\n            return 'Main';\n        case 88:\n            return 'Extended';\n        case 100:\n            return 'High';\n        case 110:\n            return 'High10';\n        case 122:\n            return 'High422';\n        case 244:\n            return 'High444';\n        default:\n            return 'Unknown';\n        }\n    }\n\n    static getLevelString(levelIdc: number) {\n        return (levelIdc / 10).toFixed(1);\n    }\n\n    static getChromaFormatString(chroma: number) {\n        switch(chroma) {\n        case 420:\n            return '4:2:0';\n        case 422:\n            return '4:2:2';\n        case 444:\n            return '4:4:4';\n        default:\n            return 'Unknown';\n        }\n    }\n}\n\nexport default SPSParser;\n","const Events = {\n    ERROR: 'ERROR',\n    GET_SEI_INFO: 'GET_SEI_INFO',\n    FRAG_PARSED: 'FRAG_PARSED',\n    INIT_PTS_FOUND: 'INIT_PTS_FOUND',\n    FRAG_PARSING_INIT_SEGMENT: 'FRAG_PARSING_INIT_SEGMENT',\n    FRAG_PARSING_METADATA: 'FRAG_PARSING_METADATA',\n    FRAG_PARSING_USERDATA: 'FRAG_PARSING_USERDATA',\n    MEDIA_INFO: 'MEDIA_INFO',\n    MEDIA_DATA_ARRIVED: 'MEDIA_DATA_ARRIVED',\n    SCRIPT_DATA_ARRIVED: 'SCRIPT_DATA_ARRIVED',\n    // 当转码器解析出初始化片段时触发\n    INIT_SEGMENT: 'INIT_SEGMENT',\n    // 当转码器解析出媒体化片段时触发\n    MEDIA_SEGMENT: 'MEDIA_SEGMENT'\n};\n\nexport default Events;\n","export const ErrorTypes: Record<string, string> = {\n    // Identifier for a network error (loading error / timeout ...)\n    NETWORK_ERROR: 'networkError',\n    // Identifier for a media Error (video/parsing/mediasource error)\n    MEDIA_ERROR: 'mediaError',\n    // EME (encrypted media extensions) errors\n    KEY_SYSTEM_ERROR: 'keySystemError',\n    // Identifier for a mux Error (demuxing/remuxing)\n    MUX_ERROR: 'muxError',\n    // Identifier for all other errors\n    OTHER_ERROR: 'otherError'\n};\n\nexport const ErrorDetails: Record<string, string> = {\n    KEY_SYSTEM_NO_KEYS: 'keySystemNoKeys',\n\n    KEY_SYSTEM_NO_ACCESS: 'keySystemNoAccess',\n\n    KEY_SYSTEM_NO_SESSION: 'keySystemNoSession',\n\n    KEY_SYSTEM_LICENSE_REQUEST_FAILED: 'keySystemLicenseRequestFailed',\n    // Identifier for a manifest load error - data: { url : faulty URL, response : { code: error code, text: error text }}\n    MANIFEST_LOAD_ERROR: 'manifestLoadError',\n    // Identifier for a manifest load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}\n    MANIFEST_LOAD_TIMEOUT: 'manifestLoadTimeOut',\n    // Identifier for a manifest parsing error - data: { url : faulty URL, reason : error reason}\n    MANIFEST_PARSING_ERROR: 'manifestParsingError',\n    // Identifier for a manifest with only incompatible codecs error - data: { url : faulty URL, reason : error reason}\n    MANIFEST_INCOMPATIBLE_CODECS_ERROR: 'manifestIncompatibleCodecsError',\n    // Identifier for a level load error - data: { url : faulty URL, response : { code: error code, text: error text }}\n    LEVEL_LOAD_ERROR: 'levelLoadError',\n    // Identifier for a level load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}\n    LEVEL_LOAD_TIMEOUT: 'levelLoadTimeOut',\n    // Identifier for a level switch error - data: { level : faulty level Id, event : error description}\n    LEVEL_SWITCH_ERROR: 'levelSwitchError',\n    // Identifier for an audio track load error - data: { url : faulty URL, response : { code: error code, text: error text }}\n    AUDIO_TRACK_LOAD_ERROR: 'audioTrackLoadError',\n    // Identifier for an audio track load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}\n    AUDIO_TRACK_LOAD_TIMEOUT: 'audioTrackLoadTimeOut',\n    // Identifier for fragment load error - data: { frag : fragment object, response : { code: error code, text: error text }}\n    FRAG_LOAD_ERROR: 'fragLoadError',\n    // Identifier for fragment load timeout error - data: { frag : fragment object}\n    FRAG_LOAD_TIMEOUT: 'fragLoadTimeOut',\n    // Identifier for a fragment decryption error event - data: {id : demuxer Id,frag: fragment object, reason : parsing error description }\n    FRAG_DECRYPT_ERROR: 'fragDecryptError',\n    // Identifier for a fragment parsing error event - data: { id : demuxer Id, reason : parsing error description }\n    // will be renamed DEMUX_PARSING_ERROR and switched to MUX_ERROR in the next major release\n    FRAG_PARSING_ERROR: 'fragParsingError',\n    // Identifier for a remux alloc error event - data: { id : demuxer Id, frag : fragment object, bytes : nb of bytes on which allocation failed , reason : error text }\n    REMUX_ALLOC_ERROR: 'remuxAllocError',\n    // Identifier for decrypt key load error - data: { frag : fragment object, response : { code: error code, text: error text }}\n    KEY_LOAD_ERROR: 'keyLoadError',\n    // Identifier for decrypt key load timeout error - data: { frag : fragment object}\n    KEY_LOAD_TIMEOUT: 'keyLoadTimeOut',\n    // Triggered when an exception occurs while adding a sourceBuffer to MediaSource - data : {  err : exception , mimeType : mimeType }\n    BUFFER_ADD_CODEC_ERROR: 'bufferAddCodecError',\n    // Identifier for a buffer append error - data: append error description\n    BUFFER_APPEND_ERROR: 'bufferAppendError',\n    // Identifier for a buffer appending error event - data: appending error description\n    BUFFER_APPENDING_ERROR: 'bufferAppendingError',\n    // Identifier for a buffer stalled error event\n    BUFFER_STALLED_ERROR: 'bufferStalledError',\n    // Identifier for a buffer full event\n    BUFFER_FULL_ERROR: 'bufferFullError',\n    // Identifier for a buffer seek over hole event\n    BUFFER_SEEK_OVER_HOLE: 'bufferSeekOverHole',\n    // Identifier for a buffer nudge on stall (playback is stuck although currentTime is in a buffered area)\n    BUFFER_NUDGE_ON_STALL: 'bufferNudgeOnStall',\n    // Identifier for an internal exception happening inside hls.js while handling an event\n    INTERNAL_EXCEPTION: 'internalException',\n    FORMAT_ERROR: 'FormatError',\n    FORMAT_UNSUPPORTED: 'FormatUnsupported',\n    CODEC_UNSUPPORTED: 'CodecUnsupported'\n};\n","import { AudioMediaData } from '../Codecs/FLVCodec/Interface';\n\nclass MediaInfo {\n    mimeType: string | null\n\n    duration: number | null | undefined\n\n    hasAudio: boolean | null | undefined\n\n    hasVideo: boolean | null | undefined\n\n    audioCodec: string | null | undefined\n\n    videoCodec: string | null | undefined\n\n    audioDataRate: number | null\n\n    videoDataRate: number | null\n\n    audioSampleRate: number | null | undefined\n\n    audioChannelCount: number | null | undefined\n\n    width: number | null | undefined\n\n    height: number | null | undefined\n\n    fps: number | null\n\n    profile: string | null | undefined\n\n    level: string | null | undefined\n\n    refFrames: number | null\n\n    chromaFormat: string | null\n\n    sarNum: number | null\n\n    sarDen: number | null\n\n    metadata: AudioMediaData | null\n\n    segments: MediaInfo[] | null\n\n    segmentCount: number | null\n\n    hasKeyframesIndex: boolean | null\n\n    keyframesIndex: {\n        times: number[]\n        filepositions: number[]\n    } | null\n\n    constructor() {\n        this.mimeType = null;\n        this.duration = null;\n\n        this.hasAudio = null;\n        this.hasVideo = null;\n        this.audioCodec = null;\n        this.videoCodec = null;\n        this.audioDataRate = null;\n        this.videoDataRate = null;\n\n        this.audioSampleRate = null;\n        this.audioChannelCount = null;\n\n        this.width = null;\n        this.height = null;\n        this.fps = null;\n        this.profile = null;\n        this.level = null;\n        this.refFrames = null;\n        this.chromaFormat = null;\n        this.sarNum = null;\n        this.sarDen = null;\n\n        this.metadata = null;\n        this.segments = null; // MediaInfo[]\n        this.segmentCount = null;\n        this.hasKeyframesIndex = null;\n        this.keyframesIndex = null;\n    }\n\n    isComplete() {\n        const audioInfoComplete = this.hasAudio === false\n            || (this.hasAudio === true\n                && this.audioCodec != null\n                && this.audioSampleRate != null\n                && this.audioChannelCount != null);\n\n        const videoInfoComplete = this.hasVideo === false\n            || (this.hasVideo === true\n                && this.videoCodec != null\n                && this.width != null\n                && this.height != null\n                && this.fps != null\n                && this.profile != null\n                && this.level != null\n                && this.refFrames != null\n                && this.chromaFormat != null\n                && this.sarNum != null\n                && this.sarDen != null);\n\n        // keyframesIndex may not be present\n        return (\n            this.mimeType != null\n            && this.duration != null\n            && this.metadata != null\n            && this.hasKeyframesIndex != null\n            && audioInfoComplete\n            && videoInfoComplete\n        );\n    }\n\n    isSeekable() {\n        return this.hasKeyframesIndex === true;\n    }\n\n    getNearestKeyframe(milliseconds: number) {\n        if(this.keyframesIndex == null) {\n            return null;\n        }\n\n        const table = this.keyframesIndex;\n        const keyframeIdx = this._search(table.times, milliseconds);\n\n        return {\n            index: keyframeIdx,\n            milliseconds: table.times[keyframeIdx],\n            fileposition: table.filepositions[keyframeIdx]\n        };\n    }\n\n    _search(list: number[], value: number) {\n        let idx = 0;\n\n        const last = list.length - 1;\n        let mid = 0;\n        let lbound = 0;\n        let ubound = last;\n\n        if(value < list[0]) {\n            idx = 0;\n            lbound = ubound + 1; // skip search\n        }\n\n        while(lbound <= ubound) {\n            mid = lbound + Math.floor((ubound - lbound) / 2);\n            if(mid === last || (value >= list[mid] && value < list[mid + 1])) {\n                idx = mid;\n                break;\n            } else if(list[mid] < value) {\n                lbound = mid + 1;\n            } else {\n                ubound = mid - 1;\n            }\n        }\n\n        return idx;\n    }\n}\n\nexport default MediaInfo;\n","import { track } from '../Interface';\n\n//  MP4 boxes generator for ISO BMFF (ISO Base Media File Format, defined in ISO/IEC 14496-12)\nclass MP4 {\n    static types: Record<string, Array<number>>\n\n    static HDLR_TYPES: Record<string, Uint8Array>\n\n    static STTS: Uint8Array\n\n    static STSC: Uint8Array\n\n    static STCO: Uint8Array\n\n    static STSZ: Uint8Array\n\n    static VMHD: Uint8Array\n\n    static SMHD: Uint8Array\n\n    static STSD: Uint8Array\n\n    static FTYP: Uint8Array\n\n    static DINF: Uint8Array\n\n    static STSD_PREFIX: Uint8Array\n\n    static HDLR_VIDEO: Uint8Array\n\n    static HDLR_AUDIO: Uint8Array\n\n    static DREF: Uint8Array\n\n    static init() {\n        MP4.types = {\n            avc1: [],\n            avcC: [],\n            btrt: [],\n            dinf: [],\n            dref: [],\n            esds: [],\n            ftyp: [],\n            hdlr: [],\n            mdat: [],\n            mdhd: [],\n            mdia: [],\n            mfhd: [],\n            minf: [],\n            moof: [],\n            moov: [],\n            mp4a: [],\n            mvex: [],\n            mvhd: [],\n            sdtp: [],\n            stbl: [],\n            stco: [],\n            stsc: [],\n            stsd: [],\n            stsz: [],\n            stts: [],\n            tfdt: [],\n            tfhd: [],\n            traf: [],\n            trak: [],\n            trun: [],\n            trex: [],\n            tkhd: [],\n            vmhd: [],\n            smhd: [],\n            '.mp3': []\n        };\n\n        Object.keys(MP4.types).forEach((type) => {\n            MP4.types[type] = [\n                type.charCodeAt(0),\n                type.charCodeAt(1),\n                type.charCodeAt(2),\n                type.charCodeAt(3)\n            ];\n        });\n\n        MP4.FTYP = new Uint8Array([\n            0x69,\n            0x73,\n            0x6f,\n            0x6d, // major_brand: isom\n            0x0,\n            0x0,\n            0x0,\n            0x1, // minor_version: 0x01\n            0x69,\n            0x73,\n            0x6f,\n            0x6d, // isom\n            0x61,\n            0x76,\n            0x63,\n            0x31 // avc1\n        ]);\n\n        MP4.STSD_PREFIX = new Uint8Array([\n            0x00,\n            0x00,\n            0x00,\n            0x00, // version(0) + flags\n            0x00,\n            0x00,\n            0x00,\n            0x01 // entry_count\n        ]);\n\n        MP4.STTS = new Uint8Array([\n            0x00,\n            0x00,\n            0x00,\n            0x00, // version(0) + flags\n            0x00,\n            0x00,\n            0x00,\n            0x00 // entry_count\n        ]);\n        MP4.STCO = MP4.STTS;\n        MP4.STSC = MP4.STTS;\n\n        MP4.STSZ = new Uint8Array([\n            0x00,\n            0x00,\n            0x00,\n            0x00, // version(0) + flags\n            0x00,\n            0x00,\n            0x00,\n            0x00, // sample_size\n            0x00,\n            0x00,\n            0x00,\n            0x00 // sample_count\n        ]);\n\n        MP4.HDLR_VIDEO = new Uint8Array([\n            0x00,\n            0x00,\n            0x00,\n            0x00, // version(0) + flags\n            0x00,\n            0x00,\n            0x00,\n            0x00, // pre_defined\n            0x76,\n            0x69,\n            0x64,\n            0x65, // handler_type: 'vide'\n            0x00,\n            0x00,\n            0x00,\n            0x00, // reserved: 3 * 4 bytes\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x56,\n            0x69,\n            0x64,\n            0x65,\n            0x6f,\n            0x48,\n            0x61,\n            0x6e,\n            0x64,\n            0x6c,\n            0x65,\n            0x72,\n            0x00 // name: VideoHandler\n        ]);\n        MP4.HDLR_AUDIO = new Uint8Array([\n            0x00,\n            0x00,\n            0x00,\n            0x00, // version(0) + flags\n            0x00,\n            0x00,\n            0x00,\n            0x00, // pre_defined\n            0x73,\n            0x6f,\n            0x75,\n            0x6e, // handler_type: 'soun'\n            0x00,\n            0x00,\n            0x00,\n            0x00, // reserved: 3 * 4 bytes\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x53,\n            0x6f,\n            0x75,\n            0x6e,\n            0x64,\n            0x48,\n            0x61,\n            0x6e,\n            0x64,\n            0x6c,\n            0x65,\n            0x72,\n            0x00 // name: SoundHandler\n        ]);\n\n        MP4.DREF = new Uint8Array([\n            0x00,\n            0x00,\n            0x00,\n            0x00, // version(0) + flags\n            0x00,\n            0x00,\n            0x00,\n            0x01, // entry_count\n            0x00,\n            0x00,\n            0x00,\n            0x0c, // entry_size\n            0x75,\n            0x72,\n            0x6c,\n            0x20, // type 'url '\n            0x00,\n            0x00,\n            0x00,\n            0x01 // version(0) + flags\n        ]);\n\n        // Sound media header\n        MP4.SMHD = new Uint8Array([\n            0x00,\n            0x00,\n            0x00,\n            0x00, // version(0) + flags\n            0x00,\n            0x00,\n            0x00,\n            0x00 // balance(2) + reserved(2)\n        ]);\n\n        // video media header\n        MP4.VMHD = new Uint8Array([\n            0x00,\n            0x00,\n            0x00,\n            0x01, // version(0) + flags\n            0x00,\n            0x00, // graphicsmode: 2 bytes\n            0x00,\n            0x00,\n            0x00,\n            0x00, // opcolor: 3 * 2 bytes\n            0x00,\n            0x00\n        ]);\n    }\n\n    // Generate a box\n    static box(type: Array<number>, ...args: Array<Uint8Array>) {\n        let size = 8;\n        let result = null;\n        const datas = [...args];\n        const arrayCount = datas.length;\n\n        for(let i = 0; i < arrayCount; i++) {\n            size += datas[i].byteLength;\n        }\n\n        result = new Uint8Array(size);\n        result[0] = (size >>> 24) & 0xff; // size\n        result[1] = (size >>> 16) & 0xff;\n        result[2] = (size >>> 8) & 0xff;\n        result[3] = size & 0xff;\n\n        result.set(type, 4); // type\n\n        let offset = 8;\n        for(let i = 0; i < arrayCount; i++) {\n            // data body\n            result.set(datas[i], offset);\n            offset += datas[i].byteLength;\n        }\n\n        return result;\n    }\n\n    // emit ftyp & moov\n    static generateInitSegment(meta: track) {\n        const ftyp = MP4.box(MP4.types.ftyp, MP4.FTYP);\n        const moov = MP4.moov(meta);\n\n        const result = new Uint8Array(ftyp.byteLength + moov.byteLength);\n        result.set(ftyp, 0);\n        result.set(moov, ftyp.byteLength);\n        return result;\n    }\n\n    // Movie metadata box\n    static moov(meta: track) {\n        const mvhd = MP4.mvhd(meta.timescale, meta.duration);\n        const trak = MP4.trak(meta);\n        const mvex = MP4.mvex(meta);\n        return MP4.box(MP4.types.moov, mvhd, trak, mvex);\n    }\n\n    // Movie header box\n    static mvhd(timescale: number, duration: number = 0) {\n        return MP4.box(\n            MP4.types.mvhd,\n            new Uint8Array([\n                0x00,\n                0x00,\n                0x00,\n                0x00, // version(0) + flags\n                0x00,\n                0x00,\n                0x00,\n                0x00, // creation_time\n                0x00,\n                0x00,\n                0x00,\n                0x00, // modification_time\n                (timescale >>> 24) & 0xff, // timescale: 4 bytes\n                (timescale >>> 16) & 0xff,\n                (timescale >>> 8) & 0xff,\n                timescale & 0xff,\n                (duration >>> 24) & 0xff, // duration: 4 bytes\n                (duration >>> 16) & 0xff,\n                (duration >>> 8) & 0xff,\n                duration & 0xff,\n                0x00,\n                0x01,\n                0x00,\n                0x00, // Preferred rate: 1.0\n                0x01,\n                0x00,\n                0x00,\n                0x00, // PreferredVolume(1.0, 2bytes) + reserved(2bytes)\n                0x00,\n                0x00,\n                0x00,\n                0x00, // reserved: 4 + 4 bytes\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x01,\n                0x00,\n                0x00, // ----begin composition matrix----\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x01,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x40,\n                0x00,\n                0x00,\n                0x00, // ----end composition matrix----\n                0x00,\n                0x00,\n                0x00,\n                0x00, // ----begin pre_defined 6 * 4 bytes----\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00, // ----end pre_defined 6 * 4 bytes----\n                0xff,\n                0xff,\n                0xff,\n                0xff // next_track_ID\n            ])\n        );\n    }\n\n    // Track box\n    static trak(meta: track) {\n        return MP4.box(MP4.types.trak, MP4.tkhd(meta), MP4.mdia(meta));\n    }\n\n    // Track header box\n    static tkhd(meta: track) {\n        const trackId = meta.id;\n        const duration = meta.duration || 0;\n        const width = meta.presentWidth;\n        const height = meta.presentHeight;\n\n        return MP4.box(\n            MP4.types.tkhd,\n            new Uint8Array([\n                0x00,\n                0x00,\n                0x00,\n                0x07, // version(0) + flags\n                0x00,\n                0x00,\n                0x00,\n                0x00, // creation_time\n                0x00,\n                0x00,\n                0x00,\n                0x00, // modification_time\n                (trackId >>> 24) & 0xff, // track_ID: 4 bytes\n                (trackId >>> 16) & 0xff,\n                (trackId >>> 8) & 0xff,\n                trackId & 0xff,\n                0x00,\n                0x00,\n                0x00,\n                0x00, // reserved: 4 bytes\n                (duration >>> 24) & 0xff, // duration: 4 bytes\n                (duration >>> 16) & 0xff,\n                (duration >>> 8) & 0xff,\n                duration & 0xff,\n                0x00,\n                0x00,\n                0x00,\n                0x00, // reserved: 2 * 4 bytes\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00, // layer(2bytes) + alternate_group(2bytes)\n                0x00,\n                0x00,\n                0x00,\n                0x00, // volume(2bytes) + reserved(2bytes)\n                0x00,\n                0x01,\n                0x00,\n                0x00, // ----begin composition matrix----\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x01,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x40,\n                0x00,\n                0x00,\n                0x00, // ----end composition matrix----\n                (width >>> 8) & 0xff, // width and height\n                width & 0xff,\n                0x00,\n                0x00,\n                (height >>> 8) & 0xff,\n                height & 0xff,\n                0x00,\n                0x00\n            ])\n        );\n    }\n\n    // Media Box\n    static mdia(meta: track) {\n        return MP4.box(MP4.types.mdia, MP4.mdhd(meta), MP4.hdlr(meta), MP4.minf(meta));\n    }\n\n    // Media header box\n    static mdhd(meta: track) {\n        const { timescale } = meta;\n        const duration = meta.duration || 0;\n        return MP4.box(\n            MP4.types.mdhd,\n            new Uint8Array([\n                0x00,\n                0x00,\n                0x00,\n                0x00, // version(0) + flags\n                0x00,\n                0x00,\n                0x00,\n                0x00, // creation_time\n                0x00,\n                0x00,\n                0x00,\n                0x00, // modification_time\n                (timescale >>> 24) & 0xff, // timescale: 4 bytes\n                (timescale >>> 16) & 0xff,\n                (timescale >>> 8) & 0xff,\n                timescale & 0xff,\n                (duration >>> 24) & 0xff, // duration: 4 bytes\n                (duration >>> 16) & 0xff,\n                (duration >>> 8) & 0xff,\n                duration & 0xff,\n                0x55,\n                0xc4, // language: und (undetermined)\n                0x00,\n                0x00 // pre_defined = 0\n            ])\n        );\n    }\n\n    // Media handler reference box\n    static hdlr(meta: track) {\n        let data = null;\n        if(meta.type === 'audio') {\n            data = MP4.HDLR_AUDIO;\n        } else {\n            data = MP4.HDLR_VIDEO;\n        }\n        return MP4.box(MP4.types.hdlr, data);\n    }\n\n    // Media infomation box\n    static minf(meta: track) {\n        let xmhd = null;\n        if(meta.type === 'audio') {\n            xmhd = MP4.box(MP4.types.smhd, MP4.SMHD);\n        } else {\n            xmhd = MP4.box(MP4.types.vmhd, MP4.VMHD);\n        }\n        return MP4.box(MP4.types.minf, xmhd, MP4.dinf(), MP4.stbl(meta));\n    }\n\n    // Data infomation box\n    static dinf() {\n        const result = MP4.box(MP4.types.dinf, MP4.box(MP4.types.dref, MP4.DREF));\n        return result;\n    }\n\n    // Sample table box\n    static stbl(meta: track) {\n        const result = MP4.box(\n            MP4.types.stbl, // type: stbl\n            MP4.stsd(meta), // Sample Description Table\n            MP4.box(MP4.types.stts, MP4.STTS), // Time-To-Sample\n            MP4.box(MP4.types.stsc, MP4.STSC), // Sample-To-Chunk\n            MP4.box(MP4.types.stsz, MP4.STSZ), // Sample size\n            MP4.box(MP4.types.stco, MP4.STCO) // Chunk offset\n        );\n        return result;\n    }\n\n    // Sample description box\n    static stsd(meta: track) {\n        if(meta.type === 'audio') {\n            if(meta.codec === 'mp3') {\n                return MP4.box(MP4.types.stsd, MP4.STSD_PREFIX, MP4.mp3(meta));\n            }\n            // else: aac -> mp4a\n            return MP4.box(MP4.types.stsd, MP4.STSD_PREFIX, MP4.mp4a(meta));\n        }\n        return MP4.box(MP4.types.stsd, MP4.STSD_PREFIX, MP4.avc1(meta));\n    }\n\n    static mp3(meta: track) {\n        const { channelCount } = meta;\n        const sampleRate = meta.audioSampleRate;\n\n        const data = new Uint8Array([\n            0x00,\n            0x00,\n            0x00,\n            0x00, // reserved(4)\n            0x00,\n            0x00,\n            0x00,\n            0x01, // reserved(2) + data_reference_index(2)\n            0x00,\n            0x00,\n            0x00,\n            0x00, // reserved: 2 * 4 bytes\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            channelCount, // channelCount(2)\n            0x00,\n            0x10, // sampleSize(2)\n            0x00,\n            0x00,\n            0x00,\n            0x00, // reserved(4)\n            (sampleRate >>> 8) & 0xff, // Audio sample rate\n            sampleRate & 0xff,\n            0x00,\n            0x00\n        ]);\n\n        return MP4.box(MP4.types['.mp3'], data);\n    }\n\n    static mp4a(meta: track) {\n        const { channelCount } = meta;\n        const sampleRate = meta.audioSampleRate;\n\n        const data = new Uint8Array([\n            0x00,\n            0x00,\n            0x00,\n            0x00, // reserved(4)\n            0x00,\n            0x00,\n            0x00,\n            0x01, // reserved(2) + data_reference_index(2)\n            0x00,\n            0x00,\n            0x00,\n            0x00, // reserved: 2 * 4 bytes\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            channelCount, // channelCount(2)\n            0x00,\n            0x10, // sampleSize(2)\n            0x00,\n            0x00,\n            0x00,\n            0x00, // reserved(4)\n            (sampleRate >>> 8) & 0xff, // Audio sample rate\n            sampleRate & 0xff,\n            0x00,\n            0x00\n        ]);\n\n        return MP4.box(MP4.types.mp4a, data, MP4.esds(meta));\n    }\n\n    static esds(meta: track) {\n        const config = meta.config || [];\n        const configSize = config.length;\n        const data = new Uint8Array(\n            [\n                0x00,\n                0x00,\n                0x00,\n                0x00, // version 0 + flags\n\n                0x03, // descriptor_type\n                0x17 + configSize, // length3\n                0x00,\n                0x01, // es_id\n                0x00, // stream_priority\n\n                0x04, // descriptor_type\n                0x0f + configSize, // length\n                0x40, // codec: mpeg4_audio\n                0x15, // stream_type: Audio\n                0x00,\n                0x00,\n                0x00, // buffer_size\n                0x00,\n                0x00,\n                0x00,\n                0x00, // maxBitrate\n                0x00,\n                0x00,\n                0x00,\n                0x00, // avgBitrate\n\n                0x05 // descriptor_type\n            ]\n                .concat([configSize])\n                .concat(config)\n                .concat([\n                    0x06,\n                    0x01,\n                    0x02 // GASpecificConfig\n                ])\n        );\n        return MP4.box(MP4.types.esds, data);\n    }\n\n    static avc1(meta: track) {\n        const { avcc } = meta;\n        const width = meta.codecWidth;\n        const height = meta.codecHeight;\n\n        const data = new Uint8Array([\n            0x00,\n            0x00,\n            0x00,\n            0x00, // reserved(4)\n            0x00,\n            0x00,\n            0x00,\n            0x01, // reserved(2) + data_reference_index(2)\n            0x00,\n            0x00,\n            0x00,\n            0x00, // pre_defined(2) + reserved(2)\n            0x00,\n            0x00,\n            0x00,\n            0x00, // pre_defined: 3 * 4 bytes\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            (width >>> 8) & 0xff, // width: 2 bytes\n            width & 0xff,\n            (height >>> 8) & 0xff, // height: 2 bytes\n            height & 0xff,\n            0x00,\n            0x48,\n            0x00,\n            0x00, // horizresolution: 4 bytes\n            0x00,\n            0x48,\n            0x00,\n            0x00, // vertresolution: 4 bytes\n            0x00,\n            0x00,\n            0x00,\n            0x00, // reserved: 4 bytes\n            0x00,\n            0x01, // frame_count\n            0x0a, // strlen\n            0x78,\n            0x71,\n            0x71,\n            0x2f, // compressorname: 32 bytes\n            0x66,\n            0x6c,\n            0x76,\n            0x2e,\n            0x6a,\n            0x73,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x18, // depth\n            0xff,\n            0xff // pre_defined = -1\n        ]);\n        return MP4.box(MP4.types.avc1, data, MP4.box(MP4.types.avcC, avcc));\n    }\n\n    // Movie Extends box\n    static mvex(meta: track) {\n        return MP4.box(MP4.types.mvex, MP4.trex(meta));\n    }\n\n    // Track Extends box\n    static trex(meta: track) {\n        const trackId = meta.id;\n        const data = new Uint8Array([\n            0x00,\n            0x00,\n            0x00,\n            0x00, // version(0) + flags\n            (trackId >>> 24) & 0xff, // track_ID\n            (trackId >>> 16) & 0xff,\n            (trackId >>> 8) & 0xff,\n            trackId & 0xff,\n            0x00,\n            0x00,\n            0x00,\n            0x01, // default_sample_description_index\n            0x00,\n            0x00,\n            0x00,\n            0x00, // default_sample_duration\n            0x00,\n            0x00,\n            0x00,\n            0x00, // default_sample_size\n            0x00,\n            0x01,\n            0x00,\n            0x01 // default_sample_flags\n        ]);\n        return MP4.box(MP4.types.trex, data);\n    }\n\n    // Movie fragment box\n    static moof(track: track, baseMediaDecodeTime: number) {\n        return MP4.box(\n            MP4.types.moof,\n            MP4.mfhd(track.sequenceNumber),\n            MP4.traf(track, baseMediaDecodeTime)\n        );\n    }\n\n    static mfhd(sequenceNumber: number) {\n        const data = new Uint8Array([\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            (sequenceNumber >>> 24) & 0xff, // sequence_number: int32\n            (sequenceNumber >>> 16) & 0xff,\n            (sequenceNumber >>> 8) & 0xff,\n            sequenceNumber & 0xff\n        ]);\n        return MP4.box(MP4.types.mfhd, data);\n    }\n\n    // Track fragment box\n    static traf(track: track, baseMediaDecodeTime: number) {\n        const trackId = track.id;\n\n        // Track fragment header box\n        const tfhd = MP4.box(\n            MP4.types.tfhd,\n            new Uint8Array([\n                0x00,\n                0x00,\n                0x00,\n                0x00, // version(0) & flags\n                (trackId >>> 24) & 0xff, // track_ID\n                (trackId >>> 16) & 0xff,\n                (trackId >>> 8) & 0xff,\n                trackId & 0xff\n            ])\n        );\n        // Track Fragment Decode Time\n        const tfdt = MP4.box(\n            MP4.types.tfdt,\n            new Uint8Array([\n                0x00,\n                0x00,\n                0x00,\n                0x00, // version(0) & flags\n                (baseMediaDecodeTime >>> 24) & 0xff, // baseMediaDecodeTime: int32\n                (baseMediaDecodeTime >>> 16) & 0xff,\n                (baseMediaDecodeTime >>> 8) & 0xff,\n                baseMediaDecodeTime & 0xff\n            ])\n        );\n        const sdtp = MP4.sdtp(track);\n        const trun = MP4.trun(track, sdtp.byteLength + 16 + 16 + 8 + 16 + 8 + 8);\n\n        return MP4.box(MP4.types.traf, tfhd, tfdt, trun, sdtp);\n    }\n\n    // Sample Dependency Type box\n    static sdtp(track: track) {\n        const samples = track.samples || [];\n        const sampleCount = samples.length;\n        const data = new Uint8Array(4 + sampleCount);\n        // 0~4 bytes: version(0) & flags\n        for(let i = 0; i < sampleCount; i++) {\n            const { flags } = samples[i];\n            data[i + 4] = (flags.isLeading << 6) // is_leading: 2 (bit)\n                | (flags.dependsOn << 4) // sample_depends_on\n                | (flags.isDependedOn << 2) // sample_is_depended_on\n                | flags.hasRedundancy; // sample_has_redundancy\n        }\n        return MP4.box(MP4.types.sdtp, data);\n    }\n\n    // Track fragment run box\n    static trun(track: track, offset: number) {\n        const samples = track.samples || [];\n        const sampleCount = samples.length;\n        const dataSize = 12 + 16 * sampleCount;\n        const data = new Uint8Array(dataSize);\n        offset += 8 + dataSize;\n\n        data.set(\n            [\n                0x00,\n                0x00,\n                0x0f,\n                0x01, // version(0) & flags\n                (sampleCount >>> 24) & 0xff, // sample_count\n                (sampleCount >>> 16) & 0xff,\n                (sampleCount >>> 8) & 0xff,\n                sampleCount & 0xff,\n                (offset >>> 24) & 0xff, // data_offset\n                (offset >>> 16) & 0xff,\n                (offset >>> 8) & 0xff,\n                offset & 0xff\n            ],\n            0\n        );\n\n        for(let i = 0; i < sampleCount; i++) {\n            const { duration } = samples[i];\n            const { size } = samples[i];\n            const { flags } = samples[i];\n            const { cts } = samples[i];\n            data.set(\n                [\n                    (duration >>> 24) & 0xff, // sample_duration\n                    (duration >>> 16) & 0xff,\n                    (duration >>> 8) & 0xff,\n                    duration & 0xff,\n                    (size >>> 24) & 0xff, // sample_size\n                    (size >>> 16) & 0xff,\n                    (size >>> 8) & 0xff,\n                    size & 0xff,\n                    (flags.isLeading << 2) | flags.dependsOn, // sample_flags\n                    (flags.isDependedOn << 6) | (flags.hasRedundancy << 4) | flags.isNonSync,\n                    0x00,\n                    0x00, // sample_degradation_priority\n                    (cts >>> 24) & 0xff, // sample_composition_time_offset\n                    (cts >>> 16) & 0xff,\n                    (cts >>> 8) & 0xff,\n                    cts & 0xff\n                ],\n                12 + 16 * i\n            );\n        }\n        return MP4.box(MP4.types.trun, data);\n    }\n\n    static mdat(data: any) {\n        return MP4.box(MP4.types.mdat, data);\n    }\n}\n\nMP4.init();\n\nexport default MP4;\n","class AAC {\n    static getSilentFrame(codec?: string, channelCount?: number) {\n        if(codec === 'mp4a.40.2') {\n            // handle LC-AAC\n            if(channelCount === 1) {\n                return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80]);\n            } if(channelCount === 2) {\n                return new Uint8Array([0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80]);\n            } if(channelCount === 3) {\n                return new Uint8Array([\n                    0x00,\n                    0xc8,\n                    0x00,\n                    0x80,\n                    0x20,\n                    0x84,\n                    0x01,\n                    0x26,\n                    0x40,\n                    0x08,\n                    0x64,\n                    0x00,\n                    0x8e\n                ]);\n            } if(channelCount === 4) {\n                return new Uint8Array([\n                    0x00,\n                    0xc8,\n                    0x00,\n                    0x80,\n                    0x20,\n                    0x84,\n                    0x01,\n                    0x26,\n                    0x40,\n                    0x08,\n                    0x64,\n                    0x00,\n                    0x80,\n                    0x2c,\n                    0x80,\n                    0x08,\n                    0x02,\n                    0x38\n                ]);\n            } if(channelCount === 5) {\n                return new Uint8Array([\n                    0x00,\n                    0xc8,\n                    0x00,\n                    0x80,\n                    0x20,\n                    0x84,\n                    0x01,\n                    0x26,\n                    0x40,\n                    0x08,\n                    0x64,\n                    0x00,\n                    0x82,\n                    0x30,\n                    0x04,\n                    0x99,\n                    0x00,\n                    0x21,\n                    0x90,\n                    0x02,\n                    0x38\n                ]);\n            } if(channelCount === 6) {\n                return new Uint8Array([\n                    0x00,\n                    0xc8,\n                    0x00,\n                    0x80,\n                    0x20,\n                    0x84,\n                    0x01,\n                    0x26,\n                    0x40,\n                    0x08,\n                    0x64,\n                    0x00,\n                    0x82,\n                    0x30,\n                    0x04,\n                    0x99,\n                    0x00,\n                    0x21,\n                    0x90,\n                    0x02,\n                    0x00,\n                    0xb2,\n                    0x00,\n                    0x20,\n                    0x08,\n                    0xe0\n                ]);\n            }\n        } else {\n            // handle HE-AAC (mp4a.40.5 / mp4a.40.29)\n            if(channelCount === 1) {\n                // ffmpeg -y -f lavfi -i \"aevalsrc=0:d=0.05\" -c:a libfdk_aac -profile:a aac_he -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n                return new Uint8Array([\n                    0x1,\n                    0x40,\n                    0x22,\n                    0x80,\n                    0xa3,\n                    0x4e,\n                    0xe6,\n                    0x80,\n                    0xba,\n                    0x8,\n                    0x0,\n                    0x0,\n                    0x0,\n                    0x1c,\n                    0x6,\n                    0xf1,\n                    0xc1,\n                    0xa,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5e\n                ]);\n            } if(channelCount === 2) {\n                // ffmpeg -y -f lavfi -i \"aevalsrc=0|0:d=0.05\" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n                return new Uint8Array([\n                    0x1,\n                    0x40,\n                    0x22,\n                    0x80,\n                    0xa3,\n                    0x5e,\n                    0xe6,\n                    0x80,\n                    0xba,\n                    0x8,\n                    0x0,\n                    0x0,\n                    0x0,\n                    0x0,\n                    0x95,\n                    0x0,\n                    0x6,\n                    0xf1,\n                    0xa1,\n                    0xa,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5e\n                ]);\n            } if(channelCount === 3) {\n                // ffmpeg -y -f lavfi -i \"aevalsrc=0|0|0:d=0.05\" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n                return new Uint8Array([\n                    0x1,\n                    0x40,\n                    0x22,\n                    0x80,\n                    0xa3,\n                    0x5e,\n                    0xe6,\n                    0x80,\n                    0xba,\n                    0x8,\n                    0x0,\n                    0x0,\n                    0x0,\n                    0x0,\n                    0x95,\n                    0x0,\n                    0x6,\n                    0xf1,\n                    0xa1,\n                    0xa,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5e\n                ]);\n            }\n        }\n        return null;\n    }\n}\n\nexport default AAC;\n","import getGlobal from '../../../Utils/getGlobalObject';\n\nconst Browser: Record<string, any> = {};\nconst GG = getGlobal();\n\nfunction detect() {\n    // modified from jquery-browser-plugin\n\n    const ua = GG.navigator.userAgent.toLowerCase();\n\n    const match: any[] | RegExpExecArray = /(edge)\\/([\\w.]+)/.exec(ua)\n        || /(opr)[/]([\\w.]+)/.exec(ua)\n        || /(chrome)[/]([\\w.]+)/.exec(ua)\n        || /(iemobile)[/]([\\w.]+)/.exec(ua)\n        || /(version)(applewebkit)[/]([\\w.]+).*(safari)[/]([\\w.]+)/.exec(ua)\n        || /(webkit)[/]([\\w.]+).*(version)[/]([\\w.]+).*(safari)[/]([\\w.]+)/.exec(ua)\n        || /(webkit)[/]([\\w.]+)/.exec(ua)\n        || /(opera)(?:.*version|)[/]([\\w.]+)/.exec(ua)\n        || /(msie) ([\\w.]+)/.exec(ua)\n        || (ua.indexOf('trident') >= 0 && /(rv)(?::| )([\\w.]+)/.exec(ua))\n        || (ua.indexOf('compatible') < 0 && /(firefox)[/]([\\w.]+)/.exec(ua))\n        || [];\n\n    const platformMatch: any[] | RegExpExecArray = /(ipad)/.exec(ua)\n        || /(ipod)/.exec(ua)\n        || /(windows phone)/.exec(ua)\n        || /(iphone)/.exec(ua)\n        || /(kindle)/.exec(ua)\n        || /(android)/.exec(ua)\n        || /(windows)/.exec(ua)\n        || /(mac)/.exec(ua)\n        || /(linux)/.exec(ua)\n        || /(cros)/.exec(ua)\n        || [];\n\n    const matched: Record<string, any> = {\n        browser: match[5] || match[3] || match[1] || '',\n        version: match[2] || match[4] || '0',\n        majorVersion: match[4] || match[2] || '0',\n        platform: platformMatch[0] || ''\n    };\n\n    const browser: Record<string, any> = {};\n    if(matched.browser) {\n        browser[matched.browser] = true;\n\n        const versionArray = matched.majorVersion.split('.');\n        browser.version = {\n            major: parseInt(matched.majorVersion, 10),\n            string: matched.version\n        };\n        if(versionArray.length > 1) {\n            browser.version.minor = parseInt(versionArray[1], 10);\n        }\n        if(versionArray.length > 2) {\n            browser.version.build = parseInt(versionArray[2], 10);\n        }\n    }\n\n    if(matched.platform) {\n        browser[matched.platform] = true;\n    }\n\n    if(browser.chrome || browser.opr || browser.safari) {\n        browser.webkit = true;\n    }\n\n    // MSIE. IE11 has 'rv' identifer\n    if(browser.rv || browser.iemobile) {\n        if(browser.rv) {\n            delete browser.rv;\n        }\n        const msie = 'msie';\n        matched.browser = msie;\n        browser[msie] = true;\n    }\n\n    // Microsoft Edge\n    if(browser.edge) {\n        delete browser.edge;\n        const msedge = 'msedge';\n        matched.browser = msedge;\n        browser[msedge] = true;\n    }\n\n    // Opera 15+\n    if(browser.opr) {\n        const opera = 'opera';\n        matched.browser = opera;\n        browser[opera] = true;\n    }\n\n    // Stock android browsers are marked as Safari\n    if(browser.safari && browser.android) {\n        const android = 'android';\n        matched.browser = android;\n        browser[android] = true;\n    }\n\n    browser.name = matched.browser;\n    browser.platform = matched.platform;\n\n    Object.keys(Browser).forEach((key) => {\n        delete Browser[key];\n    });\n\n    Object.assign(Browser, browser);\n}\n\ndetect();\n\nexport default Browser;\n","import SampleInfo from '../../../Utils/SampleInfo';\n// Media Segment concept is defined in Media Source Extensions spec.\n// Particularly in ISO BMFF format, an Media Segment contains a moof box followed by a mdat box.\nexport class MediaSegmentInfo {\n    beginDts: number\n\n    endDts: number\n\n    beginPts: number\n\n    endPts: number\n\n    originalBeginDts: number\n\n    originalEndDts: number\n\n    syncPoints: SampleInfo[]\n\n    // SampleInfo[n], for video IDR frames only\n    firstSample: SampleInfo | null\n\n    // SampleInfo\n    lastSample: SampleInfo | null\n\n    // SampleInfo\n    constructor() {\n        this.beginDts = 0;\n        this.endDts = 0;\n        this.beginPts = 0;\n        this.endPts = 0;\n        this.originalBeginDts = 0;\n        this.originalEndDts = 0;\n        this.syncPoints = []; // SampleInfo[n], for video IDR frames only\n        this.firstSample = null; // SampleInfo\n        this.lastSample = null; // SampleInfo\n    }\n\n    appendSyncPoint(sampleInfo: SampleInfo) {\n        // also called Random Access Point\n        sampleInfo.isSyncPoint = true;\n        this.syncPoints.push(sampleInfo);\n    }\n}\n\n// Ordered list for recording video IDR frames, sorted by originalDts\nexport class IDRSampleList {\n    _list: SampleInfo[]\n\n    constructor() {\n        this._list = [];\n    }\n\n    clear() {\n        this._list = [];\n    }\n\n    appendArray(syncPoints: SampleInfo[]) {\n        const list = this._list;\n\n        if(syncPoints.length === 0) {\n            return;\n        }\n\n        if(list.length > 0 && syncPoints[0].originalDts < list[list.length - 1].originalDts) {\n            this.clear();\n        }\n\n        Array.prototype.push.apply(list, syncPoints);\n    }\n\n    getLastSyncPointBeforeDts(dts: number) {\n        if(this._list.length === 0) {\n            return null;\n        }\n\n        const list = this._list;\n        let idx = 0;\n        const last = list.length - 1;\n        let mid = 0;\n        let lbound = 0;\n        let ubound = last;\n\n        if(dts < list[0].dts) {\n            idx = 0;\n            lbound = ubound + 1;\n        }\n\n        while(lbound <= ubound) {\n            mid = lbound + Math.floor((ubound - lbound) / 2);\n            if(mid === last || (dts >= list[mid].dts && dts < list[mid + 1].dts)) {\n                idx = mid;\n                break;\n            } else if(list[mid].dts < dts) {\n                lbound = mid + 1;\n            } else {\n                ubound = mid - 1;\n            }\n        }\n        return this._list[idx];\n    }\n}\n\n// Data structure for recording information of media segments in single track.\nexport class MediaSegmentInfoList {\n    _type: string\n\n    _list: MediaSegmentInfo[]\n\n    _lastAppendLocation: number\n\n    constructor(type: string) {\n        this._type = type;\n        this._list = [];\n        this._lastAppendLocation = -1; // cached last insert location\n    }\n\n    get type() {\n        return this._type;\n    }\n\n    get length() {\n        return this._list.length;\n    }\n\n    isEmpty() {\n        return this._list.length === 0;\n    }\n\n    clear() {\n        this._list = [];\n        this._lastAppendLocation = -1;\n    }\n\n    _searchNearestSegmentBefore(originalBeginDts: any) {\n        const list = this._list;\n        if(list.length === 0) {\n            return -2;\n        }\n        const last = list.length - 1;\n        let mid = 0;\n        let lbound = 0;\n        let ubound = last;\n\n        let idx = 0;\n\n        if(originalBeginDts < list[0].originalBeginDts) {\n            idx = -1;\n            return idx;\n        }\n\n        while(lbound <= ubound) {\n            mid = lbound + Math.floor((ubound - lbound) / 2);\n            const { lastSample } = list[mid];\n            const neworiginalDts = lastSample ? lastSample.originalDts : 0;\n            if(\n                mid === last\n                || (originalBeginDts > neworiginalDts\n                    && originalBeginDts < list[mid + 1].originalBeginDts)\n            ) {\n                idx = mid;\n                break;\n            } else if(list[mid].originalBeginDts < originalBeginDts) {\n                lbound = mid + 1;\n            } else {\n                ubound = mid - 1;\n            }\n        }\n        return idx;\n    }\n\n    _searchNearestSegmentAfter(originalBeginDts: number) {\n        return this._searchNearestSegmentBefore(originalBeginDts) + 1;\n    }\n\n    append(mediaSegmentInfo: MediaSegmentInfo) {\n        const list = this._list;\n        const msi = mediaSegmentInfo;\n        const lastAppendIdx = this._lastAppendLocation;\n        let insertIdx = 0;\n\n        if(\n            lastAppendIdx !== -1\n            && lastAppendIdx < list.length\n            && msi.originalBeginDts >= (list[lastAppendIdx].lastSample as SampleInfo).originalDts\n            && (lastAppendIdx === list.length - 1\n                || (lastAppendIdx < list.length - 1\n                    && msi.originalBeginDts < list[lastAppendIdx + 1].originalBeginDts))\n        ) {\n            insertIdx = lastAppendIdx + 1; // use cached location idx\n        } else if(list.length > 0) {\n            insertIdx = this._searchNearestSegmentBefore(msi.originalBeginDts) + 1;\n        }\n        this._lastAppendLocation = insertIdx;\n        this._list.splice(insertIdx, 0, msi);\n    }\n\n    getLastSegmentBefore(originalBeginDts: number) {\n        const idx = this._searchNearestSegmentBefore(originalBeginDts);\n        if(idx >= 0) {\n            return this._list[idx];\n        }\n        // -1\n        return null;\n    }\n\n    getLastSampleBefore(originalBeginDts: number) {\n        const segment = this.getLastSegmentBefore(originalBeginDts);\n        if(segment != null) {\n            return segment.lastSample;\n        }\n        return null;\n    }\n\n    getLastSyncPointBefore(originalBeginDts: number) {\n        let segmentIdx = this._searchNearestSegmentBefore(originalBeginDts);\n        let { syncPoints } = this._list[segmentIdx];\n        while(syncPoints.length === 0 && segmentIdx > 0) {\n            segmentIdx--;\n            ({ syncPoints } = this._list[segmentIdx]);\n        }\n        if(syncPoints.length > 0) {\n            return syncPoints[syncPoints.length - 1];\n        }\n        return null;\n    }\n}\n","import EventEmitter from 'eventemitter3';\nimport Log from '../../../Utils/Logger';\nimport Events from '../Events/index';\nimport MP4 from './mp4-generator';\nimport AAC from './aac-silent';\nimport Browser from './browser';\nimport { MediaSegmentInfo, MediaSegmentInfoList } from './media-segment-info';\nimport SampleInfo from '../../../Utils/SampleInfo';\nimport {\n    track, audioTrack, videoTrack, avcSample, aacSample, AvcSampleData, DetailAacSample\n} from '../Interface';\n\n// Fragmented mp4 remuxer\nclass MP4Remuxer {\n    TAG = 'MP4Remuxer'\n\n    emitter: EventEmitter\n\n    _config: Record<string, any>\n\n    _isLive: boolean\n\n    _dtsBase: number\n\n    _dtsBaseInited: boolean\n\n    _audioDtsBase: number\n\n    _videoDtsBase: number\n\n    _audioNextDts: number | undefined\n\n    _videoNextDts: number | undefined\n\n    _audioStashedLastSample: aacSample | null\n\n    _videoStashedLastSample: AvcSampleData | null\n\n    _audioMeta: track | null\n\n    _videoMeta: track | null\n\n    _audioSegmentInfoList: MediaSegmentInfoList | null\n\n    _videoSegmentInfoList: MediaSegmentInfoList | null\n\n    _onInitSegment: null\n\n    _onMediaSegment: null\n\n    // Workaround for chrome < 50: Always force first sample as a Random Access Point in media segment\n    // see https://bugs.chromium.org/p/chromium/issues/detail?id=229412\n    _forceFirstIDR: boolean\n\n    // Workaround for IE11/Edge: Fill silent aac frame after keyframe-seeking\n    // Make audio beginDts equals with video beginDts, in order to fix seek freeze\n    _fillSilentAfterSeek: boolean\n\n    // While only FireFox supports 'audio/mp4, codecs=\"mp3\"', use 'audio/mpeg' for chrome, safari, ...\n    _mp3UseMpegAudio: boolean\n\n    _fillAudioTimestampGap: boolean\n\n    _audioNextRefDts: any;\n\n    constructor(emitter: EventEmitter, config: Record<string, any>) {\n        this.TAG = 'MP4Remuxer';\n\n        this.emitter = emitter;\n        this._config = config;\n        this._isLive = config.isLive === true;\n\n        this._dtsBase = -1;\n        this._dtsBaseInited = false;\n        this._audioDtsBase = Infinity;\n        this._videoDtsBase = Infinity;\n        this._audioNextRefDts = undefined;\n        this._audioNextDts = undefined;\n        this._videoNextDts = undefined;\n        this._audioStashedLastSample = null;\n        this._videoStashedLastSample = null;\n        this._audioMeta = null;\n        this._videoMeta = null;\n\n        this._audioSegmentInfoList = new MediaSegmentInfoList('audio');\n        this._videoSegmentInfoList = new MediaSegmentInfoList('video');\n        // Workaround for chrome < 50: Always force first sample as a Random Access Point in media segment\n        // see https://bugs.chromium.org/p/chromium/issues/detail?id=229412\n        this._forceFirstIDR = (Browser.chrome && (Browser.version.major < 50 || (Browser.version.major === 50 && Browser.version.build < 2661)));\n\n        // Workaround for IE11/Edge: Fill silent aac frame after keyframe-seeking\n        // Make audio beginDts equals with video beginDts, in order to fix seek freeze\n        this._fillSilentAfterSeek = Browser.msedge || Browser.msie;\n\n        // While only FireFox supports 'audio/mp4, codecs=\"mp3\"', use 'audio/mpeg' for chrome, safari, ...\n        this._mp3UseMpegAudio = !Browser.firefox;\n\n        this._fillAudioTimestampGap = this._config.fixAudioTimestampGap;\n    }\n\n    destroy() {\n        this._dtsBase = -1;\n        this._dtsBaseInited = false;\n        this._audioMeta = null;\n        this._videoMeta = null;\n        this._audioSegmentInfoList && this._audioSegmentInfoList.clear();\n        this._audioSegmentInfoList = null;\n        this._videoSegmentInfoList && this._videoSegmentInfoList.clear();\n        this._videoSegmentInfoList = null;\n    }\n\n    insertDiscontinuity() {\n        this._videoNextDts = undefined;\n        this._audioNextDts = undefined;\n    }\n\n    seek() {\n        this._audioStashedLastSample = null;\n        this._videoStashedLastSample = null;\n        this._videoSegmentInfoList && this._videoSegmentInfoList.clear();\n        this._audioSegmentInfoList && this._audioSegmentInfoList.clear();\n    }\n\n    remux(audioTrack: audioTrack, videoTrack: videoTrack) {\n        if(!this._dtsBaseInited) {\n            this._calculateDtsBase(audioTrack, videoTrack);\n        }\n        this._remuxVideo(videoTrack);\n        this._remuxAudio(audioTrack);\n    }\n\n    _onTrackMetadataReceived(type: string, metadata: track) {\n        let metabox = null;\n        let container = 'mp4';\n        let { codec } = metadata;\n\n        if(type === 'audio') {\n            this._audioMeta = metadata;\n            if(metadata.codec === 'mp3' && this._mp3UseMpegAudio) {\n                // 'audio/mpeg' for MP3 audio track\n                container = 'mpeg';\n                codec = '';\n                metabox = new Uint8Array();\n            } else {\n                // 'audio/mp4, codecs=\"codec\"'\n                metabox = MP4.generateInitSegment(metadata);\n            }\n        } else if(type === 'video') {\n            this._videoMeta = metadata;\n            metabox = MP4.generateInitSegment(metadata);\n        } else {\n            return;\n        }\n\n        this.emitter.emit(Events.INIT_SEGMENT,\n            type,\n            {\n                type,\n                data: metabox.buffer,\n                codec,\n                container: `${type}/${container}`,\n                mediaDuration: metadata.duration // in timescale 1000 (milliseconds)\n            });\n    }\n\n    /**\n     * 从音频序列和视频序列中取他们第一个sample的dts比较, 最小的为dts基准值\n     * @param audioTrack 音频序列\n     * @param videoTrack 视频序列\n     */\n    _calculateDtsBase(audioTrack: audioTrack, videoTrack: videoTrack) {\n        if(this._dtsBaseInited) {\n            return;\n        }\n\n        if(audioTrack.samples && audioTrack.samples.length) {\n            this._audioDtsBase = audioTrack.samples[0].dts;\n        }\n        if(videoTrack.samples && videoTrack.samples.length) {\n            this._videoDtsBase = videoTrack.samples[0].dts;\n        }\n\n        this._dtsBase = Math.min(this._audioDtsBase, this._videoDtsBase);\n        this._dtsBaseInited = true;\n    }\n\n    flushStashedSamples() {\n        const videoSample = this._videoStashedLastSample;\n        const audioSample = this._audioStashedLastSample;\n\n        const videoTrack: videoTrack = {\n            type: 'video',\n            id: 1,\n            sequenceNumber: 0,\n            samples: [],\n            length: 0\n        };\n\n        if(videoSample != null) {\n            videoTrack.samples.push(videoSample);\n            videoTrack.length = videoSample.length;\n        }\n\n        const audioTrack: audioTrack = {\n            type: 'audio',\n            id: 2,\n            sequenceNumber: 0,\n            samples: [],\n            length: 0\n        };\n\n        if(audioSample != null) {\n            audioTrack.samples.push(audioSample);\n            audioTrack.length = audioSample.length;\n        }\n\n        this._videoStashedLastSample = null;\n        this._audioStashedLastSample = null;\n\n        this._remuxVideo(videoTrack, true);\n        this._remuxAudio(audioTrack, true);\n    }\n\n    _remuxAudio(audioTrack: audioTrack, force?: boolean) {\n        if(this._audioMeta == null) {\n            return;\n        }\n\n        const track = audioTrack;\n        const { samples } = track;\n        let dtsCorrection;\n        let firstDts = -1;\n        let lastDts = -1;\n        const lastPts = -1;\n        const { refSampleDuration } = this._audioMeta;\n\n        const mpegRawTrack = this._audioMeta.codec === 'mp3' && this._mp3UseMpegAudio;\n        const firstSegmentAfterSeek = this._dtsBaseInited && this._audioNextDts === undefined;\n\n        let insertPrefixSilentFrame = false;\n\n        if(!samples || samples.length === 0) {\n            return;\n        }\n\n        if(samples.length === 1 && !force) {\n            // If [sample count in current batch] === 1 && (force != true)\n            // Ignore and keep in demuxer's queue\n            return;\n        } // else if (force === true) do remux\n\n        let offset = 0;\n        let mdatbox = null;\n        let mdatBytes = 0;\n\n        // calculate initial mdat size\n        if(mpegRawTrack) {\n            // for raw mpeg buffer\n            offset = 0;\n            mdatBytes = track.length;\n        } else {\n            // for fmp4 mdat box\n            offset = 8; // size + type\n            mdatBytes = 8 + track.length;\n        }\n\n\n        let lastSample = null;\n\n        // Pop the lastSample and waiting for stash\n        if(samples.length > 1) {\n            lastSample = samples.pop();\n            lastSample && (mdatBytes -= lastSample.length);\n        }\n\n        // Insert [stashed lastSample in the previous batch] to the front\n        if(this._audioStashedLastSample != null) {\n            const sample = this._audioStashedLastSample;\n            this._audioStashedLastSample = null;\n            samples.unshift(sample);\n            mdatBytes += sample.length;\n        }\n\n        // Stash the lastSample of current batch, waiting for next batch\n        if(lastSample != null) {\n            this._audioStashedLastSample = lastSample;\n        }\n\n\n        const firstSampleOriginalDts = samples[0].dts - this._dtsBase;\n\n        // calculate dtsCorrection\n        if(this._audioNextDts) {\n            dtsCorrection = firstSampleOriginalDts - this._audioNextDts;\n        } else { // this._audioNextDts == undefined\n            if(this._audioSegmentInfoList && this._audioSegmentInfoList.isEmpty()) {\n                dtsCorrection = 0;\n                if(this._fillSilentAfterSeek && this._videoSegmentInfoList && !this._videoSegmentInfoList.isEmpty()) {\n                    if(this._audioMeta.originalCodec !== 'mp3') {\n                        insertPrefixSilentFrame = true;\n                    }\n                }\n            } else {\n                const lastSample = this._audioSegmentInfoList!.getLastSampleBefore(firstSampleOriginalDts);\n                if(lastSample != null) {\n                    let distance = (firstSampleOriginalDts - (lastSample.originalDts + lastSample.duration));\n                    if(distance <= 3) {\n                        distance = 0;\n                    }\n                    const expectedDts = lastSample.dts + lastSample.duration + distance;\n                    dtsCorrection = firstSampleOriginalDts - expectedDts;\n                } else { // lastSample == null, cannot found\n                    dtsCorrection = 0;\n                }\n            }\n        }\n\n        if(insertPrefixSilentFrame) {\n            // align audio segment beginDts to match with current video segment's beginDts\n            const firstSampleDts = firstSampleOriginalDts - dtsCorrection;\n            const videoSegment = this._videoSegmentInfoList!.getLastSegmentBefore(firstSampleOriginalDts);\n            if(videoSegment != null && videoSegment.beginDts < firstSampleDts) {\n                const silentUnit = AAC.getSilentFrame(this._audioMeta.originalCodec, this._audioMeta.channelCount);\n                if(silentUnit) {\n                    const dts = videoSegment.beginDts;\n                    const silentFrameDuration = firstSampleDts - videoSegment.beginDts;\n                    Log.info(this.TAG, `InsertPrefixSilentAudio: dts: ${dts}, duration: ${silentFrameDuration}`);\n                    samples.unshift({\n                        unit: silentUnit, dts, pts: dts, cts: 0, length: silentUnit.byteLength\n                    });\n                    mdatBytes += silentUnit.byteLength;\n                } // silentUnit == null: Cannot generate, skip\n            } else {\n                insertPrefixSilentFrame = false;\n            }\n        }\n\n        let mp4Samples: Array<DetailAacSample> = [];\n\n        // Correct dts for each sample, and calculate sample duration. Then output to mp4Samples\n        for(let i = 0; i < samples.length; i++) {\n            const sample = samples[i];\n            const { unit } = sample;\n            const originalDts = sample.dts - this._dtsBase;\n            let dts = originalDts;\n            let needFillSilentFrames = false;\n            let silentFrames = null;\n            let sampleDuration = 0;\n\n            if(originalDts < -0.001) {\n                continue; // pass the first sample with the invalid dts\n            }\n\n            if(this._audioMeta.codec !== 'mp3') {\n                // for AAC codec, we need to keep dts increase based on refSampleDuration\n                let curRefDts = originalDts;\n                const maxAudioFramesDrift = 3;\n                if(this._audioNextRefDts) {\n                    curRefDts = this._audioNextRefDts;\n                }\n\n                const delta = originalDts - curRefDts;\n                if(delta <= -maxAudioFramesDrift * refSampleDuration) {\n                    // If we're overlapping by more than maxAudioFramesDrift number of frame, drop this sample\n                    Log.warn(this.TAG, `Dropping 1 audio frame (originalDts: ${originalDts} ms ,curRefDts: ${curRefDts} ms)  due to delta: ${delta} ms overlap.`);\n                    continue;\n                } else if(delta >= maxAudioFramesDrift * refSampleDuration && this._fillAudioTimestampGap && !Browser.safari) {\n                    // Silent frame generation, if large timestamp gap detected && config.fixAudioTimestampGap\n                    needFillSilentFrames = true;\n                    // We need to insert silent frames to fill timestamp gap\n                    const frameCount = Math.floor(delta / refSampleDuration);\n                    Log.warn(this.TAG, `Large audio timestamp gap detected, may cause AV sync to drift. Silent frames will be generated to avoid unsync. originalDts: ${originalDts} ms, curRefDts: ${curRefDts} ms, delta: ${Math.round(delta)} ms, generate: ${frameCount} frames`);\n                    dts = Math.floor(curRefDts);\n                    sampleDuration = Math.floor(curRefDts + refSampleDuration) - dts;\n                    curRefDts += refSampleDuration;\n\n                    let silentUnit = AAC.getSilentFrame(this._audioMeta.originalCodec, this._audioMeta.channelCount);\n                    if(silentUnit == null) {\n                        Log.warn(this.TAG, `Unable to generate silent frame for ${this._audioMeta.originalCodec} with ${this._audioMeta.channelCount} channels, repeat last frame`);\n                        // Repeat last frame\n                        silentUnit = unit;\n                    }\n                    silentFrames = [];\n\n                    for(let j = 0; j < frameCount; j++) {\n                        const intDts = Math.floor(curRefDts); // change to integer\n                        const intDuration = Math.floor(curRefDts + refSampleDuration) - intDts;\n                        const frame = {\n                            dts: intDts,\n                            pts: intDts,\n                            cts: 0,\n                            unit: silentUnit,\n                            size: silentUnit.byteLength,\n                            duration: intDuration, // wait for next sample\n                            originalDts,\n                            flags: {\n                                isLeading: 0,\n                                dependsOn: 1,\n                                isDependedOn: 0,\n                                hasRedundancy: 0\n                            }\n                        };\n                        silentFrames.push(frame);\n                        mdatBytes += unit.byteLength;\n                        curRefDts += refSampleDuration;\n                    }\n\n                    this._audioNextRefDts = curRefDts + refSampleDuration;\n                } else {\n                    dts = Math.floor(curRefDts);\n                    sampleDuration = Math.floor(curRefDts + refSampleDuration) - dts;\n                    this._audioNextRefDts = curRefDts + refSampleDuration;\n                }\n            } else {\n                // keep the original dts calculate algorithm for mp3\n                dts = originalDts - dtsCorrection;\n\n                if(i !== samples.length - 1) {\n                    const nextDts = samples[i + 1].dts - this._dtsBase - dtsCorrection;\n                    sampleDuration = nextDts - dts;\n                } else { // the last sample\n                    if(lastSample != null) { // use stashed sample's dts to calculate sample duration\n                        const nextDts = lastSample.dts - this._dtsBase - dtsCorrection;\n                        sampleDuration = nextDts - dts;\n                    } else if(mp4Samples.length >= 1) { // use second last sample duration\n                        sampleDuration = mp4Samples[mp4Samples.length - 1].duration;\n                    } else { // the only one sample, use reference sample duration\n                        sampleDuration = Math.floor(refSampleDuration);\n                    }\n                }\n            }\n\n            if(firstDts === -1) {\n                firstDts = dts;\n            }\n\n            mp4Samples.push({\n                dts,\n                pts: dts,\n                cts: 0,\n                unit: sample.unit,\n                size: sample.unit.byteLength,\n                duration: sampleDuration,\n                originalDts,\n                flags: {\n                    isLeading: 0,\n                    dependsOn: 1,\n                    isDependedOn: 0,\n                    hasRedundancy: 0\n                }\n            });\n\n            if(needFillSilentFrames) {\n                // Silent frames should be inserted after wrong-duration frame\n                // mp4Samples.push.apply(mp4Samples, silentFrames);\n                mp4Samples = [...mp4Samples, ...(silentFrames as any)];\n            }\n        }\n\n        if(mp4Samples.length === 0) { // no samples need to remux\n            track.samples = [];\n            track.length = 0;\n            return;\n        }\n\n        // allocate mdatbox\n        if(mpegRawTrack) {\n            // allocate for raw mpeg buffer\n            mdatbox = new Uint8Array(mdatBytes);\n        } else {\n            // allocate for fmp4 mdat box\n            mdatbox = new Uint8Array(mdatBytes);\n            // size field\n            mdatbox[0] = (mdatBytes >>> 24) & 0xFF;\n            mdatbox[1] = (mdatBytes >>> 16) & 0xFF;\n            mdatbox[2] = (mdatBytes >>> 8) & 0xFF;\n            mdatbox[3] = (mdatBytes) & 0xFF;\n            // type field (fourCC)\n            mdatbox.set(MP4.types.mdat, 4);\n        }\n\n        // Write samples into mdatbox\n        for(let i = 0; i < mp4Samples.length; i++) {\n            const { unit } = mp4Samples[i];\n            mdatbox.set(unit, offset);\n            offset += unit.byteLength;\n        }\n\n        const latest = mp4Samples[mp4Samples.length - 1];\n        lastDts = latest.dts + latest.duration;\n        this._audioNextDts = lastDts;\n\n        // fill media segment info & add to info list\n        const info = new MediaSegmentInfo();\n        info.beginDts = firstDts;\n        info.endDts = lastDts;\n        info.beginPts = firstDts;\n        info.endPts = lastDts;\n        info.originalBeginDts = mp4Samples[0].originalDts;\n        info.originalEndDts = latest.originalDts + latest.duration;\n        info.firstSample = new SampleInfo(mp4Samples[0].dts,\n            mp4Samples[0].pts,\n            mp4Samples[0].duration,\n            mp4Samples[0].originalDts,\n            false);\n        info.lastSample = new SampleInfo(latest.dts,\n            latest.pts,\n            latest.duration,\n            latest.originalDts,\n            false);\n        if(!this._isLive) {\n            this._audioSegmentInfoList!.append(info);\n        }\n\n        track.samples = mp4Samples as any;\n        track.sequenceNumber++;\n\n        let moofbox = null;\n\n        if(mpegRawTrack) {\n            // Generate empty buffer, because useless for raw mpeg\n            moofbox = new Uint8Array();\n        } else {\n            // Generate moof for fmp4 segment\n            moofbox = MP4.moof(track, firstDts);\n        }\n\n        track.samples = [];\n        track.length = 0;\n\n        let segment;\n        if(mpegRawTrack && firstSegmentAfterSeek) {\n            // For MPEG audio stream in MSE, if seeking occurred, before appending new buffer\n            // We need explicitly set timestampOffset to the desired point in timeline for mpeg SourceBuffer.\n            segment = {\n                type: 'audio',\n                data: this._mergeBoxes(moofbox, mdatbox).buffer,\n                sampleCount: mp4Samples.length,\n                info,\n                timestampOffset: firstDts\n            };\n        } else {\n            segment = {\n                type: 'audio',\n                data: this._mergeBoxes(moofbox, mdatbox).buffer,\n                sampleCount: mp4Samples.length,\n                info,\n            };\n        }\n        this.emitter.emit(Events.MEDIA_SEGMENT, 'audio', segment);\n        // this._onMediaSegment('audio', segment)\n    }\n\n    _remuxVideo(videoTrack: videoTrack, force?: boolean) {\n        if(this._videoMeta == null) {\n            return;\n        }\n\n        const track = videoTrack;\n        const { samples } = track;\n        let dtsCorrection;\n        let firstDts = -1;\n        let lastDts = -1;\n        let firstPts = -1;\n        let lastPts = -1;\n\n        if(!samples || samples.length === 0) {\n            return;\n        }\n        if(samples.length === 1 && !force) {\n            // If [sample count in current batch] === 1 && (force != true)\n            // Ignore and keep in demuxer's queue\n            return;\n        } // else if (force === true) do remux\n\n        let offset = 8;\n        let mdatbox = null;\n        let mdatBytes = 8 + videoTrack.length;\n\n        let lastSample = null;\n\n        // Pop the lastSample and waiting for stash\n        if(samples.length > 1) {\n            lastSample = samples.pop();\n            lastSample && (mdatBytes -= lastSample.length);\n        }\n\n        // Insert [stashed lastSample in the previous batch] to the front\n        if(this._videoStashedLastSample != null) {\n            const sample = this._videoStashedLastSample;\n            this._videoStashedLastSample = null;\n            samples.unshift(sample);\n            mdatBytes += sample.length;\n        }\n\n        // Stash the lastSample of current batch, waiting for next batch\n        if(lastSample != null) {\n            this._videoStashedLastSample = lastSample;\n        }\n\n        const firstSampleOriginalDts = samples[0].dts - this._dtsBase;\n\n        // calculate dtsCorrection\n        if(this._videoNextDts) {\n            dtsCorrection = firstSampleOriginalDts - this._videoNextDts;\n        } else {\n            // this._videoNextDts == undefined\n            if(this._videoSegmentInfoList && this._videoSegmentInfoList.isEmpty()) {\n                dtsCorrection = 0;\n            } else {\n                const lastSample = this._videoSegmentInfoList\n                    && this._videoSegmentInfoList.getLastSampleBefore(firstSampleOriginalDts);\n                if(lastSample != null) {\n                    let distance = firstSampleOriginalDts - (lastSample.originalDts + lastSample.duration);\n                    if(distance <= 3) {\n                        distance = 0;\n                    }\n                    const expectedDts = lastSample.dts + lastSample.duration + distance;\n                    dtsCorrection = firstSampleOriginalDts - expectedDts;\n                } else {\n                    // lastSample == null, cannot found\n                    dtsCorrection = 0;\n                }\n            }\n        }\n\n        const info = new MediaSegmentInfo();\n        const mp4Samples = [];\n\n        // Correct dts for each sample, and calculate sample duration. Then output to mp4Samples\n        for(let i = 0; i < samples.length; i++) {\n            const sample = samples[i];\n            const originalDts = sample.dts - this._dtsBase;\n            const { isKeyframe } = sample;\n            const dts = originalDts - dtsCorrection;\n            const { cts } = sample;\n            const pts = dts + cts;\n\n            if(firstDts === -1) {\n                firstDts = dts;\n                firstPts = pts;\n            }\n\n            let sampleDuration = 0;\n\n            if(i !== samples.length - 1) {\n                const nextDts = samples[i + 1].dts - this._dtsBase - dtsCorrection;\n                sampleDuration = nextDts - dts;\n            } else {\n                // the last sample\n                if(lastSample != null) {\n                    // use stashed sample's dts to calculate sample duration\n                    const nextDts = lastSample.dts - this._dtsBase - dtsCorrection;\n                    sampleDuration = nextDts - dts;\n                } else if(mp4Samples.length >= 1) {\n                    // use second last sample duration\n                    sampleDuration = mp4Samples[mp4Samples.length - 1].duration;\n                } else {\n                    // the only one sample, use reference sample duration\n                    sampleDuration = Math.floor(this._videoMeta.refSampleDuration);\n                }\n            }\n\n            if(isKeyframe) {\n                const syncPoint = new SampleInfo(dts, pts, sampleDuration, sample.dts, true);\n                syncPoint.fileposition = <number>sample.fileposition;\n                info.appendSyncPoint(syncPoint);\n            }\n\n            mp4Samples.push({\n                dts,\n                pts,\n                cts,\n                isKeyframe,\n                originalDts,\n                units: sample.units,\n                size: sample.length,\n                duration: sampleDuration,\n                flags: {\n                    isLeading: 0,\n                    dependsOn: isKeyframe ? 2 : 1,\n                    isDependedOn: isKeyframe ? 1 : 0,\n                    hasRedundancy: 0,\n                    isNonSync: isKeyframe ? 0 : 1\n                }\n            });\n        }\n\n        // allocate mdatbox\n        mdatbox = new Uint8Array(mdatBytes);\n        mdatbox[0] = (mdatBytes >>> 24) & 0xff;\n        mdatbox[1] = (mdatBytes >>> 16) & 0xff;\n        mdatbox[2] = (mdatBytes >>> 8) & 0xff;\n        mdatbox[3] = mdatBytes & 0xff;\n        mdatbox.set(MP4.types.mdat, 4);\n\n        // Write samples into mdatbox\n        for(let i = 0; i < mp4Samples.length; i++) {\n            const { units } = mp4Samples[i];\n            while(units.length) {\n                const unit = units.shift();\n                const { data } = unit!;\n                mdatbox.set(data, offset);\n                offset += data.byteLength;\n            }\n        }\n\n        const latest = mp4Samples[mp4Samples.length - 1];\n        lastDts = latest.dts + latest.duration;\n        lastPts = latest.pts + latest.duration;\n        this._videoNextDts = lastDts;\n\n        // fill media segment info & add to info list\n        info.beginDts = firstDts;\n        info.endDts = lastDts;\n        info.beginPts = firstPts;\n        info.endPts = lastPts;\n        info.originalBeginDts = mp4Samples[0].originalDts;\n        info.originalEndDts = latest.originalDts + latest.duration;\n        info.firstSample = new SampleInfo(\n            mp4Samples[0].dts,\n            mp4Samples[0].pts,\n            mp4Samples[0].duration,\n            mp4Samples[0].originalDts,\n            mp4Samples[0].isKeyframe\n        );\n        info.lastSample = new SampleInfo(\n            latest.dts,\n            latest.pts,\n            latest.duration,\n            latest.originalDts,\n            latest.isKeyframe\n        );\n        if(!this._isLive) {\n            this._videoSegmentInfoList && this._videoSegmentInfoList.append(info);\n        }\n\n        track.samples = mp4Samples as Array<any>;\n        track.sequenceNumber++;\n\n        // workaround for chrome < 50: force first sample as a random access point\n        // see https://bugs.chromium.org/p/chromium/issues/detail?id=229412\n        if(this._forceFirstIDR) {\n            const { flags } = mp4Samples[0];\n            flags.dependsOn = 2;\n            flags.isNonSync = 0;\n        }\n\n        const moofbox = MP4.moof(track, firstDts);\n        track.samples = [];\n        track.length = 0;\n        this.emitter.emit(Events.MEDIA_SEGMENT,\n            'video',\n            {\n                type: 'video',\n                data: this._mergeBoxes(moofbox, mdatbox).buffer,\n                sampleCount: mp4Samples.length,\n                info\n            });\n    }\n\n    /**\n     * 将两个MP4 BOX合并成一个 Uint8Array 并返回\n     * @param moof moof 盒子\n     * @param mdat mdat盒子\n     */\n    _mergeBoxes(moof: Uint8Array, mdat: Uint8Array): Uint8Array {\n        const result = new Uint8Array(moof.byteLength + mdat.byteLength);\n        result.set(moof, 0);\n        result.set(mdat, moof.byteLength);\n        return result;\n    }\n}\n\nexport default MP4Remuxer;\n","import EventEmitter from 'eventemitter3';\nimport {\n    ProbeData,\n    ScriptData,\n    FrameRate,\n    track,\n    audioTrack,\n    videoTrack,\n    KeyframesData,\n    AacAudioData,\n    AacAudioDataPacket,\n    Mp3AudioData,\n    AvcSampleData,\n    AudioMediaData,\n    VideoMediaData\n} from '../Interface';\nimport AMF from './AmfParser';\nimport SPSParser from './SpsParser';\nimport Log from '../../../Utils/Logger';\nimport Events from '../Events/index';\nimport { ErrorTypes, ErrorDetails } from '../errors';\nimport MediaInfo from '../../../Utils/media-info';\nimport MP4Remuxer from '../Remuxer/mp4-remuxer';\nimport { NALUnit } from '../../TSCodec/TSCodecInterface';\nimport getGlobal from '../../../Utils/getGlobalObject';\n\nconst GG = getGlobal();\n\nfunction ReadBig32(array: Uint8Array, index: number) {\n    return (\n        (array[index] << 24) | (array[index + 1] << 16) | (array[index + 2] << 8) | array[index + 3]\n    );\n}\n/**\n * FLV 文件解码器总输出\n */\nclass FLVDemuxer {\n    Tag: string\n\n    type: string\n\n    _dataOffset: number | undefined\n\n    _littleEndian: boolean\n\n    _firstParse: boolean\n\n    _dispatch: boolean\n\n    _hasAudio: boolean | undefined\n\n    _hasVideo: boolean | undefined\n\n    _hasAudioFlagOverrided: boolean\n\n    _hasVideoFlagOverrided: boolean\n\n    _audioInitialMetadataDispatched: boolean\n\n    _videoInitialMetadataDispatched: boolean\n\n    _metadata: ScriptData | null\n\n    _mediaInfo: MediaInfo\n\n    _audioMetadata: track | null\n\n    _videoMetadata: track | null\n\n    _naluLengthSize: number\n\n    _timestampBase: number\n\n    _timescale: number\n\n    _duration: number\n\n    _durationOverrided: boolean\n\n    _referenceFrameRate: FrameRate\n\n    _flvSoundRateTable: number[]\n\n    _mpegSamplingRates: number[]\n\n    _mpegAudioV10SampleRateTable: number[]\n\n    _mpegAudioV20SampleRateTable: number[]\n\n    _mpegAudioV25SampleRateTable: number[]\n\n    _mpegAudioL1BitRateTable: number[]\n\n    _mpegAudioL2BitRateTable: number[]\n\n    _mpegAudioL3BitRateTable: number[]\n\n    _videoTrack: videoTrack\n\n    _audioTrack: audioTrack\n\n    _onError: Function | null\n\n    eventEmitter: EventEmitter\n\n    remuxer: MP4Remuxer\n\n    config: Record<string, any>\n\n    constructor(data: ArrayBuffer, emitter: EventEmitter, config: Record<string, any>) {\n        const probeData: ProbeData = FLVDemuxer.probe(data);\n        this.eventEmitter = emitter;\n        this.Tag = 'FLVCodec';\n        this.type = 'FLVCodec';\n        this.config = config;\n        this.remuxer = new MP4Remuxer(this.eventEmitter, this.config);\n\n        this._onError = null;\n\n        this._dataOffset = probeData.dataOffset;\n        this._firstParse = true;\n        this._dispatch = false;\n\n        this._hasAudio = probeData.hasAudioTrack;\n        this._hasVideo = probeData.hasVideoTrack;\n\n        this._hasAudioFlagOverrided = false;\n        this._hasVideoFlagOverrided = false;\n\n        this._audioInitialMetadataDispatched = false;\n        this._videoInitialMetadataDispatched = false;\n\n        this._mediaInfo = new MediaInfo();\n        this._mediaInfo.hasAudio = this._hasAudio;\n        this._mediaInfo.hasVideo = this._hasVideo;\n        this._metadata = null;\n        this._audioMetadata = null;\n        this._videoMetadata = null;\n\n        this._naluLengthSize = 4;\n        this._timestampBase = 0; // int32, in milliseconds\n        this._timescale = 1000;\n        this._duration = 0; // int32, in milliseconds\n        this._durationOverrided = false;\n        this._referenceFrameRate = {\n            fixed: true,\n            fps: 23.976,\n            fpsNum: 23976,\n            fpsDen: 1000\n        };\n\n        this._flvSoundRateTable = [5500, 11025, 22050, 44100, 48000];\n\n        this._mpegSamplingRates = [\n            96000,\n            88200,\n            64000,\n            48000,\n            44100,\n            32000,\n            24000,\n            22050,\n            16000,\n            12000,\n            11025,\n            8000,\n            7350\n        ];\n        // 音频采样率解释 https://baike.baidu.com/item/%E9%9F%B3%E9%A2%91%E9%87%87%E6%A0%B7%E7%8E%87/9023551?fr=aladdin\n        this._mpegAudioV10SampleRateTable = [44100, 48000, 32000, 0];\n        this._mpegAudioV20SampleRateTable = [22050, 24000, 16000, 0];\n        this._mpegAudioV25SampleRateTable = [11025, 12000, 8000, 0];\n\n        this._mpegAudioL1BitRateTable = [\n            0,\n            32,\n            64,\n            96,\n            128,\n            160,\n            192,\n            224,\n            256,\n            288,\n            320,\n            352,\n            384,\n            416,\n            448,\n            -1\n        ];\n        this._mpegAudioL2BitRateTable = [\n            0,\n            32,\n            48,\n            56,\n            64,\n            80,\n            96,\n            112,\n            128,\n            160,\n            192,\n            224,\n            256,\n            320,\n            384,\n            -1\n        ];\n        this._mpegAudioL3BitRateTable = [\n            0,\n            32,\n            40,\n            48,\n            56,\n            64,\n            80,\n            96,\n            112,\n            128,\n            160,\n            192,\n            224,\n            256,\n            320,\n            -1\n        ];\n\n        this._videoTrack = {\n            type: 'video', id: 1, sequenceNumber: 0, samples: [], length: 0\n        };\n        this._audioTrack = {\n            type: 'audio', id: 2, sequenceNumber: 0, samples: [], length: 0\n        };\n\n        const getLittleEndian = () => {\n            const buf: ArrayBuffer = new ArrayBuffer(2);\n            new DataView(buf).setInt16(0, 256, true); // little-endian write\n            return new Int16Array(buf)[0] === 256; // platform-spec read, if equal then LE\n        };\n        this._littleEndian = getLittleEndian();\n    }\n\n    /**\n     * 添加数据\n     * @param chunk loader给的数据\n     */\n    parseChunks(chunk: ArrayBuffer, byteStart: number): number {\n        let offset = 0;\n        const le = this._littleEndian;\n\n        if(byteStart === 0) {\n            // FLV header 部分的 buffer\n            if(chunk.byteLength > 13) {\n                const probeData: ProbeData = FLVDemuxer.probe(chunk);\n                offset = probeData.dataOffset || 0;\n            } else {\n                return 0;\n            }\n        }\n\n        if(this._firstParse) {\n            // handle PreviousTagSize0 before Tag1\n            this._firstParse = false;\n            if(byteStart + offset !== this._dataOffset) {\n                Log.warn(this.Tag, 'First time parsing but chunk byteStart invalid!');\n            }\n\n            const v = new DataView(chunk, offset);\n            const prevTagSize0 = v.getUint32(0, !le);\n            if(prevTagSize0 !== 0) {\n                Log.warn(this.Tag, 'PrevTagSize0 !== 0 !!!');\n            }\n            offset += 4;\n        }\n        while(offset < chunk.byteLength) {\n            this._dispatch = true;\n\n            const v = new DataView(chunk, offset);\n\n            if(offset + 11 + 4 > chunk.byteLength) {\n                // 数据不全\n                break;\n            }\n\n            const tagType = v.getUint8(0);\n            const dataSize = v.getUint32(0, !le) & 0x00ffffff;\n\n            if(offset + 11 + dataSize + 4 > chunk.byteLength) {\n                // 数据不全\n                break;\n            }\n\n            if(tagType !== 8 && tagType !== 9 && tagType !== 18) {\n                // 没有需要的类型\n                Log.warn(this.Tag, `Unsupported tag type ${tagType}, skipped`);\n                offset += 11 + dataSize + 4;\n                continue;\n            }\n\n            const ts2 = v.getUint8(4);\n            const ts1 = v.getUint8(5);\n            const ts0 = v.getUint8(6);\n            const ts3 = v.getUint8(7);\n\n            const timestamp = ts0 | (ts1 << 8) | (ts2 << 16) | (ts3 << 24);\n\n            const streamId = v.getUint32(7, !le) & 0x00ffffff;\n            if(streamId !== 0) {\n                Log.warn(this.Tag, 'Meet tag which has StreamID != 0!');\n            }\n\n            const dataOffset = offset + 11;\n\n            switch(tagType) {\n            case 8: // Audio\n                this._parseAudioData(chunk, dataOffset, dataSize, timestamp);\n                break;\n            case 9: // Video\n                this._parseVideoData(chunk, dataOffset, dataSize, timestamp, byteStart + offset);\n                break;\n            case 18: // ScriptDataObject\n                this._parseScriptData(chunk, dataOffset, dataSize);\n                break;\n            default:\n                Log.warn(this.Tag, `Unsupported tag type ${tagType}, skipped`);\n                offset += 11 + dataSize + 4;\n                break;\n            }\n\n            const prevTagSize = v.getUint32(11 + dataSize, !le);\n\n            if(prevTagSize !== 11 + dataSize) {\n                Log.warn(this.Tag, `Invalid PrevTagSize ${prevTagSize}`);\n            }\n\n            offset += 11 + dataSize + 4; // tagBody + dataSize + prevTagSize\n        }\n        // 解析后的数据帧 传递给MP4编码器\n        if(this._isInitialMetadataDispatched()) {\n            if(this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {\n                this.remuxer.remux(this._audioTrack, this._videoTrack);\n            }\n        }\n        return offset;\n    }\n\n    // script数据包解析\n    _parseScriptData(arrayBuffer: ArrayBuffer, dataOffset: number, dataSize: number) {\n        const scriptData = AMF.parseScriptData(arrayBuffer, dataOffset, dataSize);\n\n        if(scriptData.onMetaData !== undefined) {\n            if(scriptData.onMetaData == null || typeof scriptData.onMetaData !== 'object') {\n                Log.warn(this.Tag, 'Invalid onMetaData structure!');\n                return;\n            }\n            if(this._metadata) {\n                Log.warn(this.Tag, 'Found another onMetaData tag!');\n            }\n            this._metadata = scriptData;\n            const { onMetaData } = scriptData;\n            this.eventEmitter.emit(Events.MEDIA_DATA_ARRIVED, { ...onMetaData });\n\n            if(typeof onMetaData.hasAudio === 'boolean') {\n                // hasAudio\n                if(this._hasAudioFlagOverrided === false) {\n                    this._hasAudio = onMetaData.hasAudio;\n                    this._mediaInfo.hasAudio = this._hasAudio;\n                }\n            }\n            if(typeof onMetaData.hasVideo === 'boolean') {\n                // hasVideo\n                if(this._hasVideoFlagOverrided === false) {\n                    this._hasVideo = onMetaData.hasVideo;\n                    this._mediaInfo.hasVideo = this._hasVideo;\n                }\n            }\n            if(typeof onMetaData.audiodatarate === 'number') {\n                // audiodatarate\n                this._mediaInfo.audioDataRate = onMetaData.audiodatarate;\n            }\n            if(typeof onMetaData.videodatarate === 'number') {\n                // videodatarate\n                this._mediaInfo.videoDataRate = onMetaData.videodatarate;\n            }\n            if(typeof onMetaData.width === 'number') {\n                // width\n                this._mediaInfo.width = onMetaData.width;\n            }\n            if(typeof onMetaData.height === 'number') {\n                // height\n                this._mediaInfo.height = onMetaData.height;\n            }\n            if(typeof onMetaData.duration === 'number') {\n                // duration\n                if(!this._durationOverrided) {\n                    const duration = Math.floor(onMetaData.duration * this._timescale);\n                    this._duration = duration;\n                    this._mediaInfo.duration = duration;\n                }\n            } else {\n                this._mediaInfo.duration = 0;\n            }\n            if(typeof onMetaData.framerate === 'number') {\n                // framerate\n                const fpsNum = Math.floor(onMetaData.framerate * 1000);\n                if(fpsNum > 0) {\n                    const fps = fpsNum / 1000;\n                    this._referenceFrameRate.fixed = true;\n                    this._referenceFrameRate.fps = fps;\n                    this._referenceFrameRate.fpsNum = fpsNum;\n                    this._referenceFrameRate.fpsDen = 1000;\n                    this._mediaInfo.fps = fps;\n                }\n            }\n            if(typeof onMetaData.keyframes === 'object') {\n                // keyframes\n                this._mediaInfo.hasKeyframesIndex = true;\n                const { keyframes } = onMetaData;\n                this._mediaInfo.keyframesIndex = this._parseKeyframesIndex(keyframes);\n                onMetaData.keyframes = null; // keyframes has been extracted, remove it\n            } else {\n                this._mediaInfo.hasKeyframesIndex = false;\n            }\n            this._dispatch = false;\n            this._mediaInfo.metadata = onMetaData;\n            Log.info(this.Tag, 'Parsed onMetaData');\n            if(this._mediaInfo.isComplete()) {\n                this.eventEmitter.emit(Events.MEDIA_INFO, this._mediaInfo);\n            }\n        }\n\n        if(Object.keys(scriptData).length > 0) {\n            this.eventEmitter.emit(Events.SCRIPT_DATA_ARRIVED, { ...scriptData });\n        }\n    }\n\n    _parseKeyframesIndex(keyframes: KeyframesData) {\n        const times = [];\n        const filepositions = [];\n\n        // ignore first keyframe which is actually AVC Sequence Header (AVCDecoderConfigurationRecord)\n        for(let i = 1; i < keyframes.times.length; i++) {\n            const time = this._timestampBase + Math.floor(keyframes.times[i] * 1000);\n            times.push(time);\n            filepositions.push(keyframes.filepositions[i]);\n        }\n\n        return { times, filepositions };\n    }\n\n    // audio数据包解析\n    _parseAudioData(\n        arrayBuffer: ArrayBuffer,\n        dataOffset: number,\n        dataSize: number,\n        tagTimestamp: number\n    ) {\n        if(dataSize <= 1) {\n            Log.warn(this.Tag, 'Flv: 无效的数据包, missing SoundData payload!');\n            return;\n        }\n\n        if(this._hasAudioFlagOverrided === true && this._hasAudio === false) {\n            // If hasAudio: false indicated explicitly in MediaDataSource,\n            // 忽略所有音频数据包\n            return;\n        }\n\n        const le = this._littleEndian;\n        const v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n        const soundSpec = v.getUint8(0);\n\n        const soundFormat = soundSpec >>> 4;\n        if(soundFormat !== 2 && soundFormat !== 10) {\n            // MP3 or AAC\n            this.eventEmitter.emit(Events.ERROR, {\n                type: ErrorTypes.MUX_ERROR,\n                details: ErrorDetails.CODEC_UNSUPPORTED,\n                fatal: false,\n                reason: `Flv: 不支持的类型 idx: ${soundFormat}`\n            });\n            return;\n        }\n\n        let soundRate = 0;\n        const soundRateIndex = (soundSpec & 12) >>> 2;\n        if(soundRateIndex >= 0 && soundRateIndex <= 4) {\n            soundRate = this._flvSoundRateTable[soundRateIndex];\n        } else {\n            this.eventEmitter.emit(Events.ERROR, {\n                type: ErrorTypes.MUX_ERROR,\n                details: ErrorDetails.FORMAT_ERROR,\n                fatal: false,\n                reason: `Flv: 音频采样率无效 idx: ${soundRateIndex}`\n            });\n            return;\n        }\n\n        const soundSize = (soundSpec & 2) >>> 1; // unused\n        const soundType = soundSpec & 1;\n\n        let meta: any = this._audioMetadata;\n        const track = this._audioTrack;\n        if(!meta) {\n            if(this._hasAudio === false && this._hasAudioFlagOverrided === false) {\n                this._hasAudio = true;\n                this._mediaInfo.hasAudio = true;\n            }\n\n            // initial metadata\n            this._audioMetadata = Object.create(null);\n            meta = this._audioMetadata;\n            meta.type = 'audio';\n            meta.id = track.id;\n            meta.timescale = this._timescale;\n            meta.duration = this._duration;\n            meta.audioSampleRate = soundRate;\n            meta.channelCount = soundType === 0 ? 1 : 2;\n        }\n\n        if(soundFormat === 10) {\n            // AAC 格式的音频\n            const aacData: AacAudioDataPacket | undefined = this._parseAACAudioData(\n                arrayBuffer,\n                dataOffset + 1,\n                dataSize - 1\n            );\n            if(aacData === undefined) {\n                return;\n            }\n\n            if(aacData.packetType === 0) {\n                // AAC sequence header (AudioSpecificConfig)\n                if(meta.config) {\n                    Log.warn(this.Tag, 'Found another AudioSpecificConfig!');\n                }\n                if(aacData.type === 'object') {\n                    const misc = <AacAudioData>aacData.data;\n                    meta.audioSampleRate = misc.samplingRate;\n                    meta.channelCount = misc.channelCount;\n                    meta.codec = misc.codec;\n                    meta.originalCodec = misc.originalCodec;\n                    meta.config = misc.config;\n                    // The decode result of an aac sample is 1024 PCM samples\n                    const sampleRate = meta.audioSampleRate || 0;\n                    const timescale = meta.timescale || 0;\n                    meta.refSampleDuration = (1024 / sampleRate) * timescale;\n                    Log.info(this.Tag, 'Parsed AudioSpecificConfig');\n\n                    if(this._isInitialMetadataDispatched()) {\n                        // Non-initial metadata, force dispatch (or flush) parsed frames to remuxer\n                        if(\n                            this._dispatch\n                            && (this._audioTrack.length || this._videoTrack.length)\n                        ) {\n                            this.remuxer.remux(this._audioTrack, this._videoTrack);\n                        }\n                    } else {\n                        this._audioInitialMetadataDispatched = true;\n                    }\n                    // then notify new metadata\n                    this._dispatch = false;\n                    this.remuxer._onTrackMetadataReceived('audio', meta);\n\n                    const mi: MediaInfo = this._mediaInfo;\n                    mi.audioCodec = meta.originalCodec;\n                    mi.audioSampleRate = meta.audioSampleRate;\n                    mi.audioChannelCount = meta.channelCount;\n                    if(mi.hasVideo) {\n                        if(mi.videoCodec != null) {\n                            mi.mimeType = `video/x-flv; codecs=\"${mi.videoCodec},${mi.audioCodec}\"`;\n                        }\n                    } else {\n                        mi.mimeType = `video/x-flv; codecs=\"${mi.audioCodec}\"`;\n                    }\n                    if(mi.isComplete()) {\n                        this.eventEmitter.emit(Events.MEDIA_INFO, mi);\n                    }\n                }\n            } else if(aacData.packetType === 1) {\n                // AAC raw frame data\n                const aacDataUnitArray = <Uint8Array>aacData.data;\n                const dts = this._timestampBase + tagTimestamp;\n                const aacSample = {\n                    unit: aacDataUnitArray,\n                    length: aacDataUnitArray.byteLength,\n                    dts,\n                    pts: dts,\n                    cts: 0,\n                };\n                track.samples.push(aacSample);\n                track.length += aacDataUnitArray.length;\n            } else {\n                Log.error(this.Tag, `Flv: Unsupported AAC data type ${aacData.packetType}`);\n            }\n        } else if(soundFormat === 2) {\n            // 处理MP3格式的音频\n            if(!meta.codec) {\n                // We need metadata for mp3 audio track, extract info from frame header\n                const misc: Mp3AudioData | Uint8Array | undefined = this._parseMP3AudioData(\n                    arrayBuffer,\n                    dataOffset + 1,\n                    dataSize - 1,\n                    true\n                );\n                if(misc === undefined || misc instanceof Uint8Array) {\n                    return;\n                }\n                meta.audioSampleRate = misc.samplingRate;\n                meta.channelCount = misc.channelCount;\n                meta.codec = misc.codec;\n                meta.originalCodec = misc.originalCodec;\n                // The decode result of an mp3 sample is 1152 PCM samples\n                const sampleRate2 = meta.audioSampleRate || 0;\n                const timescale2 = meta.timescale || 0;\n                meta.refSampleDuration = (1152 / sampleRate2) * timescale2;\n                Log.info(this.Tag, 'Parsed MPEG Audio Frame Header');\n                this._audioInitialMetadataDispatched = true;\n                this.remuxer._onTrackMetadataReceived('audio', meta);\n                const mi = this._mediaInfo;\n                mi.audioCodec = meta.codec;\n                mi.audioSampleRate = meta.audioSampleRate;\n                mi.audioChannelCount = meta.channelCount;\n                mi.audioDataRate = misc.bitRate;\n                if(mi.hasVideo) {\n                    if(mi.videoCodec != null) {\n                        mi.mimeType = `video/x-flv; codecs=\"${mi.videoCodec},${mi.audioCodec}\"`;\n                    }\n                } else {\n                    mi.mimeType = `video/x-flv; codecs=\"${mi.audioCodec}\"`;\n                }\n                if(mi.isComplete()) {\n                    this.eventEmitter.emit(Events.MEDIA_INFO, mi);\n                }\n            }\n\n            // This packet is always a valid audio packet, extract it\n            const data: Mp3AudioData | Uint8Array | undefined = this._parseMP3AudioData(\n                arrayBuffer,\n                dataOffset + 1,\n                dataSize - 1,\n                false\n            );\n            if(data === undefined || !(data instanceof Uint8Array)) {\n                return;\n            }\n            const dts = this._timestampBase + tagTimestamp;\n            const mp3Sample = {\n                unit: data, length: data.byteLength, dts, pts: dts, cts: 0,\n            };\n            track.samples.push(mp3Sample);\n            track.length += data.length;\n        }\n    }\n\n    _parseAACAudioData(\n        arrayBuffer: ArrayBuffer,\n        dataOffset: number,\n        dataSize: number\n    ): AacAudioDataPacket | undefined {\n        if(dataSize <= 1) {\n            Log.warn(this.Tag, 'Flv: Invalid AAC packet, missing AACPacketType or/and Data!');\n            return;\n        }\n\n        const result = Object.create(null);\n        const array = new Uint8Array(arrayBuffer, dataOffset, dataSize);\n\n        result.packetType = array[0];\n\n        if(array[0] === 0) {\n            result.type = 'object';\n            result.data = this._parseAACAudioSpecificConfig(\n                arrayBuffer,\n                dataOffset + 1,\n                dataSize - 1\n            );\n        } else {\n            result.type = 'Unit8Array';\n            result.data = array.subarray(1);\n        }\n\n        return result;\n    }\n\n    _parseAACAudioSpecificConfig(arrayBuffer: ArrayBuffer, dataOffset: number, dataSize: number) {\n        const array = new Uint8Array(arrayBuffer, dataOffset, dataSize);\n        let config = null;\n\n        /* Audio Object Type:\n           0: Null\n           1: AAC Main\n           2: AAC LC\n           3: AAC SSR (Scalable Sample Rate)\n           4: AAC LTP (Long Term Prediction)\n           5: HE-AAC / SBR (Spectral Band Replication)\n           6: AAC Scalable\n        */\n\n        let audioObjectType = 0;\n        let originalAudioObjectType = 0;\n        // let audioExtensionObjectType = null;\n        let samplingIndex = 0;\n        let extensionSamplingIndex = null;\n\n        // 5 bits\n        originalAudioObjectType = array[0] >>> 3;\n        audioObjectType = originalAudioObjectType;\n        // 4 bits\n        samplingIndex = ((array[0] & 0x07) << 1) | (array[1] >>> 7);\n\n        if(samplingIndex < 0 || samplingIndex >= this._mpegSamplingRates.length) {\n            this.eventEmitter.emit(Events.ERROR, {\n                type: ErrorTypes.MUX_ERROR,\n                details: ErrorDetails.FORMAT_ERROR,\n                fatal: false,\n                reason: 'Flv: AAC invalid sampling frequency index!'\n            });\n            return;\n        }\n\n        const samplingFrequence = this._mpegSamplingRates[samplingIndex];\n\n        // 4 bits\n        const channelConfig = (array[1] & 0x78) >>> 3;\n        if(channelConfig < 0 || channelConfig >= 8) {\n            this.eventEmitter.emit(Events.ERROR, {\n                type: ErrorTypes.MUX_ERROR,\n                details: ErrorDetails.FORMAT_ERROR,\n                fatal: false,\n                reason: 'Flv: AAC invalid channel configuration'\n            });\n            return;\n        }\n\n        if(audioObjectType === 5) {\n            // HE-AAC?\n            // 4 bits\n            extensionSamplingIndex = ((array[1] & 0x07) << 1) | (array[2] >>> 7);\n            // 5 bits\n            // const audioExtensionObjectType = (array[2] & 0x7c) >>> 2\n        }\n\n        // workarounds for various browsers\n        const userAgent = GG.navigator.userAgent.toLowerCase();\n\n        if(userAgent.indexOf('firefox') !== -1) {\n            // firefox: use SBR (HE-AAC) if freq less than 24kHz\n            if(samplingIndex >= 6) {\n                audioObjectType = 5;\n                config = new Array(4);\n                extensionSamplingIndex = samplingIndex - 3;\n            } else {\n                // use LC-AAC\n                audioObjectType = 2;\n                config = new Array(2);\n                extensionSamplingIndex = samplingIndex;\n            }\n        } else if(userAgent.indexOf('android') !== -1) {\n            // android: always use LC-AAC\n            audioObjectType = 2;\n            config = new Array(2);\n            extensionSamplingIndex = samplingIndex;\n        } else {\n            // for other browsers, e.g. chrome...\n            // Always use HE-AAC to make it easier to switch aac codec profile\n            audioObjectType = 5;\n            extensionSamplingIndex = samplingIndex;\n            config = new Array(4);\n\n            if(samplingIndex >= 6) {\n                extensionSamplingIndex = samplingIndex - 3;\n            } else if(channelConfig === 1) {\n                // Mono channel\n                audioObjectType = 2;\n                config = new Array(2);\n                extensionSamplingIndex = samplingIndex;\n            }\n        }\n\n        config[0] = audioObjectType << 3;\n        config[0] |= (samplingIndex & 0x0f) >>> 1;\n        config[1] = (samplingIndex & 0x0f) << 7;\n        config[1] |= (channelConfig & 0x0f) << 3;\n        if(audioObjectType === 5) {\n            config[1] |= (extensionSamplingIndex & 0x0f) >>> 1;\n            config[2] = (extensionSamplingIndex & 0x01) << 7;\n            // extended audio object type: force to 2 (LC-AAC)\n            config[2] |= 2 << 2;\n            config[3] = 0;\n        }\n\n        return {\n            config,\n            samplingRate: samplingFrequence,\n            channelCount: channelConfig,\n            codec: `mp4a.40.${audioObjectType}`,\n            originalCodec: `mp4a.40.${originalAudioObjectType}`\n        };\n    }\n\n    _parseMP3AudioData(\n        arrayBuffer: ArrayBuffer,\n        dataOffset: number,\n        dataSize: number,\n        requestHeader: boolean\n    ): Mp3AudioData | Uint8Array | undefined {\n        if(dataSize < 4) {\n            Log.warn(this.Tag, 'Flv: Invalid MP3 packet, header missing!');\n            return;\n        }\n\n        const le = this._littleEndian;\n        const array = new Uint8Array(arrayBuffer, dataOffset, dataSize);\n        let result = null;\n\n        if(requestHeader) {\n            if(array[0] !== 0xff) {\n                return;\n            }\n            const ver = (array[1] >>> 3) & 0x03;\n            const layer = (array[1] & 0x06) >> 1;\n\n            const bitrateIndex = (array[2] & 0xf0) >>> 4;\n            const samplingFreqIndex = (array[2] & 0x0c) >>> 2;\n\n            const channelMode = (array[3] >>> 6) & 0x03;\n            const channelCount = channelMode !== 3 ? 2 : 1;\n\n            let sampleRate = 0;\n            let bitRate = 0;\n            let objectType = 34; // Layer-3, listed in MPEG-4 Audio Object Types\n\n            const codec = 'mp3';\n\n            switch(ver) {\n            case 0: // MPEG 2.5\n                sampleRate = this._mpegAudioV25SampleRateTable[samplingFreqIndex];\n                break;\n            case 2: // MPEG 2\n                sampleRate = this._mpegAudioV20SampleRateTable[samplingFreqIndex];\n                break;\n            case 3: // MPEG 1\n                sampleRate = this._mpegAudioV10SampleRateTable[samplingFreqIndex];\n                break;\n            default:\n                sampleRate = this._mpegAudioV25SampleRateTable[samplingFreqIndex];\n                break;\n            }\n\n            switch(layer) {\n            case 1: // Layer 3\n                objectType = 34;\n                if(bitrateIndex < this._mpegAudioL3BitRateTable.length) {\n                    bitRate = this._mpegAudioL3BitRateTable[bitrateIndex];\n                }\n                break;\n            case 2: // Layer 2\n                objectType = 33;\n                if(bitrateIndex < this._mpegAudioL2BitRateTable.length) {\n                    bitRate = this._mpegAudioL2BitRateTable[bitrateIndex];\n                }\n                break;\n            case 3: // Layer 1\n                objectType = 32;\n                if(bitrateIndex < this._mpegAudioL1BitRateTable.length) {\n                    bitRate = this._mpegAudioL1BitRateTable[bitrateIndex];\n                }\n                break;\n            default:\n                objectType = 34;\n                if(bitrateIndex < this._mpegAudioL3BitRateTable.length) {\n                    bitRate = this._mpegAudioL3BitRateTable[bitrateIndex];\n                }\n                break;\n            }\n\n            result = {\n                bitRate,\n                samplingRate: sampleRate,\n                channelCount,\n                codec,\n                originalCodec: codec\n            };\n        } else {\n            result = array;\n        }\n\n        return result;\n    }\n\n    _parseVideoData(\n        arrayBuffer: ArrayBuffer,\n        dataOffset: number,\n        dataSize: number,\n        tagTimestamp: number,\n        tagPosition: number\n    ) {\n        if(dataSize <= 1) {\n            Log.warn(this.Tag, 'Flv: Invalid video packet, missing VideoData payload!');\n            return;\n        }\n\n        if(this._hasVideoFlagOverrided === true && this._hasVideo === false) {\n            // If hasVideo: false indicated explicitly in MediaDataSource,\n            // Ignore all the video packets\n            return;\n        }\n\n        const spec = new Uint8Array(arrayBuffer, dataOffset, dataSize)[0];\n\n        const frameType = (spec & 240) >>> 4;\n        const codecId = spec & 15;\n\n        if(codecId !== 7) {\n            this.eventEmitter.emit(Events.ERROR, ErrorTypes.MUX_ERROR, {\n                type: ErrorTypes.MUX_ERROR,\n                code: -1,\n                details: ErrorDetails.CODEC_UNSUPPORTED,\n                fatal: false,\n                reason: `Flv: Unsupported codec in video frame: ${codecId}`,\n            });\n            return;\n        }\n\n        this._parseAVCVideoPacket(\n            arrayBuffer,\n            dataOffset + 1,\n            dataSize - 1,\n            tagTimestamp,\n            tagPosition,\n            frameType\n        );\n    }\n\n    _parseAVCVideoPacket(\n        arrayBuffer: ArrayBuffer,\n        dataOffset: number,\n        dataSize: number,\n        tagTimestamp: number,\n        tagPosition: number,\n        frameType: number\n    ) {\n        if(dataSize < 4) {\n            Log.warn(\n                this.Tag,\n                'Flv: Invalid AVC packet, missing AVCPacketType or/and CompositionTime'\n            );\n            return;\n        }\n\n        const le = this._littleEndian;\n        const v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n        const packetType = v.getUint8(0);\n        const ctsUnsigned = v.getUint32(0, !le) & 0x00ffffff;\n        const cts = (ctsUnsigned << 8) >> 8; // convert to 24-bit signed int\n\n        if(packetType === 0) {\n            // AVCDecoderConfigurationRecord\n            this._parseAVCDecoderConfigurationRecord(arrayBuffer, dataOffset + 4, dataSize - 4);\n        } else if(packetType === 1) {\n            // One or more Nalus\n            this._parseAVCVideoData(\n                arrayBuffer,\n                dataOffset + 4,\n                dataSize - 4,\n                tagTimestamp,\n                tagPosition,\n                frameType,\n                cts\n            );\n        } else if(packetType === 2) {\n            // empty, AVC end of sequence\n        } else {\n            this.eventEmitter.emit(Events.ERROR, {\n                type: ErrorTypes.MUX_ERROR,\n                details: ErrorDetails.FORMAT_ERROR,\n                fatal: false,\n                reason: `Flv: Invalid video packet type ${packetType}`\n            });\n        }\n    }\n\n    _parseAVCDecoderConfigurationRecord(\n        arrayBuffer: ArrayBuffer,\n        dataOffset: number,\n        dataSize: number\n    ) {\n        if(dataSize < 7) {\n            Log.warn(this.Tag, 'Flv: Invalid AVCDecoderConfigurationRecord, lack of data!');\n            return;\n        }\n\n        let meta: any = this._videoMetadata;\n        const track = this._videoTrack;\n        const le = this._littleEndian;\n        const v = new DataView(arrayBuffer, dataOffset, dataSize);\n        if(!meta) {\n            if(this._hasVideo === false && this._hasVideoFlagOverrided === false) {\n                this._hasVideo = true;\n                this._mediaInfo.hasVideo = true;\n            }\n            this._videoMetadata = Object.create(null);\n            meta = this._videoMetadata;\n            meta.type = 'video';\n            meta.id = track.id;\n            meta.timescale = this._timescale;\n            meta.duration = this._duration;\n        } else if(typeof meta.avcc !== 'undefined') {\n            Log.warn(this.Tag, 'Found another AVCDecoderConfigurationRecord!');\n        }\n\n        const version = v.getUint8(0); // configurationVersion\n        const avcProfile = v.getUint8(1); // avcProfileIndication\n        const profileCompatibility = v.getUint8(2); // profile_compatibility\n        const avcLevel = v.getUint8(3); // AVCLevelIndication\n\n        if(version !== 1 || avcProfile === 0) {\n            this.eventEmitter.emit(Events.ERROR, {\n                type: ErrorTypes.MUX_ERROR,\n                details: ErrorDetails.FORMAT_ERROR,\n                fatal: false,\n                reason: 'Flv: Invalid AVCDecoderConfigurationRecord'\n            });\n            return;\n        }\n\n        this._naluLengthSize = (v.getUint8(4) & 3) + 1; // lengthSizeMinusOne\n        if(this._naluLengthSize !== 3 && this._naluLengthSize !== 4) {\n            // holy shit!!!\n            this.eventEmitter.emit(Events.ERROR, {\n                type: ErrorTypes.MUX_ERROR,\n                details: ErrorDetails.FORMAT_ERROR,\n                fatal: false,\n                reason: `Flv: Strange NaluLengthSizeMinusOne: ${this._naluLengthSize - 1}`\n            });\n            return;\n        }\n\n        const spsCount = v.getUint8(5) & 31; // numOfSequenceParameterSets\n        if(spsCount === 0) {\n            this.eventEmitter.emit(Events.ERROR, {\n                type: ErrorTypes.MUX_ERROR,\n                details: ErrorDetails.FORMAT_ERROR,\n                fatal: false,\n                reason: 'Flv: Invalid AVCDecoderConfigurationRecord: No SPS'\n            });\n            return;\n        } if(spsCount > 1) {\n            Log.warn(\n                this.Tag,\n                `Flv: Strange AVCDecoderConfigurationRecord: SPS Count = ${spsCount}`\n            );\n        }\n\n        let offset = 6;\n\n        for(let i = 0; i < spsCount; i++) {\n            const len = v.getUint16(offset, !le); // sequenceParameterSetLength\n            offset += 2;\n\n            if(len === 0) {\n                continue;\n            }\n\n            // Notice: Nalu without startcode header (00 00 00 01)\n            const sps = new Uint8Array(arrayBuffer, dataOffset + offset, len);\n            offset += len;\n\n            const config = SPSParser.parseSPS(sps);\n            if(i !== 0) {\n                // ignore other sps's config\n                continue;\n            }\n\n            meta.codecWidth = config.codecSize.width;\n            meta.codecHeight = config.codecSize.height;\n            meta.presentWidth = config.presentSize.width;\n            meta.presentHeight = config.presentSize.height;\n\n            meta.profile = config.profileString;\n            meta.level = config.levelString;\n            meta.bitDepth = config.bitDepth;\n            meta.chromaFormat = config.chromaFormat;\n            meta.sarRatio = config.sarRatio;\n            meta.frameRate = config.frameRate;\n\n            if(\n                config.frameRate.fixed === false\n                || config.frameRate.fpsNum === 0\n                || config.frameRate.fpsDen === 0\n            ) {\n                meta.frameRate = this._referenceFrameRate;\n            }\n            const { frameRate } = meta;\n            const { fpsDen } = frameRate;\n            const { fpsNum } = frameRate;\n            meta.refSampleDuration = meta.timescale * (fpsDen / fpsNum);\n\n            const codecArray = sps.subarray(1, 4);\n            let codecString = 'avc1.';\n            for(let j = 0; j < 3; j++) {\n                let h = codecArray[j].toString(16);\n                if(h.length < 2) {\n                    h = `0${h}`;\n                }\n                codecString += h;\n            }\n            meta.codec = codecString;\n\n            const mi = this._mediaInfo;\n            mi.width = meta.codecWidth;\n            mi.height = meta.codecHeight;\n            mi.fps = meta.frameRate.fps;\n            mi.profile = meta.profile;\n            mi.level = meta.level;\n            mi.refFrames = config.refFrames;\n            mi.chromaFormat = config.chromaFormatString;\n            const { sarRatio } = meta;\n            mi.sarNum = sarRatio.width;\n            mi.sarDen = sarRatio.height;\n            mi.videoCodec = codecString;\n\n            if(mi.hasAudio) {\n                if(mi.audioCodec != null) {\n                    mi.mimeType = `video/x-flv; codecs=\"${mi.videoCodec},${mi.audioCodec}\"`;\n                }\n            } else {\n                mi.mimeType = `video/x-flv; codecs=\"${mi.videoCodec}\"`;\n            }\n            if(mi.isComplete()) {\n                this.eventEmitter.emit(Events.MEDIA_INFO, mi);\n            }\n        }\n\n        const ppsCount = v.getUint8(offset); // numOfPictureParameterSets\n\n        if(ppsCount === 0) {\n            this.eventEmitter.emit(Events.ERROR, {\n                type: ErrorTypes.MUX_ERROR,\n                details: ErrorDetails.FORMAT_ERROR,\n                fatal: false,\n                reason: 'Flv: Invalid AVCDecoderConfigurationRecord: No PPS'\n            });\n            return;\n        } if(ppsCount > 1) {\n            Log.warn(\n                this.Tag,\n                `Flv: Strange AVCDecoderConfigurationRecord: PPS Count = ${ppsCount}`\n            );\n        }\n\n        offset++;\n\n        for(let i = 0; i < ppsCount; i++) {\n            const len = v.getUint16(offset, !le); // pictureParameterSetLength\n            offset += 2;\n\n            if(len === 0) {\n                continue;\n            }\n\n            // pps is useless for extracting video information\n            offset += len;\n        }\n\n        meta.avcc = new Uint8Array(dataSize);\n        meta.avcc.set(new Uint8Array(arrayBuffer, dataOffset, dataSize), 0);\n        Log.info(this.Tag, 'Parsed AVCDecoderConfigurationRecord');\n\n        if(this._isInitialMetadataDispatched()) {\n            // flush parsed frames\n            if(this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {\n                this.remuxer.remux(this._audioTrack, this._videoTrack);\n            }\n        } else {\n            this._videoInitialMetadataDispatched = true;\n        }\n        // notify new metadata\n        this._dispatch = false;\n        this.remuxer._onTrackMetadataReceived('video', meta);\n    }\n\n    // 解析NALU\n    _parseAVCVideoData(\n        arrayBuffer: ArrayBuffer,\n        dataOffset: number,\n        dataSize: number,\n        tagTimestamp: number,\n        tagPosition: number,\n        frameType: number,\n        cts: number\n    ) {\n        const le = this._littleEndian;\n        const v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n        const units: Array<NALUnit> = [];\n        let length = 0;\n\n        let offset = 0;\n        const lengthSize = this._naluLengthSize;\n        const dts = this._timestampBase + tagTimestamp;\n        let isKeyframe = frameType === 1; // from FLV Frame Type constants\n\n        while(offset < dataSize) {\n            if(offset + 4 >= dataSize) {\n                Log.warn(\n                    this.Tag,\n                    `Malformed Nalu near timestamp ${dts}, offset = ${offset}, dataSize = ${dataSize}`\n                );\n                break; // data not enough for next Nalu\n            }\n            // Nalu with length-header (AVC1)\n            let naluSize = v.getUint32(offset, !le); // Big-Endian read\n            if(lengthSize === 3) {\n                naluSize >>>= 8;\n            }\n            if(naluSize > dataSize - lengthSize) {\n                Log.warn(this.Tag, `Malformed Nalus near timestamp ${dts}, NaluSize > DataSize!`);\n                return;\n            }\n\n            const unitType = v.getUint8(offset + lengthSize) & 0x1f;\n\n            if(unitType === 5) {\n                // IDR\n                isKeyframe = true;\n            }\n\n            const data = new Uint8Array(arrayBuffer, dataOffset + offset, lengthSize + naluSize);\n            const unit: NALUnit = { type: unitType, data };\n            if(unit.type === 6) {\n                // 获取到SEI信息\n                try {\n                    const unitArray: Uint8Array = data.subarray(lengthSize);\n                    this.eventEmitter.emit(Events.GET_SEI_INFO, unitArray);\n                } catch (e) {\n                    Log.log(this.Tag, 'parse sei info error!');\n                }\n            }\n\n            units.push(unit);\n            length += data.byteLength;\n            offset += lengthSize + naluSize;\n        }\n\n        if(units.length) {\n            const track = this._videoTrack;\n            const avcSample: AvcSampleData = {\n                units,\n                length,\n                isKeyframe,\n                dts,\n                cts,\n                pts: dts + cts\n            };\n            if(isKeyframe) {\n                avcSample.fileposition = tagPosition;\n            }\n            track.samples.push(avcSample);\n            track.length += length;\n        }\n    }\n\n    //  探测数据是否支持解码\n    static probe(data: ArrayBuffer) {\n        const info: Uint8Array = new Uint8Array(data);\n        const mismatch: { match: boolean } = { match: false };\n\n        if(info[0] !== 0x46 || info[1] !== 0x4c || info[2] !== 0x56 || info[3] !== 0x01) {\n            return mismatch;\n        }\n\n        const hasAudio = (info[4] & 4) >>> 2 !== 0;\n        const hasVideo = (info[4] & 1) !== 0;\n\n        const offset = ReadBig32(info, 5);\n\n        if(offset < 9) {\n            return mismatch;\n        }\n\n        return {\n            match: true,\n            consumed: offset,\n            dataOffset: offset,\n            hasAudioTrack: hasAudio,\n            hasVideoTrack: hasVideo\n        };\n    }\n\n    on(eventName: string, callback: EventEmitter.ListenerFn) {\n        this.eventEmitter.on(eventName, callback);\n    }\n\n    once(eventName: string, callback: EventEmitter.ListenerFn) {\n        this.eventEmitter.once(eventName, callback);\n    }\n\n    off(eventName: string, callback?: EventEmitter.ListenerFn) {\n        this.eventEmitter.off(eventName, callback);\n    }\n\n    destroy() {\n        this.eventEmitter.removeAllListeners();\n        delete (this as any).eventEmitter;\n    }\n\n    // timestamp base for output samples, must be in milliseconds\n    get timestampBase() {\n        return this._timestampBase;\n    }\n\n    set timestampBase(base: number) {\n        this._timestampBase = base;\n    }\n\n    get overridedDuration() {\n        return this._duration;\n    }\n\n    // Force-override media duration. Must be in milliseconds, int32\n    set overridedDuration(duration: number) {\n        this._durationOverrided = true;\n        this._duration = duration;\n        this._mediaInfo.duration = duration;\n    }\n\n    // Force-override audio track present flag, boolean\n    set overridedHasAudio(hasAudio: boolean) {\n        this._hasAudioFlagOverrided = true;\n        this._hasAudio = hasAudio;\n        this._mediaInfo.hasAudio = hasAudio;\n    }\n\n    // Force-override video track present flag, boolean\n    set overridedHasVideo(hasVideo: boolean) {\n        this._hasVideoFlagOverrided = true;\n        this._hasVideo = hasVideo;\n        this._mediaInfo.hasVideo = hasVideo;\n    }\n\n    resetMediaInfo() {\n        this._mediaInfo = new MediaInfo();\n    }\n\n    _isInitialMetadataDispatched() {\n        if(this._hasAudio && this._hasVideo) {\n            // both audio & video\n            return this._audioInitialMetadataDispatched && this._videoInitialMetadataDispatched;\n        }\n        if(this._hasAudio && !this._hasVideo) {\n            // audio only\n            return this._audioInitialMetadataDispatched;\n        }\n        if(!this._hasAudio && this._hasVideo) {\n            // video only\n            return this._videoInitialMetadataDispatched;\n        }\n        return false;\n    }\n\n    insertDiscontinuity() {\n        this.remuxer.insertDiscontinuity();\n    }\n\n    seek() {\n        this.remuxer.seek();\n    }\n\n    flushStashedSamples() {\n        this.remuxer.flushStashedSamples();\n    }\n}\n\nexport default FLVDemuxer;\n","const DefaultConfig: Record<string, any> = {\n    forceKeyFrameOnDiscontinuity: true,\n    maxBufferHole: 0.5,\n    maxAudioFramesDrift: 1,\n    stretchShortVideoTrack: false\n};\n\nexport default DefaultConfig;\n","import { typeSupported } from '../Interface';\n\nconst typeSupport = function typeSupport(): typeSupported {\n    const MediaSource = (window as any).MediaSource || (window as any).WebKitMediaSource;\n    return {\n        mp4: MediaSource.isTypeSupported('video/mp4'),\n        mpeg: MediaSource.isTypeSupported('audio/mpeg'),\n        mp3: MediaSource.isTypeSupported('audio/mp4; codecs=\"mp3\"')\n    };\n};\n\nexport default typeSupport;\n","import EventEmitter from 'eventemitter3';\nimport CodecInterface from '../Interfaces/Codec';\nimport FLVDemuxer from './FLVCodec/Demuxer/FLVDemuxer';\nimport Events from './FLVCodec/Events/index';\nimport DefaultConfig from './FLVCodec/config';\nimport typeSupport from './FLVCodec/Utils/getMediaTypeSupport';\n\nclass FLVCodec implements CodecInterface {\n    /**\n     * 文件标签\n     */\n    Tag: string\n\n    /**\n     * 类型\n     */\n    type: string\n\n    /**\n     * 事件中心\n     */\n    eventEmitter: EventEmitter\n\n    /**\n     * flv解码器\n     */\n    private _demuxer: FLVDemuxer\n\n    /**\n     * flv解码设置\n     */\n    _config: Record<string, any>\n\n    constructor(data: ArrayBuffer, config: Record<string, any>) {\n        this.Tag = 'FLVCodec';\n        this.type = 'FLVCodec';\n        this.eventEmitter = new EventEmitter();\n        this._config = Object.assign(Object.create(null), DefaultConfig, config);\n        this._demuxer = new FLVDemuxer(data, this.eventEmitter, config);\n    }\n\n    /**\n     * 解码器添加数据\n     * @param data loader 发送过来的数据\n     * @param byteStart 开始字节\n     */\n    appendData(data: ArrayBuffer, byteStart: number) {\n        this._demuxer.parseChunks(data, byteStart);\n    }\n\n    resetMediaInfo() {\n        this._demuxer.resetMediaInfo();\n    }\n\n    insertDiscontinuity() {\n        this._demuxer.insertDiscontinuity();\n    }\n\n    seek() {\n        this._demuxer.seek();\n    }\n\n    /**\n     * 探测数据是否能够解码\n     * @param data loader第一次发送过来的数据\n     */\n    static probe(data: ArrayBuffer) {\n        return FLVDemuxer.probe(new Uint8Array(data));\n    }\n\n    on(eventName: string, callback: EventEmitter.ListenerFn) {\n        this.eventEmitter.on(eventName, callback);\n    }\n\n    once(eventName: string, callback: EventEmitter.ListenerFn) {\n        this.eventEmitter.once(eventName, callback);\n    }\n\n    off(eventName: string, callback?: EventEmitter.ListenerFn) {\n        this.eventEmitter.off(eventName, callback);\n    }\n\n    /**\n     * 销毁功能\n     */\n    destroy() {\n        this.eventEmitter.removeAllListeners();\n        this._demuxer.destroy();\n        delete (this as any).eventEmitter;\n    }\n\n    set timestampBase(base: number) {\n        this._demuxer.timestampBase = base;\n    }\n\n    set overridedDuration(duration: number) {\n        this._demuxer.overridedDuration = duration;\n    }\n\n    set overridedHasAudio(hasAudio: boolean) {\n        this._demuxer.overridedHasAudio = hasAudio;\n    }\n\n    set overridedHasVideo(hasVideo: boolean) {\n        this._demuxer.overridedHasVideo = hasVideo;\n    }\n\n    /**\n     * 获取转码事件\n     */\n    static get Events() {\n        return Events;\n    }\n\n    get config() {\n        return this._config;\n    }\n\n    static get typeSupportFunc() {\n        return typeSupport;\n    }\n\n    flushStashedSamples(): void {\n        this._demuxer.flushStashedSamples();\n    }\n\n    bindDataSource(dataSource: any) {\n        dataSource.onDataArrival = this.parseChunks.bind(this);\n        return this;\n    }\n\n    parseChunks(data: ArrayBuffer, byteStart: number): number {\n        return this._demuxer.parseChunks(data, byteStart);\n    }\n}\n\nexport default FLVCodec;\n","export const ErrorTypes: Record<string, string> = {\n    // Identifier for a network error (loading error / timeout ...)\n    NETWORK_ERROR: 'networkError',\n    // Identifier for a media Error (video/parsing/mediasource error)\n    MEDIA_ERROR: 'mediaError',\n    // EME (encrypted media extensions) errors\n    KEY_SYSTEM_ERROR: 'keySystemError',\n    // Identifier for a mux Error (demuxing/remuxing)\n    MUX_ERROR: 'muxError',\n    // Identifier for all other errors\n    OTHER_ERROR: 'otherError'\n};\n\nexport const ErrorDetails: Record<string, string> = {\n    KEY_SYSTEM_NO_KEYS: 'keySystemNoKeys',\n\n    KEY_SYSTEM_NO_ACCESS: 'keySystemNoAccess',\n\n    KEY_SYSTEM_NO_SESSION: 'keySystemNoSession',\n\n    KEY_SYSTEM_LICENSE_REQUEST_FAILED: 'keySystemLicenseRequestFailed',\n    // Identifier for a manifest load error - data: { url : faulty URL, response : { code: error code, text: error text }}\n    MANIFEST_LOAD_ERROR: 'manifestLoadError',\n    // Identifier for a manifest load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}\n    MANIFEST_LOAD_TIMEOUT: 'manifestLoadTimeOut',\n    // Identifier for a manifest parsing error - data: { url : faulty URL, reason : error reason}\n    MANIFEST_PARSING_ERROR: 'manifestParsingError',\n    // Identifier for a manifest with only incompatible codecs error - data: { url : faulty URL, reason : error reason}\n    MANIFEST_INCOMPATIBLE_CODECS_ERROR: 'manifestIncompatibleCodecsError',\n    // Identifier for a level load error - data: { url : faulty URL, response : { code: error code, text: error text }}\n    LEVEL_LOAD_ERROR: 'levelLoadError',\n    // Identifier for a level load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}\n    LEVEL_LOAD_TIMEOUT: 'levelLoadTimeOut',\n    // Identifier for a level switch error - data: { level : faulty level Id, event : error description}\n    LEVEL_SWITCH_ERROR: 'levelSwitchError',\n    // Identifier for an audio track load error - data: { url : faulty URL, response : { code: error code, text: error text }}\n    AUDIO_TRACK_LOAD_ERROR: 'audioTrackLoadError',\n    // Identifier for an audio track load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}\n    AUDIO_TRACK_LOAD_TIMEOUT: 'audioTrackLoadTimeOut',\n    // Identifier for fragment load error - data: { frag : fragment object, response : { code: error code, text: error text }}\n    FRAG_LOAD_ERROR: 'fragLoadError',\n    // Identifier for fragment load timeout error - data: { frag : fragment object}\n    FRAG_LOAD_TIMEOUT: 'fragLoadTimeOut',\n    // Identifier for a fragment decryption error event - data: {id : demuxer Id,frag: fragment object, reason : parsing error description }\n    FRAG_DECRYPT_ERROR: 'fragDecryptError',\n    // Identifier for a fragment parsing error event - data: { id : demuxer Id, reason : parsing error description }\n    // will be renamed DEMUX_PARSING_ERROR and switched to MUX_ERROR in the next major release\n    FRAG_PARSING_ERROR: 'fragParsingError',\n    // Identifier for a remux alloc error event - data: { id : demuxer Id, frag : fragment object, bytes : nb of bytes on which allocation failed , reason : error text }\n    REMUX_ALLOC_ERROR: 'remuxAllocError',\n    // Identifier for decrypt key load error - data: { frag : fragment object, response : { code: error code, text: error text }}\n    KEY_LOAD_ERROR: 'keyLoadError',\n    // Identifier for decrypt key load timeout error - data: { frag : fragment object}\n    KEY_LOAD_TIMEOUT: 'keyLoadTimeOut',\n    // Triggered when an exception occurs while adding a sourceBuffer to MediaSource - data : {  err : exception , mimeType : mimeType }\n    BUFFER_ADD_CODEC_ERROR: 'bufferAddCodecError',\n    // Identifier for a buffer append error - data: append error description\n    BUFFER_APPEND_ERROR: 'bufferAppendError',\n    // Identifier for a buffer appending error event - data: appending error description\n    BUFFER_APPENDING_ERROR: 'bufferAppendingError',\n    // Identifier for a buffer stalled error event\n    BUFFER_STALLED_ERROR: 'bufferStalledError',\n    // Identifier for a buffer full event\n    BUFFER_FULL_ERROR: 'bufferFullError',\n    // Identifier for a buffer seek over hole event\n    BUFFER_SEEK_OVER_HOLE: 'bufferSeekOverHole',\n    // Identifier for a buffer nudge on stall (playback is stuck although currentTime is in a buffered area)\n    BUFFER_NUDGE_ON_STALL: 'bufferNudgeOnStall',\n    // Identifier for an internal exception happening inside hls.js while handling an event\n    INTERNAL_EXCEPTION: 'internalException'\n};\n","/**\n * ADTS(Audio Data Transport Stream) parser helper\n * @link https://wiki.multimedia.cx/index.php?title=ADTS\n */\nimport EventEmitter from 'eventemitter3';\nimport logger from '../../../Utils/Logger';\nimport { ErrorTypes, ErrorDetails } from '../errors';\nimport Event from '../../../Events/index';\nimport { track, TSAudioTrack, TSAACTrack } from '../TSCodecInterface';\n\nexport function getAudioConfig(\n    observer: EventEmitter,\n    data: Uint8Array,\n    offset: number,\n    audioCodec: string | undefined\n) {\n    let adtsObjectType: number; // :int\n    let adtsExtensionSampleingIndex: number; // :int\n    let adtsChanelConfig: number; // :int\n    let config: Array<number>;\n    const userAgent: string = navigator.userAgent.toLowerCase();\n    const manifestCodec: string | undefined = audioCodec;\n    const adtsSampleingRates: Array<number> = [\n        96000,\n        88200,\n        64000,\n        48000,\n        44100,\n        32000,\n        24000,\n        22050,\n        16000,\n        12000,\n        11025,\n        8000,\n        7350\n    ];\n    // byte 2\n    adtsObjectType = ((data[offset + 2] & 0xc0) >>> 6) + 1;\n    const adtsSampleingIndex = (data[offset + 2] & 0x3c) >>> 2;\n    if(adtsSampleingIndex > adtsSampleingRates.length - 1) {\n        observer.emit(Event.ERROR, {\n            type: ErrorTypes.MEDIA_ERROR,\n            details: ErrorDetails.FRAG_PARSING_ERROR,\n            fatal: true,\n            reason: `invalid ADTS sampling index:${adtsSampleingIndex}`\n        });\n        return;\n    }\n    adtsChanelConfig = (data[offset + 2] & 0x01) << 2;\n    // byte 3\n    adtsChanelConfig |= (data[offset + 3] & 0xc0) >>> 6;\n\n    logger.log(\n        'adts',\n        `manifest codec:${audioCodec},ADTS data:type:${adtsObjectType},sampleingIndex:${adtsSampleingIndex}[${adtsSampleingRates[adtsSampleingIndex]}Hz],channelConfig:${adtsChanelConfig}`\n    );\n    // firefox: freq less than 24kHz = AAC SBR (HE-AAC)\n    if(/firefox/i.test(userAgent)) {\n        if(adtsSampleingIndex >= 6) {\n            adtsObjectType = 5;\n            config = new Array(4);\n            // HE-AAC uses SBR (Spectral Band Replication) , high frequencies are constructed from low frequencies\n            // there is a factor 2 between frame sample rate and output sample rate\n            // multiply frequency by 2 (see table below, equivalent to substract 3)\n            adtsExtensionSampleingIndex = adtsSampleingIndex - 3;\n        } else {\n            adtsObjectType = 2;\n            config = new Array(2);\n            adtsExtensionSampleingIndex = adtsSampleingIndex;\n        }\n        // Android : always use AAC\n    } else if(userAgent.indexOf('android') !== -1) {\n        adtsObjectType = 2;\n        config = new Array(2);\n        adtsExtensionSampleingIndex = adtsSampleingIndex;\n    } else {\n        /*  for other browsers (Chrome/Vivaldi/Opera ...)\n        always force audio type to be HE-AAC SBR, as some browsers do not support audio codec switch properly (like Chrome ...)\n    */\n        adtsObjectType = 5;\n        config = new Array(4);\n        // if (manifest codec is HE-AAC or HE-AACv2) OR (manifest codec not specified AND frequency less than 24kHz)\n        if(\n            (audioCodec\n                && (audioCodec.indexOf('mp4a.40.29') !== -1\n                    || audioCodec.indexOf('mp4a.40.5') !== -1))\n            || (!audioCodec && adtsSampleingIndex >= 6)\n        ) {\n            // HE-AAC uses SBR (Spectral Band Replication) , high frequencies are constructed from low frequencies\n            // there is a factor 2 between frame sample rate and output sample rate\n            // multiply frequency by 2 (see table below, equivalent to substract 3)\n            adtsExtensionSampleingIndex = adtsSampleingIndex - 3;\n        } else {\n            // if (manifest codec is AAC) AND (frequency less than 24kHz AND nb channel is 1) OR (manifest codec not specified and mono audio)\n            // Chrome fails to play back with low frequency AAC LC mono when initialized with HE-AAC.  This is not a problem with stereo.\n            if(\n                (audioCodec\n                    && audioCodec.indexOf('mp4a.40.2') !== -1\n                    && ((adtsSampleingIndex >= 6 && adtsChanelConfig === 1)\n                        || /vivaldi/i.test(userAgent)))\n                || (!audioCodec && adtsChanelConfig === 1)\n            ) {\n                adtsObjectType = 2;\n                config = new Array(2);\n            }\n            adtsExtensionSampleingIndex = adtsSampleingIndex;\n        }\n    }\n    /* refer to http://wiki.multimedia.cx/index.php?title=MPEG-4_Audio#Audio_Specific_Config\n      ISO 14496-3 (AAC).pdf - Table 1.13 — Syntax of AudioSpecificConfig()\n    Audio Profile / Audio Object Type\n    0: Null\n    1: AAC Main\n    2: AAC LC (Low Complexity)\n    3: AAC SSR (Scalable Sample Rate)\n    4: AAC LTP (Long Term Prediction)\n    5: SBR (Spectral Band Replication)\n    6: AAC Scalable\n   sampling freq\n    0: 96000 Hz\n    1: 88200 Hz\n    2: 64000 Hz\n    3: 48000 Hz\n    4: 44100 Hz\n    5: 32000 Hz\n    6: 24000 Hz\n    7: 22050 Hz\n    8: 16000 Hz\n    9: 12000 Hz\n    10: 11025 Hz\n    11: 8000 Hz\n    12: 7350 Hz\n    13: Reserved\n    14: Reserved\n    15: frequency is written explictly\n    Channel Configurations\n    These are the channel configurations:\n    0: Defined in AOT Specifc Config\n    1: 1 channel: front-center\n    2: 2 channels: front-left, front-right\n  */\n    // audioObjectType = profile => profile, the MPEG-4 Audio Object Type minus 1\n    config[0] = adtsObjectType << 3;\n    // samplingFrequencyIndex\n    config[0] |= (adtsSampleingIndex & 0x0e) >> 1;\n    config[1] |= (adtsSampleingIndex & 0x01) << 7;\n    // channelConfiguration\n    config[1] |= adtsChanelConfig << 3;\n    if(adtsObjectType === 5) {\n        // adtsExtensionSampleingIndex\n        config[1] |= (adtsExtensionSampleingIndex & 0x0e) >> 1;\n        config[2] = (adtsExtensionSampleingIndex & 0x01) << 7;\n        // adtsObjectType (force to 2, chrome is checking that object type is less than 5 ???\n        //    https://chromium.googlesource.com/chromium/src.git/+/master/media/formats/mp4/aac.cc\n        config[2] |= 2 << 2;\n        config[3] = 0;\n    }\n    return {\n        config,\n        samplerate: adtsSampleingRates[adtsSampleingIndex],\n        channelCount: adtsChanelConfig,\n        codec: `mp4a.40.${adtsObjectType}`,\n        manifestCodec\n    };\n}\n\n/**\n * 是否符合Header的格式\n */\nexport function isHeaderPattern(data: Uint8Array, offset: number) {\n    return data[offset] === 0xff && (data[offset + 1] & 0xf6) === 0xf0;\n}\n\n/**\n * 获取Header的长度\n */\nexport function getHeaderLength(data: Uint8Array, offset: number) {\n    return data[offset + 1] & 0x01 ? 7 : 9;\n}\n\n/**\n * 获取整个帧的数据长度\n */\nexport function getFullFrameLength(data: Uint8Array, offset: number) {\n    return (\n        ((data[offset + 3] & 0x03) << 11)\n        | (data[offset + 4] << 3)\n        | ((data[offset + 5] & 0xe0) >>> 5)\n    );\n}\n\n/**\n * 是不是Header\n */\nexport function isHeader(data: Uint8Array, offset: number) {\n    // Look for ADTS header | 1111 1111 | 1111 X00X | where X can be either 0 or 1\n    // Layer bits (position 14 and 15) in header should be always 0 for ADTS\n    // More info https://wiki.multimedia.cx/index.php?title=ADTS\n    if(offset + 1 < data.length && isHeaderPattern(data, offset)) {\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * 探测是不是音频数据\n * @param data 音频数据块\n * @param offset 偏移量\n */\nexport function probe(data: Uint8Array, offset: number): boolean {\n    // same as isHeader but we also check that ADTS frame follows last ADTS frame\n    // or end of data is reached\n    if(isHeader(data, offset)) {\n        // ADTS header Length\n        const headerLength = getHeaderLength(data, offset);\n        // ADTS frame Length\n        let frameLength = headerLength;\n        if(offset + 5 < data.length) {\n            frameLength = getFullFrameLength(data, offset);\n        }\n\n        const newOffset = offset + frameLength;\n        if(\n            newOffset === data.length\n            || (newOffset + 1 < data.length && isHeaderPattern(data, newOffset))\n        ) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n * 初始化Track设置, 给Audiotrack添加属性\n * @param track track 信息\n * @param observer 事件中心\n * @param data 音频数据块\n * @param offset 偏移量\n * @param audioCodec 音频编码格式\n */\nexport function initTrackConfig(\n    track: TSAudioTrack,\n    observer: EventEmitter,\n    data: Uint8Array,\n    offset: number,\n    audioCodec: string | undefined\n) {\n    if(!track.samplerate) {\n        const config = getAudioConfig(observer, data, offset, audioCodec);\n        if(!config) return;\n        track.config = config.config;\n        track.samplerate = config.samplerate;\n        track.channelCount = config.channelCount;\n        track.codec = config.codec;\n        track.manifestCodec = config.manifestCodec;\n        logger.log(\n            'initTrackConfig',\n            `parsed codec:${track.codec},rate:${config.samplerate},nb channel:${config.channelCount}`\n        );\n    }\n}\n\n/**\n * 获取帧播放时长\n * @param samplerate sample码率\n */\nexport function getFrameDuration(samplerate: number) {\n    return (1024 * 90000) / samplerate;\n}\n\n/**\n * 解析帧头部信息\n * @param data 音频数据块\n * @param offset 偏移\n * @param pts 展示时间\n * @param frameIndex 帧索引值\n * @param frameDuration 帧持续时间\n */\nexport function parseFrameHeader(\n    data: Uint8Array,\n    offset: number,\n    pts: number,\n    frameIndex: number,\n    frameDuration: number\n) {\n    let frameLength; let stamp;\n    const { length } = data;\n\n    // The protection skip bit tells us if we have 2 bytes of CRC data at the end of the ADTS header\n    const headerLength = getHeaderLength(data, offset);\n    // retrieve frame size\n    frameLength = getFullFrameLength(data, offset);\n    frameLength -= headerLength;\n\n    if(frameLength > 0 && offset + headerLength + frameLength <= length) {\n        stamp = pts + frameIndex * frameDuration;\n        // logger.log(`AAC frame, offset/length/total/pts:${offset+headerLength}/${frameLength}/${data.byteLength}/${(stamp/90).toFixed(0)}`);\n        return { headerLength, frameLength, stamp };\n    }\n\n    return undefined;\n}\n\nexport function appendFrame(\n    track: track,\n    data: Uint8Array,\n    offset: number,\n    pts: number,\n    frameIndex: number\n) {\n    const frameDuration = getFrameDuration(track.samplerate);\n    const header = parseFrameHeader(data, offset, pts, frameIndex, frameDuration);\n    if(header) {\n        const { stamp } = header;\n        const { headerLength } = header;\n        const { frameLength } = header;\n\n        // logger.log(`AAC frame, offset/length/total/pts:${offset+headerLength}/${frameLength}/${data.byteLength}/${(stamp/90).toFixed(0)}`);\n        const aacSample = {\n            unit: data.subarray(offset + headerLength, offset + headerLength + frameLength),\n            pts: stamp,\n            dts: stamp\n        };\n\n        track.samples.push(aacSample);\n        return { sample: aacSample, length: frameLength + headerLength };\n    }\n\n    return undefined;\n}\n","import { track } from '../TSCodecInterface';\n\n/**\n *  MPEG parser helper\n */\n\nconst MpegAudio = {\n    BitratesMap: [\n        32,\n        64,\n        96,\n        128,\n        160,\n        192,\n        224,\n        256,\n        288,\n        320,\n        352,\n        384,\n        416,\n        448,\n        32,\n        48,\n        56,\n        64,\n        80,\n        96,\n        112,\n        128,\n        160,\n        192,\n        224,\n        256,\n        320,\n        384,\n        32,\n        40,\n        48,\n        56,\n        64,\n        80,\n        96,\n        112,\n        128,\n        160,\n        192,\n        224,\n        256,\n        320,\n        32,\n        48,\n        56,\n        64,\n        80,\n        96,\n        112,\n        128,\n        144,\n        160,\n        176,\n        192,\n        224,\n        256,\n        8,\n        16,\n        24,\n        32,\n        40,\n        48,\n        56,\n        64,\n        80,\n        96,\n        112,\n        128,\n        144,\n        160\n    ],\n\n    SamplingRateMap: [44100, 48000, 32000, 22050, 24000, 16000, 11025, 12000, 8000],\n\n    SamplesCoefficients: [\n        // MPEG 2.5\n        [\n            0, // Reserved\n            72, // Layer3\n            144, // Layer2\n            12 // Layer1\n        ],\n        // Reserved\n        [\n            0, // Reserved\n            0, // Layer3\n            0, // Layer2\n            0 // Layer1\n        ],\n        // MPEG 2\n        [\n            0, // Reserved\n            72, // Layer3\n            144, // Layer2\n            12 // Layer1\n        ],\n        // MPEG 1\n        [\n            0, // Reserved\n            144, // Layer3\n            144, // Layer2\n            12 // Layer1\n        ]\n    ],\n\n    BytesInSlot: [\n        0, // Reserved\n        1, // Layer3\n        1, // Layer2\n        4 // Layer1\n    ],\n\n    appendFrame(\n        track: track,\n        data: Uint8Array,\n        offset: number,\n        pts: number,\n        frameIndex: number\n    ) {\n        // Using http://www.datavoyage.com/mpgscript/mpeghdr.htm as a reference\n        if(offset + 24 > data.length) {\n            return undefined;\n        }\n\n        const header = this.parseHeader(data, offset);\n        if(header && offset + header.frameLength <= data.length) {\n            const frameDuration = (header.samplesPerFrame * 90000) / header.sampleRate;\n            const stamp = pts + frameIndex * frameDuration;\n            const sample = {\n                unit: data.subarray(offset, offset + header.frameLength),\n                pts: stamp,\n                dts: stamp\n            };\n\n            track.config = [];\n            track.channelCount = header.channelCount;\n            track.samplerate = header.sampleRate;\n            track.samples.push(sample);\n\n            return { sample, length: header.frameLength };\n        }\n\n        return undefined;\n    },\n\n    parseHeader(data: Uint8Array, offset: number) {\n        const headerB = (data[offset + 1] >> 3) & 3;\n        const headerC = (data[offset + 1] >> 1) & 3;\n        const headerE = (data[offset + 2] >> 4) & 15;\n        const headerF = (data[offset + 2] >> 2) & 3;\n        const headerG = (data[offset + 2] >> 1) & 1;\n        if(headerB !== 1 && headerE !== 0 && headerE !== 15 && headerF !== 3) {\n            // const columnInBitrates = headerB === 3 ? 3 - headerC : headerC === 3 ? 3 : 4;\n            let columnInBitrates: number;\n            if(headerB === 3) {\n                columnInBitrates = 3 - headerC;\n            } else if(headerC === 3) {\n                columnInBitrates = 3;\n            } else {\n                columnInBitrates = 4;\n            }\n\n            const bitRate = MpegAudio.BitratesMap[columnInBitrates * 14 + headerE - 1] * 1000;\n            let columnInSampleRates: number;\n\n            if(headerB === 3) {\n                columnInSampleRates = 0;\n            } else if(headerB === 2) {\n                columnInSampleRates = 1;\n            } else {\n                columnInSampleRates = 2;\n            }\n            // const columnInSampleRates = headerB === 3 ? 0 : headerB === 2 ? 1 : 2;\n            const sampleRate = MpegAudio.SamplingRateMap[columnInSampleRates * 3 + headerF];\n            const channelCount = data[offset + 3] >> 6 === 3 ? 1 : 2; // If bits of channel mode are `11` then it is a single channel (Mono)\n            const sampleCoefficient = MpegAudio.SamplesCoefficients[headerB][headerC];\n            const bytesInSlot = MpegAudio.BytesInSlot[headerC];\n            const samplesPerFrame = sampleCoefficient * 8 * bytesInSlot;\n            const frameLength = parseInt(String((sampleCoefficient * bitRate) / sampleRate + headerG), 10)\n                * bytesInSlot;\n\n            return {\n                sampleRate, channelCount, frameLength, samplesPerFrame\n            };\n        }\n\n        return undefined;\n    },\n\n    isHeaderPattern(data: Uint8Array, offset: number) {\n        return (\n            data[offset] === 0xff\n            && (data[offset + 1] & 0xe0) === 0xe0\n            && (data[offset + 1] & 0x06) !== 0x00\n        );\n    },\n\n    isHeader(data: Uint8Array, offset: number) {\n        // Look for MPEG header | 1111 1111 | 111X XYZX | where X can be either 0 or 1 and Y or Z should be 1\n        // Layer bits (position 14 and 15) in header should be always different from 0 (Layer I or Layer II or Layer III)\n        // More info http://www.mp3-tech.org/programmer/frame_header.html\n        if(offset + 1 < data.length && this.isHeaderPattern(data, offset)) {\n            return true;\n        }\n\n        return false;\n    },\n\n    probe(data: Uint8Array, offset: number) {\n        // same as isHeader but we also check that MPEG frame follows last MPEG frame\n        // or end of data is reached\n        if(offset + 1 < data.length && this.isHeaderPattern(data, offset)) {\n            // MPEG header Length\n            const headerLength = 4;\n            // MPEG frame Length\n            const header = this.parseHeader(data, offset);\n            let frameLength = headerLength;\n            if(header && header.frameLength) {\n                ({ frameLength } = header);\n            }\n\n            const newOffset = offset + frameLength;\n            if(\n                newOffset === data.length\n                || (newOffset + 1 < data.length && this.isHeaderPattern(data, newOffset))\n            ) {\n                return true;\n            }\n        }\n        return false;\n    }\n};\n\nexport default MpegAudio;\n","const Events = {\n    ERROR: 'ERROR',\n    GET_SEI_INFO: 'GET_SEI_INFO',\n\n    FRAG_PARSED: 'FRAG_PARSED',\n\n    INIT_PTS_FOUND: 'INIT_PTS_FOUND',\n\n    FRAG_PARSING_INIT_SEGMENT: 'FRAG_PARSING_INIT_SEGMENT',\n\n    FRAG_PARSING_METADATA: 'FRAG_PARSING_METADATA',\n\n    FRAG_PARSING_USERDATA: 'FRAG_PARSING_USERDATA',\n\n    MEDIA_INFO: 'MEDIA_INFO',\n    // 当转码器解析出初始化片段时触发\n    INIT_SEGMENT: 'INIT_SEGMENT',\n\n    // 当转码器解析出媒体化片段时触发\n    MEDIA_SEGMENT: 'MEDIA_SEGMENT',\n    // 加载下一个 frag, 不对外\n    LOAD_NEXT_FRAG: 'LOAD_NEXT_FRAG',\n\n    META_DATA: 'META_DATA'\n};\n\nexport default Events;\n","/**\n * Parser for exponential Golomb codes, a variable-bitwidth number encoding scheme used by h264.\n * 解析哥伦布码\n */\n\nimport logger from '../../../Utils/Logger';\n\nclass ExpGolomb {\n    data: Uint8Array\n\n    bytesAvailable: number\n\n    word: number\n\n    bitsAvailable: number\n\n    constructor(data: Uint8Array) {\n        this.data = data;\n        // the number of bytes left to examine in this.data\n        this.bytesAvailable = data.byteLength;\n        // the current word being examined\n        this.word = 0; // :uint\n        // the number of bits left to examine in the current word\n        this.bitsAvailable = 0; // :uint\n    }\n\n    static Tag = 'ExpGolomb'\n\n    // ():void\n    loadWord() {\n        const { data } = this;\n        const { bytesAvailable } = this;\n        const position = data.byteLength - bytesAvailable;\n        const workingBytes = new Uint8Array(4);\n        const availableBytes = Math.min(4, bytesAvailable);\n        if(availableBytes === 0) {\n            throw new Error('no bytes available');\n        }\n\n        workingBytes.set(data.subarray(position, position + availableBytes));\n        this.word = new DataView(workingBytes.buffer).getUint32(0);\n        // track the amount of this.data that has been processed\n        this.bitsAvailable = availableBytes * 8;\n        this.bytesAvailable -= availableBytes;\n    }\n\n    // (count:int):void\n    /**\n     * 跳过 count 个 bit\n     * @param count 跳过的个数\n     */\n    skipBits(count: number) {\n        let skipBytes; // :int\n        if(this.bitsAvailable > count) {\n            this.word <<= count;\n            this.bitsAvailable -= count;\n        } else {\n            count -= this.bitsAvailable;\n            skipBytes = count >> 3;\n            count -= skipBytes >> 3;\n            this.bytesAvailable -= skipBytes;\n            this.loadWord();\n            this.word <<= count;\n            this.bitsAvailable -= count;\n        }\n    }\n\n    // (size:int):uint\n    /**\n     * 读个 size 个 bit, 返回该值\n     * @param size 读取 bit 的个数\n     */\n    readBits(size: number): number {\n        let bits = Math.min(this.bitsAvailable, size); // :uint\n        const valu = this.word >>> (32 - bits); // :uint\n        if(size > 32) {\n            logger.error(ExpGolomb.Tag, 'Cannot read more than 32 bits at a time');\n        }\n\n        this.bitsAvailable -= bits;\n        if(this.bitsAvailable > 0) {\n            this.word <<= bits;\n        } else if(this.bytesAvailable > 0) {\n            this.loadWord();\n        }\n\n        bits = size - bits;\n        if(bits > 0 && this.bitsAvailable) {\n            return (valu << bits) | this.readBits(bits);\n        }\n        return valu;\n    }\n\n    // ():uint\n    skipLZ(): number {\n        let leadingZeroCount; // :uint\n        for(leadingZeroCount = 0; leadingZeroCount < this.bitsAvailable; ++leadingZeroCount) {\n            if((this.word & (0x80000000 >>> leadingZeroCount)) !== 0) {\n                // the first bit of working word is 1\n                this.word <<= leadingZeroCount;\n                this.bitsAvailable -= leadingZeroCount;\n                return leadingZeroCount;\n            }\n        }\n        // we exhausted word and still have not found a 1\n        this.loadWord();\n        return leadingZeroCount + this.skipLZ();\n    }\n\n    // ():void\n    skipUEG() {\n        this.skipBits(1 + this.skipLZ());\n    }\n\n    // ():void\n    skipEG() {\n        this.skipBits(1 + this.skipLZ());\n    }\n\n    // ():uint\n    readUEG(): number {\n        const clz = this.skipLZ(); // :uint\n        return this.readBits(clz + 1) - 1;\n    }\n\n    // ():int\n    readEG() {\n        const valu = this.readUEG(); // :int\n        if(0x01 & valu) {\n            // the number is odd if the low order bit is set\n            return (1 + valu) >>> 1; // add 1 to make it even, and divide by 2\n        }\n        return -1 * (valu >>> 1); // divide by two then make it negative\n    }\n\n    // Some convenience functions\n    // :Boolean\n    readBoolean() {\n        return this.readBits(1) === 1;\n    }\n\n    // ():int\n    readUByte() {\n        return this.readBits(8);\n    }\n\n    // ():int\n    readUShort() {\n        return this.readBits(16);\n    }\n\n    // ():int\n    readUInt() {\n        return this.readBits(32);\n    }\n\n    /**\n     * Advance the ExpGolomb decoder past a scaling list. The scaling\n     * list is optionally transmitted as part of a sequence parameter\n     * set and is not relevant to transmuxing.\n     * @param count {number} the number of entries in this scaling list\n     * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\n     */\n    skipScalingList(count: number) {\n        let lastScale = 8;\n        let nextScale = 8;\n        let j;\n        let deltaScale;\n        for(j = 0; j < count; j++) {\n            if(nextScale !== 0) {\n                deltaScale = this.readEG();\n                nextScale = (lastScale + deltaScale + 256) % 256;\n            }\n            lastScale = nextScale === 0 ? lastScale : nextScale;\n        }\n    }\n\n    /**\n     * Read a sequence parameter set and return some interesting video\n     * properties. A sequence parameter set is the H264 metadata that\n     * describes the properties of upcoming video frames.\n     * @param data {Uint8Array} the bytes of a sequence parameter set\n     * @return {object} an object with configuration parsed from the\n     * sequence parameter set, including the dimensions of the\n     * associated video frames.\n     */\n    readSPS() {\n        let frameCropLeftOffset = 0;\n        let frameCropRightOffset = 0;\n        let frameCropTopOffset = 0;\n        let frameCropBottomOffset = 0;\n        let numRefFramesInPicOrderCntCycle;\n        let scalingListCount;\n        let i;\n        const readUByte = this.readUByte.bind(this);\n        const readBits = this.readBits.bind(this);\n        const readUEG = this.readUEG.bind(this);\n        const readBoolean = this.readBoolean.bind(this);\n        const skipBits = this.skipBits.bind(this);\n        const skipEG = this.skipEG.bind(this);\n        const skipUEG = this.skipUEG.bind(this);\n        const skipScalingList = this.skipScalingList.bind(this);\n\n        readUByte();\n        const profileIdc = readUByte(); // profile_idc\n        const profileCompat = readBits(5); // constraint_set[0-4]_flag, u(5)\n        skipBits(3); // reserved_zero_3bits u(3),\n        const levelIdc = readUByte(); // level_idc u(8)\n        skipUEG(); // seq_parameter_set_id\n        // some profiles have more optional data we don't need\n        if(\n            profileIdc === 100\n            || profileIdc === 110\n            || profileIdc === 122\n            || profileIdc === 244\n            || profileIdc === 44\n            || profileIdc === 83\n            || profileIdc === 86\n            || profileIdc === 118\n            || profileIdc === 128\n        ) {\n            const chromaFormatIdc = readUEG();\n            if(chromaFormatIdc === 3) {\n                skipBits(1);\n            } // separate_colour_plane_flag\n\n            skipUEG(); // bit_depth_luma_minus8\n            skipUEG(); // bit_depth_chroma_minus8\n            skipBits(1); // qpprime_y_zero_transform_bypass_flag\n            if(readBoolean()) {\n                // seq_scaling_matrix_present_flag\n                scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;\n                for(i = 0; i < scalingListCount; i++) {\n                    if(readBoolean()) {\n                        // seq_scaling_list_present_flag[ i ]\n                        if(i < 6) {\n                            skipScalingList(16);\n                        } else {\n                            skipScalingList(64);\n                        }\n                    }\n                }\n            }\n        }\n        skipUEG(); // log2_max_frame_num_minus4\n        const picOrderCntType = readUEG();\n        if(picOrderCntType === 0) {\n            readUEG(); // log2_max_pic_order_cnt_lsb_minus4\n        } else if(picOrderCntType === 1) {\n            skipBits(1); // delta_pic_order_always_zero_flag\n            skipEG(); // offset_for_non_ref_pic\n            skipEG(); // offset_for_top_to_bottom_field\n            numRefFramesInPicOrderCntCycle = readUEG();\n            for(i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\n                skipEG();\n            } // offset_for_ref_frame[ i ]\n        }\n        skipUEG(); // max_num_ref_frames\n        skipBits(1); // gaps_in_frame_num_value_allowed_flag\n        const picWidthInMbsMinus1 = readUEG();\n        const picHeightInMapUnitsMinus1 = readUEG();\n        const frameMbsOnlyFlag = readBits(1);\n        if(frameMbsOnlyFlag === 0) {\n            skipBits(1);\n        } // mb_adaptive_frame_field_flag\n\n        skipBits(1); // direct_8x8_inference_flag\n        if(readBoolean()) {\n            // frame_cropping_flag\n            frameCropLeftOffset = readUEG();\n            frameCropRightOffset = readUEG();\n            frameCropTopOffset = readUEG();\n            frameCropBottomOffset = readUEG();\n        }\n        let pixelRatio = [1, 1];\n        if(readBoolean()) {\n            // vui_parameters_present_flag\n            if(readBoolean()) {\n                // aspect_ratio_info_present_flag\n                const aspectRatioIdc = readUByte();\n                switch(aspectRatioIdc) {\n                case 1:\n                    pixelRatio = [1, 1];\n                    break;\n                case 2:\n                    pixelRatio = [12, 11];\n                    break;\n                case 3:\n                    pixelRatio = [10, 11];\n                    break;\n                case 4:\n                    pixelRatio = [16, 11];\n                    break;\n                case 5:\n                    pixelRatio = [40, 33];\n                    break;\n                case 6:\n                    pixelRatio = [24, 11];\n                    break;\n                case 7:\n                    pixelRatio = [20, 11];\n                    break;\n                case 8:\n                    pixelRatio = [32, 11];\n                    break;\n                case 9:\n                    pixelRatio = [80, 33];\n                    break;\n                case 10:\n                    pixelRatio = [18, 11];\n                    break;\n                case 11:\n                    pixelRatio = [15, 11];\n                    break;\n                case 12:\n                    pixelRatio = [64, 33];\n                    break;\n                case 13:\n                    pixelRatio = [160, 99];\n                    break;\n                case 14:\n                    pixelRatio = [4, 3];\n                    break;\n                case 15:\n                    pixelRatio = [3, 2];\n                    break;\n                case 16:\n                    pixelRatio = [2, 1];\n                    break;\n                case 255: {\n                    pixelRatio = [\n                        (readUByte() << 8) | readUByte(),\n                        (readUByte() << 8) | readUByte()\n                    ];\n                    break;\n                }\n                default:\n                    pixelRatio = [1, 1];\n                    break;\n                }\n            }\n        }\n        return {\n            width: Math.ceil(\n                (picWidthInMbsMinus1 + 1) * 16 - frameCropLeftOffset * 2 - frameCropRightOffset * 2\n            ),\n            height:\n                (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16\n                - (frameMbsOnlyFlag ? 2 : 4) * (frameCropTopOffset + frameCropBottomOffset),\n            pixelRatio\n        };\n    }\n\n    /**\n     * 获取SliceType\n     */\n    readSliceType(): number {\n        // skip NALu type\n        this.readUByte();\n        // discard first_mb_in_slice\n        this.readUEG();\n        // return slice_type\n        return this.readUEG();\n    }\n}\n\nexport default ExpGolomb;\n","import { avcSample } from '../TSCodecInterface';\n\nfunction createAVCSample(\n    key: boolean,\n    pts: number | undefined,\n    dts: number | undefined,\n    debug: string\n): avcSample {\n    return {\n        key,\n        pts: <number>pts,\n        dts: <number>dts,\n        units: [],\n        debug,\n        frame: false\n    };\n}\n\nexport default createAVCSample;\n","/**\n *  AAC helper\n */\n\nclass AAC {\n    static getSilentFrame(codec: string, channelCount: number) {\n        switch(codec) {\n        case 'mp4a.40.2':\n            if(channelCount === 1) {\n                return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80]);\n            } if(channelCount === 2) {\n                return new Uint8Array([0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80]);\n            } if(channelCount === 3) {\n                return new Uint8Array([\n                    0x00,\n                    0xc8,\n                    0x00,\n                    0x80,\n                    0x20,\n                    0x84,\n                    0x01,\n                    0x26,\n                    0x40,\n                    0x08,\n                    0x64,\n                    0x00,\n                    0x8e\n                ]);\n            } if(channelCount === 4) {\n                return new Uint8Array([\n                    0x00,\n                    0xc8,\n                    0x00,\n                    0x80,\n                    0x20,\n                    0x84,\n                    0x01,\n                    0x26,\n                    0x40,\n                    0x08,\n                    0x64,\n                    0x00,\n                    0x80,\n                    0x2c,\n                    0x80,\n                    0x08,\n                    0x02,\n                    0x38\n                ]);\n            } if(channelCount === 5) {\n                return new Uint8Array([\n                    0x00,\n                    0xc8,\n                    0x00,\n                    0x80,\n                    0x20,\n                    0x84,\n                    0x01,\n                    0x26,\n                    0x40,\n                    0x08,\n                    0x64,\n                    0x00,\n                    0x82,\n                    0x30,\n                    0x04,\n                    0x99,\n                    0x00,\n                    0x21,\n                    0x90,\n                    0x02,\n                    0x38\n                ]);\n            } if(channelCount === 6) {\n                return new Uint8Array([\n                    0x00,\n                    0xc8,\n                    0x00,\n                    0x80,\n                    0x20,\n                    0x84,\n                    0x01,\n                    0x26,\n                    0x40,\n                    0x08,\n                    0x64,\n                    0x00,\n                    0x82,\n                    0x30,\n                    0x04,\n                    0x99,\n                    0x00,\n                    0x21,\n                    0x90,\n                    0x02,\n                    0x00,\n                    0xb2,\n                    0x00,\n                    0x20,\n                    0x08,\n                    0xe0\n                ]);\n            }\n\n            break;\n            // handle HE-AAC below (mp4a.40.5 / mp4a.40.29)\n        default:\n            if(channelCount === 1) {\n                // ffmpeg -y -f lavfi -i \"aevalsrc=0:d=0.05\" -c:a libfdk_aac -profile:a aac_he -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n                return new Uint8Array([\n                    0x1,\n                    0x40,\n                    0x22,\n                    0x80,\n                    0xa3,\n                    0x4e,\n                    0xe6,\n                    0x80,\n                    0xba,\n                    0x8,\n                    0x0,\n                    0x0,\n                    0x0,\n                    0x1c,\n                    0x6,\n                    0xf1,\n                    0xc1,\n                    0xa,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5e\n                ]);\n            } if(channelCount === 2) {\n                // ffmpeg -y -f lavfi -i \"aevalsrc=0|0:d=0.05\" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n                return new Uint8Array([\n                    0x1,\n                    0x40,\n                    0x22,\n                    0x80,\n                    0xa3,\n                    0x5e,\n                    0xe6,\n                    0x80,\n                    0xba,\n                    0x8,\n                    0x0,\n                    0x0,\n                    0x0,\n                    0x0,\n                    0x95,\n                    0x0,\n                    0x6,\n                    0xf1,\n                    0xa1,\n                    0xa,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5e\n                ]);\n            } if(channelCount === 3) {\n                // ffmpeg -y -f lavfi -i \"aevalsrc=0|0|0:d=0.05\" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n                return new Uint8Array([\n                    0x1,\n                    0x40,\n                    0x22,\n                    0x80,\n                    0xa3,\n                    0x5e,\n                    0xe6,\n                    0x80,\n                    0xba,\n                    0x8,\n                    0x0,\n                    0x0,\n                    0x0,\n                    0x0,\n                    0x95,\n                    0x0,\n                    0x6,\n                    0xf1,\n                    0xa1,\n                    0xa,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5a,\n                    0x5e\n                ]);\n            }\n            break;\n        }\n        return null;\n    }\n}\n\nexport default AAC;\n","import { track } from '../TSCodecInterface';\n\n/**\n * Generate MP4 Box\n */\n\n// const UINT32_MAX = Math.pow(2, 32) - 1;\nconst UINT32_MAX = 2 ** 32 - 1;\n\nclass MP4 {\n    static types: Record<string, Array<number>>\n\n    static HDLR_TYPES: Record<string, Uint8Array>\n\n    static STTS: Uint8Array\n\n    static STSC: Uint8Array\n\n    static STCO: Uint8Array\n\n    static STSZ: Uint8Array\n\n    static VMHD: Uint8Array\n\n    static SMHD: Uint8Array\n\n    static STSD: Uint8Array\n\n    static FTYP: Uint8Array\n\n    static DINF: Uint8Array\n\n    static init() {\n        MP4.types = {\n            avc1: [], // codingname\n            avcC: [],\n            btrt: [],\n            dinf: [],\n            dref: [],\n            esds: [],\n            ftyp: [],\n            hdlr: [],\n            mdat: [],\n            mdhd: [],\n            mdia: [],\n            mfhd: [],\n            minf: [],\n            moof: [],\n            moov: [],\n            mp4a: [],\n            '.mp3': [],\n            mvex: [],\n            mvhd: [],\n            pasp: [],\n            sdtp: [],\n            stbl: [],\n            stco: [],\n            stsc: [],\n            stsd: [],\n            stsz: [],\n            stts: [],\n            tfdt: [],\n            tfhd: [],\n            traf: [],\n            trak: [],\n            trun: [],\n            trex: [],\n            tkhd: [],\n            vmhd: [],\n            smhd: []\n        };\n\n        Object.keys(MP4.types).forEach((type) => {\n            MP4.types[type] = [\n                type.charCodeAt(0),\n                type.charCodeAt(1),\n                type.charCodeAt(2),\n                type.charCodeAt(3)\n            ];\n        });\n\n        const videoHdlr = new Uint8Array([\n            0x00, // version 0\n            0x00,\n            0x00,\n            0x00, // flags\n            0x00,\n            0x00,\n            0x00,\n            0x00, // pre_defined\n            0x76,\n            0x69,\n            0x64,\n            0x65, // handler_type: 'vide'\n            0x00,\n            0x00,\n            0x00,\n            0x00, // reserved\n            0x00,\n            0x00,\n            0x00,\n            0x00, // reserved\n            0x00,\n            0x00,\n            0x00,\n            0x00, // reserved\n            0x56,\n            0x69,\n            0x64,\n            0x65,\n            0x6f,\n            0x48,\n            0x61,\n            0x6e,\n            0x64,\n            0x6c,\n            0x65,\n            0x72,\n            0x00 // name: 'VideoHandler'\n        ]);\n\n        const audioHdlr = new Uint8Array([\n            0x00, // version 0\n            0x00,\n            0x00,\n            0x00, // flags\n            0x00,\n            0x00,\n            0x00,\n            0x00, // pre_defined\n            0x73,\n            0x6f,\n            0x75,\n            0x6e, // handler_type: 'soun'\n            0x00,\n            0x00,\n            0x00,\n            0x00, // reserved\n            0x00,\n            0x00,\n            0x00,\n            0x00, // reserved\n            0x00,\n            0x00,\n            0x00,\n            0x00, // reserved\n            0x53,\n            0x6f,\n            0x75,\n            0x6e,\n            0x64,\n            0x48,\n            0x61,\n            0x6e,\n            0x64,\n            0x6c,\n            0x65,\n            0x72,\n            0x00 // name: 'SoundHandler'\n        ]);\n\n        MP4.HDLR_TYPES = {\n            video: videoHdlr,\n            audio: audioHdlr\n        };\n\n        const dref = new Uint8Array([\n            0x00, // version 0\n            0x00,\n            0x00,\n            0x00, // flags\n            0x00,\n            0x00,\n            0x00,\n            0x01, // entry_count\n            0x00,\n            0x00,\n            0x00,\n            0x0c, // entry_size\n            0x75,\n            0x72,\n            0x6c,\n            0x20, // 'url' type\n            0x00, // version 0\n            0x00,\n            0x00,\n            0x01 // entry_flags\n        ]);\n\n        const stco = new Uint8Array([\n            0x00, // version\n            0x00,\n            0x00,\n            0x00, // flags\n            0x00,\n            0x00,\n            0x00,\n            0x00 // entry_count\n        ]);\n        MP4.STCO = stco;\n        MP4.STSC = stco;\n        MP4.STTS = stco;\n\n        MP4.STSZ = new Uint8Array([\n            0x00, // version\n            0x00,\n            0x00,\n            0x00, // flags\n            0x00,\n            0x00,\n            0x00,\n            0x00, // sample_size\n            0x00,\n            0x00,\n            0x00,\n            0x00 // sample_count\n        ]);\n        MP4.VMHD = new Uint8Array([\n            0x00, // version\n            0x00,\n            0x00,\n            0x01, // flags\n            0x00,\n            0x00, // graphicsmode\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00 // opcolor\n        ]);\n        MP4.SMHD = new Uint8Array([\n            0x00, // version\n            0x00,\n            0x00,\n            0x00, // flags\n            0x00,\n            0x00, // balance\n            0x00,\n            0x00 // reserved\n        ]);\n\n        MP4.STSD = new Uint8Array([\n            0x00, // version 0\n            0x00,\n            0x00,\n            0x00, // flags\n            0x00,\n            0x00,\n            0x00,\n            0x01\n        ]); // entry_count\n\n        const majorBrand = new Uint8Array([105, 115, 111, 109]); // isom\n        const avc1Brand = new Uint8Array([97, 118, 99, 49]); // avc1\n        const minorVersion = new Uint8Array([0, 0, 0, 1]);\n\n        MP4.FTYP = MP4.box(MP4.types.ftyp, majorBrand, minorVersion, majorBrand, avc1Brand);\n        MP4.DINF = MP4.box(MP4.types.dinf, MP4.box(MP4.types.dref, dref));\n    }\n\n    /**\n     * 给 MP4 box 填充数据\n     * @param type 代表Box类型的数组\n     * @param mergePayload 合并的 Uint8Array 数据\n     */\n    static box(type: Array<number>, ...mergePayload: Array<Uint8Array>): Uint8Array {\n        const payload = mergePayload;\n        let size = 8;\n        let i = payload.length;\n        const len = i;\n\n        // calculate the total size we need to allocate\n        while(i--) {\n            size += payload[i].byteLength;\n        }\n\n        const result = new Uint8Array(size);\n        result[0] = (size >> 24) & 0xff;\n        result[1] = (size >> 16) & 0xff;\n        result[2] = (size >> 8) & 0xff;\n        result[3] = size & 0xff;\n        result.set(type, 4);\n        // copy the payload into the result\n        for(i = 0, size = 8; i < len; i++) {\n            // copy payload[i] array @ offset size\n            result.set(payload[i], size);\n            size += payload[i].byteLength;\n        }\n        return result;\n    }\n\n    /**\n     * handler, declares the media (handler) type box\n     * @param type 获取的类型\n     */\n    static hdlr(type: string) {\n        return MP4.box(MP4.types.hdlr, MP4.HDLR_TYPES[type]);\n    }\n\n    /**\n     * 填充MDAT数据\n     * @param data 媒体数据\n     */\n    static mdat(data: Uint8Array) {\n        return MP4.box(MP4.types.mdat, data);\n    }\n\n    /**\n     * media header, overall information about the media\n     * @param timescale 时间尺度\n     * @param duration 播放时长\n     */\n    static mdhd(timescale: number, duration: number): Uint8Array {\n        duration *= timescale;\n        const upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));\n        const lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));\n        return MP4.box(\n            MP4.types.mdhd,\n            new Uint8Array([\n                0x01, // version 1\n                0x00,\n                0x00,\n                0x00, // flags\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x02, // creation_time\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x03, // modification_time\n                (timescale >> 24) & 0xff,\n                (timescale >> 16) & 0xff,\n                (timescale >> 8) & 0xff,\n                timescale & 0xff, // timescale\n                upperWordDuration >> 24,\n                (upperWordDuration >> 16) & 0xff,\n                (upperWordDuration >> 8) & 0xff,\n                upperWordDuration & 0xff,\n                lowerWordDuration >> 24,\n                (lowerWordDuration >> 16) & 0xff,\n                (lowerWordDuration >> 8) & 0xff,\n                lowerWordDuration & 0xff,\n                0x55,\n                0xc4, // 'und' language (undetermined)\n                0x00,\n                0x00\n            ])\n        );\n    }\n\n    static mdia(track: track) {\n        return MP4.box(\n            MP4.types.mdia,\n            MP4.mdhd(track.timescale, track.duration as number),\n            MP4.hdlr(track.type),\n            MP4.minf(track)\n        );\n    }\n\n    static mfhd(sequenceNumber: number) {\n        return MP4.box(\n            MP4.types.mfhd,\n            new Uint8Array([\n                0x00,\n                0x00,\n                0x00,\n                0x00, // flags\n                sequenceNumber >> 24,\n                (sequenceNumber >> 16) & 0xff,\n                (sequenceNumber >> 8) & 0xff,\n                sequenceNumber & 0xff // sequence_number\n            ])\n        );\n    }\n\n    /**\n     *  media information container\n     * @param track 一个视频或音频序列\n     */\n    static minf(track: track) {\n        if(track.type === 'audio') {\n            return MP4.box(\n                MP4.types.minf,\n                MP4.box(MP4.types.smhd, MP4.SMHD),\n                MP4.DINF,\n                MP4.stbl(track)\n            );\n        }\n        return MP4.box(\n            MP4.types.minf,\n            MP4.box(MP4.types.vmhd, MP4.VMHD),\n            MP4.DINF,\n            MP4.stbl(track)\n        );\n    }\n\n    /**\n     * movie fragement\n     * @param sn 序列号\n     * @param baseMediaDecodeTime 媒体解码时间\n     * @param track 一个视频或音频序列\n     */\n    static moof(sn: number, baseMediaDecodeTime: number, track: track) {\n        return MP4.box(MP4.types.moof, MP4.mfhd(sn), MP4.traf(track, baseMediaDecodeTime));\n    }\n\n    /**\n     * container for all the metadata\n     * @param tracks 视频或音频序列数组\n     */\n    static moov(tracks: Array<track>) {\n        let i = tracks.length;\n        const boxes = [];\n\n        while(i--) {\n            boxes[i] = MP4.trak(tracks[i]);\n        }\n\n        return MP4.box.call(\n            null,\n            MP4.types.moov,\n            MP4.mvhd(tracks[0].timescale, tracks[0].duration as number),\n            ...boxes,\n            MP4.mvex(tracks)\n        );\n    }\n\n    /**\n     * movie extends box\n     * @param tracks 视频或音频序列数组\n     */\n    static mvex(tracks: Array<track>): Uint8Array {\n        let i = tracks.length;\n        const boxes = [];\n\n        while(i--) {\n            boxes[i] = MP4.trex(tracks[i]);\n        }\n\n        return MP4.box.call(null, MP4.types.mvex, ...boxes);\n    }\n\n    static mvhd(timescale: number, duration: number): Uint8Array {\n        duration *= timescale;\n        const upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));\n        const lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));\n        const bytes = new Uint8Array([\n            0x01, // version 1\n            0x00,\n            0x00,\n            0x00, // flags\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x02, // creation_time\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x03, // modification_time\n            (timescale >> 24) & 0xff,\n            (timescale >> 16) & 0xff,\n            (timescale >> 8) & 0xff,\n            timescale & 0xff, // timescale\n            upperWordDuration >> 24,\n            (upperWordDuration >> 16) & 0xff,\n            (upperWordDuration >> 8) & 0xff,\n            upperWordDuration & 0xff,\n            lowerWordDuration >> 24,\n            (lowerWordDuration >> 16) & 0xff,\n            (lowerWordDuration >> 8) & 0xff,\n            lowerWordDuration & 0xff,\n            0x00,\n            0x01,\n            0x00,\n            0x00, // 1.0 rate\n            0x01,\n            0x00, // 1.0 volume\n            0x00,\n            0x00, // reserved\n            0x00,\n            0x00,\n            0x00,\n            0x00, // reserved\n            0x00,\n            0x00,\n            0x00,\n            0x00, // reserved\n            0x00,\n            0x01,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x01,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x40,\n            0x00,\n            0x00,\n            0x00, // transformation: unity matrix\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            0x00, // pre_defined\n            0xff,\n            0xff,\n            0xff,\n            0xff // next_track_ID\n        ]);\n        return MP4.box(MP4.types.mvhd, bytes);\n    }\n\n    static sdtp(track: track) {\n        const samples = track.samples || [];\n        const bytes = new Uint8Array(4 + samples.length);\n        let flags;\n        let i;\n        // leave the full box header (4 bytes) all zero\n        // write the sample table\n        for(i = 0; i < samples.length; i++) {\n            ({ flags } = samples[i]);\n            bytes[i + 4] = (flags.dependsOn << 4) | (flags.isDependedOn << 2) | flags.hasRedundancy;\n        }\n\n        return MP4.box(MP4.types.sdtp, bytes);\n    }\n\n    static stbl(track: track) {\n        return MP4.box(\n            MP4.types.stbl,\n            MP4.stsd(track),\n            MP4.box(MP4.types.stts, MP4.STTS),\n            MP4.box(MP4.types.stsc, MP4.STSC),\n            MP4.box(MP4.types.stsz, MP4.STSZ),\n            MP4.box(MP4.types.stco, MP4.STCO)\n        );\n    }\n\n    static avc1(track: track) {\n        let sps: Array<number> = [];\n        let pps: Array<number> = [];\n        let i;\n        let data;\n        let len;\n        // assemble the SPSs\n\n        for(i = 0; i < track.sps.length; i++) {\n            data = track.sps[i];\n            len = data.byteLength;\n            sps.push((len >>> 8) & 0xff);\n            sps.push(len & 0xff);\n\n            // SPS\n            sps = sps.concat(Array.prototype.slice.call(data));\n        }\n\n        // assemble the PPSs\n        for(i = 0; i < track.pps.length; i++) {\n            data = track.pps[i];\n            len = data.byteLength;\n            pps.push((len >>> 8) & 0xff);\n            pps.push(len & 0xff);\n\n            pps = pps.concat(Array.prototype.slice.call(data));\n        }\n\n        const avcc = MP4.box(\n            MP4.types.avcC,\n            new Uint8Array(\n                [\n                    0x01, // version\n                    sps[3], // profile\n                    sps[4], // profile compat\n                    sps[5], // level\n                    0xfc | 3, // lengthSizeMinusOne, hard-coded to 4 bytes\n                    0xe0 | track.sps.length // 3bit reserved (111) + numOfSequenceParameterSets\n                ]\n                    .concat(sps)\n                    .concat([\n                        track.pps.length // numOfPictureParameterSets\n                    ])\n                    .concat(pps)\n            )\n        ); // \"PPS\"\n        const { width } = track;\n        const { height } = track;\n        const hSpacing = track.pixelRatio[0];\n        const vSpacing = track.pixelRatio[1];\n\n        return MP4.box(\n            MP4.types.avc1,\n            new Uint8Array([\n                0x00,\n                0x00,\n                0x00, // reserved\n                0x00,\n                0x00,\n                0x00, // reserved\n                0x00,\n                0x01, // data_reference_index\n                0x00,\n                0x00, // pre_defined\n                0x00,\n                0x00, // reserved\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00, // pre_defined\n                (width >> 8) & 0xff,\n                width & 0xff, // width\n                (height >> 8) & 0xff,\n                height & 0xff, // height\n                0x00,\n                0x48,\n                0x00,\n                0x00, // horizresolution\n                0x00,\n                0x48,\n                0x00,\n                0x00, // vertresolution\n                0x00,\n                0x00,\n                0x00,\n                0x00, // reserved\n                0x00,\n                0x01, // frame_count\n                0x12,\n                0x64,\n                0x61,\n                0x69,\n                0x6c, // dailymotion/hls.js\n                0x79,\n                0x6d,\n                0x6f,\n                0x74,\n                0x69,\n                0x6f,\n                0x6e,\n                0x2f,\n                0x68,\n                0x6c,\n                0x73,\n                0x2e,\n                0x6a,\n                0x73,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00, // compressorname\n                0x00,\n                0x18, // depth = 24\n                0x11,\n                0x11\n            ]), // pre_defined = -1\n            avcc,\n            MP4.box(\n                MP4.types.btrt,\n                new Uint8Array([\n                    0x00,\n                    0x1c,\n                    0x9c,\n                    0x80, // bufferSizeDB\n                    0x00,\n                    0x2d,\n                    0xc6,\n                    0xc0, // maxBitrate\n                    0x00,\n                    0x2d,\n                    0xc6,\n                    0xc0\n                ])\n            ), // avgBitrate\n            MP4.box(\n                MP4.types.pasp,\n                new Uint8Array([\n                    hSpacing >> 24, // hSpacing\n                    (hSpacing >> 16) & 0xff,\n                    (hSpacing >> 8) & 0xff,\n                    hSpacing & 0xff,\n                    vSpacing >> 24, // vSpacing\n                    (vSpacing >> 16) & 0xff,\n                    (vSpacing >> 8) & 0xff,\n                    vSpacing & 0xff\n                ])\n            )\n        );\n    }\n\n    static esds(track: track) {\n        const configlen = track.config ? track.config.length : 0;\n        return new Uint8Array(\n            [\n                0x00, // version 0\n                0x00,\n                0x00,\n                0x00, // flags\n\n                0x03, // descriptor_type\n                0x17 + configlen, // length\n                0x00,\n                0x01, // es_id\n                0x00, // stream_priority\n\n                0x04, // descriptor_type\n                0x0f + configlen, // length\n                0x40, // codec : mpeg4_audio\n                0x15, // stream_type\n                0x00,\n                0x00,\n                0x00, // buffer_size\n                0x00,\n                0x00,\n                0x00,\n                0x00, // maxBitrate\n                0x00,\n                0x00,\n                0x00,\n                0x00, // avgBitrate\n\n                0x05 // descriptor_type\n            ]\n                .concat([configlen])\n                .concat(track.config as Array<number>)\n                .concat([0x06, 0x01, 0x02])\n        ); // GASpecificConfig)); // length + audio config descriptor\n    }\n\n    static mp4a(track: track) {\n        const { samplerate } = track;\n        return MP4.box(\n            MP4.types.mp4a,\n            new Uint8Array([\n                0x00,\n                0x00,\n                0x00, // reserved\n                0x00,\n                0x00,\n                0x00, // reserved\n                0x00,\n                0x01, // data_reference_index\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00, // reserved\n                0x00,\n                track.channelCount as number, // channelcount\n                0x00,\n                0x10, // sampleSize:16bits\n                0x00,\n                0x00,\n                0x00,\n                0x00, // reserved2\n                (samplerate >> 8) & 0xff,\n                samplerate & 0xff, //\n                0x00,\n                0x00\n            ]),\n            MP4.box(MP4.types.esds, MP4.esds(track))\n        );\n    }\n\n    static mp3(track: track) {\n        const { samplerate } = track;\n        return MP4.box(\n            MP4.types['.mp3'],\n            new Uint8Array([\n                0x00,\n                0x00,\n                0x00, // reserved\n                0x00,\n                0x00,\n                0x00, // reserved\n                0x00,\n                0x01, // data_reference_index\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00, // reserved\n                0x00,\n                track.channelCount as number, // channelcount\n                0x00,\n                0x10, // sampleSize:16bits\n                0x00,\n                0x00,\n                0x00,\n                0x00, // reserved2\n                (samplerate >> 8) & 0xff,\n                samplerate & 0xff, //\n                0x00,\n                0x00\n            ])\n        );\n    }\n\n    static stsd(track: track) {\n        if(track.type === 'audio') {\n            if(!track.isAAC && track.codec === 'mp3') {\n                return MP4.box(MP4.types.stsd, MP4.STSD, MP4.mp3(track));\n            }\n\n            return MP4.box(MP4.types.stsd, MP4.STSD, MP4.mp4a(track));\n        }\n        return MP4.box(MP4.types.stsd, MP4.STSD, MP4.avc1(track));\n    }\n\n    static tkhd(track: track) {\n        const { id } = track;\n        const duration = (track.duration as number) * track.timescale;\n        const { width } = track;\n        const { height } = track;\n        const upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));\n        const lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));\n        return MP4.box(\n            MP4.types.tkhd,\n            new Uint8Array([\n                0x01, // version 1\n                0x00,\n                0x00,\n                0x07, // flags\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x02, // creation_time\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x03, // modification_time\n                (id >> 24) & 0xff,\n                (id >> 16) & 0xff,\n                (id >> 8) & 0xff,\n                id & 0xff, // track_ID\n                0x00,\n                0x00,\n                0x00,\n                0x00, // reserved\n                upperWordDuration >> 24,\n                (upperWordDuration >> 16) & 0xff,\n                (upperWordDuration >> 8) & 0xff,\n                upperWordDuration & 0xff,\n                lowerWordDuration >> 24,\n                (lowerWordDuration >> 16) & 0xff,\n                (lowerWordDuration >> 8) & 0xff,\n                lowerWordDuration & 0xff,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00, // reserved\n                0x00,\n                0x00, // layer\n                0x00,\n                0x00, // alternate_group\n                0x00,\n                0x00, // non-audio track volume\n                0x00,\n                0x00, // reserved\n                0x00,\n                0x01,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x01,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x00,\n                0x40,\n                0x00,\n                0x00,\n                0x00, // transformation: unity matrix\n                (width >> 8) & 0xff,\n                width & 0xff,\n                0x00,\n                0x00, // width\n                (height >> 8) & 0xff,\n                height & 0xff,\n                0x00,\n                0x00 // height\n            ])\n        );\n    }\n\n    static traf(track: track, baseMediaDecodeTime: number) {\n        const sampleDependencyTable = MP4.sdtp(track);\n        const { id } = track;\n        const upperWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime / (UINT32_MAX + 1));\n        const lowerWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime % (UINT32_MAX + 1));\n        return MP4.box(\n            MP4.types.traf,\n            MP4.box(\n                MP4.types.tfhd,\n                new Uint8Array([\n                    0x00, // version 0\n                    0x00,\n                    0x00,\n                    0x00, // flags\n                    id >> 24,\n                    (id >> 16) & 0xff,\n                    (id >> 8) & 0xff,\n                    id & 0xff // track_ID\n                ])\n            ),\n            MP4.box(\n                MP4.types.tfdt,\n                new Uint8Array([\n                    0x01, // version 1\n                    0x00,\n                    0x00,\n                    0x00, // flags\n                    upperWordBaseMediaDecodeTime >> 24,\n                    (upperWordBaseMediaDecodeTime >> 16) & 0xff,\n                    (upperWordBaseMediaDecodeTime >> 8) & 0xff,\n                    upperWordBaseMediaDecodeTime & 0xff,\n                    lowerWordBaseMediaDecodeTime >> 24,\n                    (lowerWordBaseMediaDecodeTime >> 16) & 0xff,\n                    (lowerWordBaseMediaDecodeTime >> 8) & 0xff,\n                    lowerWordBaseMediaDecodeTime & 0xff\n                ])\n            ),\n            MP4.trun(\n                track,\n                sampleDependencyTable.length\n                + 16 // tfhd\n                + 20 // tfdt\n                + 8 // traf header\n                + 16 // mfhd\n                + 8 // moof header\n                    + 8\n            ), // mdat header\n            sampleDependencyTable\n        );\n    }\n\n    /**\n     * Generate a track box.\n     * @param track {object} a track definition\n     * @return {Uint8Array} the track box\n     */\n    static trak(track: track) {\n        track.duration = track.duration || 0xffffffff;\n        return MP4.box(MP4.types.trak, MP4.tkhd(track), MP4.mdia(track));\n    }\n\n    static trex(track: track) {\n        const { id } = track;\n        return MP4.box(\n            MP4.types.trex,\n            new Uint8Array([\n                0x00, // version 0\n                0x00,\n                0x00,\n                0x00, // flags\n                id >> 24,\n                (id >> 16) & 0xff,\n                (id >> 8) & 0xff,\n                id & 0xff, // track_ID\n                0x00,\n                0x00,\n                0x00,\n                0x01, // default_sample_description_index\n                0x00,\n                0x00,\n                0x00,\n                0x00, // default_sample_duration\n                0x00,\n                0x00,\n                0x00,\n                0x00, // default_sample_size\n                0x00,\n                0x01,\n                0x00,\n                0x01 // default_sample_flags\n            ])\n        );\n    }\n\n    static trun(track: track, offset: number): Uint8Array {\n        const samples = track.samples || [];\n        const len = samples.length;\n        const arraylen = 12 + 16 * len;\n        const array = new Uint8Array(arraylen);\n        let i;\n        let sample;\n        let duration;\n        let size;\n        let flags;\n        let cts;\n        offset += 8 + arraylen;\n        array.set(\n            [\n                0x00, // version 0\n                0x00,\n                0x0f,\n                0x01, // flags\n                (len >>> 24) & 0xff,\n                (len >>> 16) & 0xff,\n                (len >>> 8) & 0xff,\n                len & 0xff, // sample_count\n                (offset >>> 24) & 0xff,\n                (offset >>> 16) & 0xff,\n                (offset >>> 8) & 0xff,\n                offset & 0xff // data_offset\n            ],\n            0\n        );\n        for(i = 0; i < len; i++) {\n            sample = samples[i];\n            ({\n                duration, size, flags, cts\n            } = sample);\n            array.set(\n                [\n                    (duration >>> 24) & 0xff,\n                    (duration >>> 16) & 0xff,\n                    (duration >>> 8) & 0xff,\n                    duration & 0xff, // sample_duration\n                    (size >>> 24) & 0xff,\n                    (size >>> 16) & 0xff,\n                    (size >>> 8) & 0xff,\n                    size & 0xff, // sample_size\n                    (flags.isLeading << 2) | flags.dependsOn,\n                    (flags.isDependedOn << 6)\n                        | (flags.hasRedundancy << 4)\n                        | (flags.paddingValue << 1)\n                        | flags.isNonSync,\n                    flags.degradPrio & (0xf0 << 8),\n                    flags.degradPrio & 0x0f, // sample_flags\n                    (cts >>> 24) & 0xff,\n                    (cts >>> 16) & 0xff,\n                    (cts >>> 8) & 0xff,\n                    cts & 0xff // sample_composition_time_offset\n                ],\n                12 + 16 * i\n            );\n        }\n        return MP4.box(MP4.types.trun, array);\n    }\n\n    static initSegment(tracks: Array<track>) {\n        if(!MP4.types) {\n            MP4.init();\n        }\n        const movie = MP4.moov(tracks);\n        const result = new Uint8Array(MP4.FTYP.byteLength + movie.byteLength);\n        result.set(MP4.FTYP);\n        result.set(movie, MP4.FTYP.byteLength);\n        return result;\n    }\n}\n\nexport default MP4;\n","/**\n * fMP4 remuxer\n */\n\nimport EventEmitter from 'eventemitter3';\nimport AAC from './aac-helper';\nimport MP4 from './mp4-generator';\nimport Events from '../Events/index';\nimport { ErrorTypes, ErrorDetails } from '../errors';\nimport logger from '../../../Utils/Logger';\nimport SampleInfo from '../../../Utils/SampleInfo';\n\nimport {\n    typeSupported,\n    track,\n    NALUnit,\n    avcSample,\n    TSAudioTrack,\n    TSVideoTrack,\n    TSId3Track,\n    TSTextTrack,\n    aacSample,\n    TSVideoData,\n    TSAudioData,\n    agentInfo\n} from '../TSCodecInterface';\n\n// 10 seconds\nconst MAX_SILENT_FRAME_DURATION = 10 * 1000;\n\nclass MP4Remuxer {\n    /**\n     * 事件中心\n     */\n    emitter: EventEmitter\n\n    /**\n     * 设置\n     */\n    config: any\n\n    /**\n     * MediaSource 播放类型支持\n     */\n    typeSupported: typeSupported\n\n    /**\n     * 浏览器代理信息\n     */\n    agentInfo: agentInfo\n\n    /**\n     * 是否为safari浏览器\n     */\n    isSafari: boolean\n\n    /**\n     * initSegment 是否已经产生了\n     */\n    ISGenerated: boolean\n\n    /**\n     * 初始的PTS\n     */\n    private _initPTS: number | undefined\n\n    /**\n     * 初始的DTS时间\n     */\n    private _initDTS: number | undefined\n\n    /**\n     * 下一个AVC的DTS时间\n     */\n    nextAvcDts: number | undefined\n\n    /**\n     * 下一段音频的展示时间\n     */\n    nextAudioPts: number | undefined\n\n    constructor(\n        emitter: EventEmitter,\n        config: any,\n        typeSupported: typeSupported,\n        agentInfo: agentInfo\n    ) {\n        this.emitter = emitter;\n        this.config = config;\n        this.typeSupported = typeSupported;\n        this.agentInfo = agentInfo;\n        const { userAgent } = agentInfo;\n        this.isSafari = Boolean(\n            agentInfo.vendor\n                && agentInfo.vendor.indexOf('Apple') > -1\n                && userAgent\n                && !userAgent.match('CriOS')\n        );\n        this.ISGenerated = false;\n        this._initPTS = undefined;\n        this._initDTS = undefined;\n        this.nextAvcDts = undefined;\n        this.nextAudioPts = undefined;\n    }\n\n    static Tag: 'MP4Remuxer'\n\n    destroy() {\n        delete (this as any).config;\n        delete (this as any).typeSupported;\n        this.emitter.removeAllListeners();\n        delete (this as any).emitter;\n        delete (this as any).config;\n        delete (this as any).typeSupported;\n        delete (this as any).agentInfo;\n    }\n\n    resetTimeStamp(defaultTimeStamp: number | undefined) {\n        this._initDTS = defaultTimeStamp;\n        this._initPTS = defaultTimeStamp;\n    }\n\n    resetInitSegment() {\n        this.ISGenerated = false;\n    }\n\n    remux(\n        audioTrack: TSAudioTrack,\n        videoTrack: TSVideoTrack,\n        id3Track: TSId3Track,\n        textTrack: TSTextTrack,\n        timeOffset: number,\n        contiguous: boolean,\n        accurateTimeOffset: boolean\n    ) {\n        // generate Init Segment if needed\n        if(!this.ISGenerated) {\n            this.generateIS(audioTrack, videoTrack, timeOffset);\n        }\n\n        if(this.ISGenerated) {\n            const nbAudioSamples = audioTrack.samples.length;\n            const nbVideoSamples = videoTrack.samples.length;\n            let audioTimeOffset = timeOffset;\n            let videoTimeOffset = timeOffset;\n            if(nbAudioSamples && nbVideoSamples) {\n                // timeOffset is expected to be the offset of the first timestamp of this fragment (first DTS)\n                // if first audio DTS is not aligned with first video DTS then we need to take that into account\n                // when providing timeOffset to remuxAudio / remuxVideo. if we don't do that, there might be a permanent / small\n                // drift between audio and video streams\n                const audiovideoDeltaDts = (audioTrack.samples[0].pts - videoTrack.samples[0].pts)\n                    / videoTrack.inputTimeScale;\n                audioTimeOffset += Math.max(0, audiovideoDeltaDts);\n                videoTimeOffset += Math.max(0, -audiovideoDeltaDts);\n            }\n            // Purposefully remuxing audio before video, so that remuxVideo can use nextAudioPts, which is\n            // calculated in remuxAudio.\n            // logger.log('nb AAC samples:' + audioTrack.samples.length);\n            if(nbAudioSamples) {\n                // if initSegment was generated without video samples, regenerate it again\n                if(!audioTrack.timescale) {\n                    logger.warn(MP4Remuxer.Tag, 'regenerate InitSegment as audio detected');\n                    this.generateIS(audioTrack, videoTrack, timeOffset);\n                }\n                const audioData = this.remuxAudio(\n                    audioTrack,\n                    audioTimeOffset,\n                    contiguous,\n                    accurateTimeOffset\n                );\n                // logger.log('nb AVC samples:' + videoTrack.samples.length);\n                if(nbVideoSamples) {\n                    let audioTrackLength;\n                    if(audioData) {\n                        audioTrackLength = audioData.endPTS - audioData.startPTS;\n                    }\n\n                    // if initSegment was generated without video samples, regenerate it again\n                    if(!videoTrack.timescale) {\n                        logger.warn(MP4Remuxer.Tag, 'regenerate InitSegment as video detected');\n                        this.generateIS(audioTrack, videoTrack, timeOffset);\n                    }\n                    this.remuxVideo(\n                        videoTrack,\n                        videoTimeOffset,\n                        contiguous,\n                        audioTrackLength,\n                        accurateTimeOffset\n                    );\n                }\n            } else {\n                // logger.log('nb AVC samples:' + videoTrack.samples.length);\n                if(nbVideoSamples) {\n                    const videoData = this.remuxVideo(\n                        videoTrack,\n                        videoTimeOffset,\n                        contiguous,\n                        0,\n                        accurateTimeOffset\n                    );\n                    if(videoData && audioTrack.codec) {\n                        this.remuxEmptyAudio(audioTrack, audioTimeOffset, contiguous, videoData);\n                    }\n                }\n            }\n        }\n        // logger.log('nb ID3 samples:' + audioTrack.samples.length);\n        if(id3Track.samples.length) {\n            this.remuxID3(id3Track);\n        }\n\n        // logger.log('nb ID3 samples:' + audioTrack.samples.length);\n        if(textTrack.samples.length) {\n            this.remuxText(textTrack);\n        }\n\n        // notify end of parsing\n        this.emitter.emit(Events.FRAG_PARSED);\n        // 加载下一个 Fragment\n        this.emitter.emit(Events.LOAD_NEXT_FRAG);\n    }\n\n    generateIS(audioTrack: TSAudioTrack, videoTrack: TSVideoTrack, timeOffset: number) {\n        const { emitter } = this;\n        const audioSamples = audioTrack.samples;\n        const videoSamples = videoTrack.samples;\n        const { typeSupported } = this;\n        let container = 'audio/mp4';\n        const tracks = Object.create(null);\n        const data = { tracks };\n        const computePTSDTS = this._initPTS === undefined;\n        let initPTS: number | undefined;\n        let initDTS: number | undefined;\n\n        if(computePTSDTS) {\n            initDTS = Infinity;\n            initPTS = Infinity;\n        }\n\n        if(audioTrack.config && audioSamples.length) {\n            // let's use audio sampling rate as MP4 time scale.\n            // rationale is that there is a integer nb of audio frames per audio sample (1024 for AAC)\n            // using audio sampling rate here helps having an integer MP4 frame duration\n            // this avoids potential rounding issue and AV sync issue\n            audioTrack.timescale = audioTrack.samplerate;\n            logger.info(MP4Remuxer.Tag, `audio sampling rate : ${audioTrack.samplerate}`);\n            if(!audioTrack.isAAC) {\n                if(typeSupported.mpeg) {\n                    // Chrome and Safari\n                    container = 'audio/mpeg';\n                    audioTrack.codec = '';\n                } else if(typeSupported.mp3) {\n                    // Firefox\n                    audioTrack.codec = 'mp3';\n                }\n            }\n            tracks.audio = {\n                container,\n                codec: audioTrack.codec,\n                initSegment:\n                    !audioTrack.isAAC && typeSupported.mpeg\n                        ? new Uint8Array()\n                        : MP4.initSegment([audioTrack]),\n                metadata: {\n                    channelCount: audioTrack.channelCount\n                },\n                mediaDuration: audioTrack.duration || 0\n            };\n            if(computePTSDTS) {\n                // remember first PTS of this demuxing context. for audio, PTS = DTS\n                initDTS = audioSamples[0].pts - audioTrack.inputTimeScale * timeOffset;\n                initPTS = initDTS;\n            }\n        }\n\n        if(videoTrack.sps && videoTrack.pps && videoSamples.length) {\n            // let's use input time scale as MP4 video timescale\n            // we use input time scale straight away to avoid rounding issues on frame duration / cts computation\n            const { inputTimeScale } = videoTrack;\n            videoTrack.timescale = inputTimeScale;\n            tracks.video = {\n                container: 'video/mp4',\n                codec: videoTrack.codec,\n                initSegment: MP4.initSegment([videoTrack]),\n                metadata: {\n                    width: videoTrack.width,\n                    height: videoTrack.height\n                },\n                mediaDuration: videoTrack.duration\n            };\n            if(computePTSDTS) {\n                initPTS = Math.min(\n                    initPTS as number,\n                    videoSamples[0].pts - inputTimeScale * timeOffset\n                );\n                initDTS = Math.min(\n                    initDTS as number,\n                    videoSamples[0].dts - inputTimeScale * timeOffset\n                );\n                this.emitter.emit(Events.INIT_PTS_FOUND, { initPTS });\n            }\n        }\n\n        const trackNames: Array<string> = Object.keys(tracks);\n\n        if(trackNames.length) {\n            trackNames.forEach((trackName) => {\n                const track = tracks[trackName];\n                const { initSegment } = track;\n                logger.debug(\n                    MP4Remuxer.Tag,\n                    `main track:${trackName},container:${track.container},codecs[level/parsed]=[${track.levelCodec}/${track.codec}]`\n                );\n                if(initSegment) {\n                    // TODO mediaDuration 暂时写0\n                    emitter.emit(Events.INIT_SEGMENT,\n                        'initSegment',\n                        {\n                            type: trackName,\n                            data: initSegment,\n                            parent: 'main',\n                            content: 'initSegment',\n                            mediaDuration: track.mediaDuration,\n                            codec: track.codec,\n                            container: track.container\n                        });\n                }\n                this.ISGenerated = true;\n                if(computePTSDTS) {\n                    this._initPTS = initPTS;\n                    this._initDTS = initDTS;\n                }\n            });\n        } else {\n            emitter.emit(Events.ERROR, {\n                type: ErrorTypes.MEDIA_ERROR,\n                details: ErrorDetails.FRAG_PARSING_ERROR,\n                fatal: false,\n                reason: 'no audio/video samples found'\n            });\n        }\n    }\n\n    remuxVideo(\n        track: track,\n        timeOffset: number,\n        contiguous: boolean,\n        audioTrackLength: number | undefined,\n        accurateTimeOffset: boolean\n    ): TSVideoData | undefined {\n        let offset = 8;\n        let mp4SampleDuration;\n        let mdat;\n        let firstPTS;\n        let firstDTS;\n        const timeScale: number = track.timescale;\n        const inputSamples: Array<avcSample> = track.samples;\n        const outputSamples = [];\n        const nbSamples: number = inputSamples.length;\n        const ptsNormalize = this._PTSNormalize;\n        const initPTS = this._initPTS;\n        let originalBeginDts = 0;\n        let originalEndDts = 0;\n        // if parsed fragment is contiguous with last one, let's use last DTS value as reference\n        let { nextAvcDts } = this;\n        const { isSafari } = this;\n        const syncPoints: Array<SampleInfo> = [];\n        if(nbSamples === 0) {\n            return;\n        }\n\n        // Safari does not like overlapping DTS on consecutive fragments. let's use nextAvcDts to overcome this if fragments are consecutive\n        if(isSafari) {\n            // also consider consecutive fragments as being contiguous (even if a level switch occurs),\n            // for sake of clarity:\n            // consecutive fragments are frags with\n            //  - less than 100ms gaps between new time offset (if accurate) and next expected PTS OR\n            //  - less than 200 ms PTS gaps (timeScale/5)\n            const judgement1 = accurateTimeOffset && Math.abs(timeOffset - <number>nextAvcDts / timeScale) < 0.1;\n            const judgement2 = Math.abs(<number>inputSamples[0].pts - <number>nextAvcDts - <number>initPTS)\n                < timeScale / 5;\n            const tempContiguous: boolean = Boolean(\n                inputSamples.length && nextAvcDts && (judgement1 || judgement2)\n            );\n\n            contiguous = tempContiguous || contiguous;\n        }\n\n        if(!contiguous) {\n            // if not contiguous, let's use target timeOffset\n            nextAvcDts = timeOffset * timeScale;\n        }\n\n        /**\n         * 格式化segment输出而设置的值\n         */\n        originalBeginDts = (inputSamples[0].dts * 1000) / track.inputTimeScale;\n        originalEndDts = (inputSamples[inputSamples.length - 1].dts * 1000) / track.inputTimeScale;\n\n        // PTS is coded on 33bits, and can loop from -2^32 to 2^32\n        // ptsNormalize will make PTS/DTS value monotonic, we use last known DTS value as reference value\n\n        inputSamples.forEach((sample) => {\n            sample.pts = ptsNormalize(<number>sample.pts - <number>initPTS, nextAvcDts);\n            sample.dts = ptsNormalize(<number>sample.dts - <number>initPTS, nextAvcDts);\n        });\n\n        // sort video samples by DTS then PTS then demux id order\n        inputSamples.sort((a, b) => {\n            const deltadts = <number>a.dts - <number>b.dts;\n            const deltapts = <number>a.pts - <number>b.pts;\n            return deltadts || (deltapts || a.id - b.id);\n        });\n\n        // handle broken streams with PTS < DTS, tolerance up 200ms (18000 in 90kHz timescale)\n        const PTSDTSshift = inputSamples.reduce(\n            (prev, curr) => Math.max(Math.min(prev, curr.pts - curr.dts), -18000),\n            0\n        );\n        if(PTSDTSshift < 0) {\n            logger.warn(\n                MP4Remuxer.Tag,\n                `PTS < DTS detected in video samples, shifting DTS by ${Math.round(\n                    PTSDTSshift / 90\n                )} ms to overcome this issue`\n            );\n            for(let i = 0; i < inputSamples.length; i++) {\n                inputSamples[i].dts += PTSDTSshift;\n            }\n        }\n\n        // compute first DTS and last DTS, normalize them against reference value\n        let sample = inputSamples[0];\n        firstDTS = Math.max(sample.dts, 0);\n        firstPTS = Math.max(sample.pts, 0);\n\n        // check timestamp continuity accross consecutive fragments (this is to remove inter-fragment gap/hole)\n        const delta = Math.round((firstDTS - (nextAvcDts as number)) / 90);\n        // if fragment are contiguous, detect hole/overlapping between fragments\n        if(contiguous) {\n            if(delta) {\n                if(delta > 1) {\n                    logger.log(\n                        MP4Remuxer.Tag,\n                        `AVC:${delta} ms hole between fragments detected,filling it`\n                    );\n                } else if(delta < -1) {\n                    logger.log(\n                        MP4Remuxer.Tag,\n                        `AVC:${-delta} ms overlapping between fragments detected`\n                    );\n                }\n\n                // remove hole/gap : set DTS to next expected DTS\n                firstDTS = nextAvcDts;\n                inputSamples[0].dts = <number>firstDTS;\n                // offset PTS as well, ensure that PTS is smaller or equal than new DTS\n                firstPTS = Math.max(firstPTS - delta, nextAvcDts as number);\n                inputSamples[0].pts = firstPTS;\n                logger.log(\n                    MP4Remuxer.Tag,\n                    `Video/PTS/DTS adjusted: ${Math.round(firstPTS / 90)}/${Math.round(\n                        <number>firstDTS / 90\n                    )},delta:${delta} ms`\n                );\n            }\n        }\n\n        // compute lastPTS/lastDTS\n        sample = inputSamples[inputSamples.length - 1];\n        const lastDTS = Math.max(sample.dts, 0);\n        const lastPTS = Math.max(sample.pts, 0, lastDTS);\n\n        // on Safari let's signal the same sample duration for all samples\n        // sample duration (as expected by trun MP4 boxes), should be the delta between sample DTS\n        // set this constant duration as being the avg delta between consecutive DTS.\n        if(isSafari) {\n            mp4SampleDuration = Math.round((lastDTS - <number>firstDTS) / (inputSamples.length - 1));\n        }\n\n        let nbNalu = 0;\n        let naluLen = 0;\n\n        for(let i = 0; i < nbSamples; i++) {\n            // compute total/avc sample length and nb of NAL units\n            const sample = inputSamples[i];\n            const { units } = sample;\n            const nbUnits = units.length;\n            let sampleLen = 0;\n            for(let j = 0; j < nbUnits; j++) {\n                sampleLen += units[j].data.length;\n            }\n\n            naluLen += sampleLen;\n            nbNalu += nbUnits;\n            sample.length = sampleLen;\n\n            // normalize PTS/DTS\n            if(isSafari) {\n                // sample DTS is computed using a constant decoding offset (mp4SampleDuration) between samples\n                sample.dts = <number>firstDTS + i * <number>mp4SampleDuration;\n            } else {\n                // ensure sample monotonic DTS\n                sample.dts = Math.max(sample.dts, <number>firstDTS);\n            }\n            // ensure that computed value is greater or equal than sample DTS\n            sample.pts = Math.max(sample.pts, sample.dts);\n        }\n\n        /* concatenate the video data and construct the mdat in place\n      (need 8 more bytes to fill length and mpdat type) */\n        const mdatSize = naluLen + 4 * nbNalu + 8;\n\n        try {\n            mdat = new Uint8Array(mdatSize);\n        } catch (err) {\n            this.emitter.emit(Events.ERROR, {\n                type: ErrorTypes.MUX_ERROR,\n                details: ErrorDetails.REMUX_ALLOC_ERROR,\n                fatal: false,\n                bytes: mdatSize,\n                reason: `fail allocating video mdat ${mdatSize}`\n            });\n            return;\n        }\n\n        const view = new DataView(mdat.buffer);\n\n        view.setUint32(0, mdatSize);\n\n        mdat.set(MP4.types.mdat, 4);\n\n        for(let i = 0; i < nbSamples; i++) {\n            const avcSample: avcSample = inputSamples[i];\n            const avcSampleUnits: Array<NALUnit> = avcSample.units;\n            let mp4SampleLength = 0;\n            let compositionTimeOffset;\n            // convert NALU bitstream to MP4 format (prepend NALU with size field)\n            for(let j = 0, nbUnits = avcSampleUnits.length; j < nbUnits; j++) {\n                const unit = avcSampleUnits[j];\n                const unitData = unit.data;\n                const unitDataLen = unit.data.byteLength;\n                view.setUint32(offset, unitDataLen);\n                offset += 4;\n                mdat.set(unitData, offset);\n                offset += unitDataLen;\n                mp4SampleLength += 4 + unitDataLen;\n            }\n\n            if(!isSafari) {\n                // expected sample duration is the Decoding Timestamp diff of consecutive samples\n                if(i < nbSamples - 1) {\n                    mp4SampleDuration = inputSamples[i + 1].dts - avcSample.dts;\n                } else {\n                    const { config } = this;\n                    const lastFrameDuration = avcSample.dts - inputSamples[i > 0 ? i - 1 : i].dts;\n                    if(config.stretchShortVideoTrack) {\n                        // In some cases, a segment's audio track duration may exceed the video track duration.\n                        // Since we've already remuxed audio, and we know how long the audio track is, we look to\n                        // see if the delta to the next segment is longer than maxBufferHole.\n                        // If so, playback would potentially get stuck, so we artificially inflate\n                        // the duration of the last frame to minimize any potential gap between segments.\n                        const { maxBufferHole } = config;\n                        const gapTolerance = Math.floor(maxBufferHole * timeScale);\n                        const deltaToFrameEnd = (audioTrackLength\n                            ? firstPTS + audioTrackLength * timeScale\n                            : <number> this.nextAudioPts) - avcSample.pts;\n\n                        if(deltaToFrameEnd > gapTolerance) {\n                            // We subtract lastFrameDuration from deltaToFrameEnd to try to prevent any video\n                            // frame overlap. maxBufferHole should be >> lastFrameDuration anyway.\n                            mp4SampleDuration = deltaToFrameEnd - lastFrameDuration;\n                            if(mp4SampleDuration < 0) {\n                                mp4SampleDuration = lastFrameDuration;\n                            }\n\n                            logger.log(\n                                MP4Remuxer.Tag,\n                                `It is approximately ${deltaToFrameEnd\n                                    / 90} ms to the next segment; using duration ${mp4SampleDuration\n                                    / 90} ms for the last video frame.`\n                            );\n                        } else {\n                            mp4SampleDuration = lastFrameDuration;\n                        }\n                    } else {\n                        mp4SampleDuration = lastFrameDuration;\n                    }\n                }\n                compositionTimeOffset = Math.round(avcSample.pts - avcSample.dts);\n            } else {\n                compositionTimeOffset = Math.max(\n                    0,\n                    <number>mp4SampleDuration\n                        * Math.round((avcSample.pts - avcSample.dts) / <number>mp4SampleDuration)\n                );\n            }\n\n            outputSamples.push({\n                size: mp4SampleLength,\n                // constant duration\n                duration: mp4SampleDuration,\n                cts: compositionTimeOffset,\n                dts: avcSample.dts,\n                pts: avcSample.pts,\n                keyframe: avcSample.key && avcSample.frame,\n                originalDts: avcSample.dts,\n                flags: {\n                    isLeading: 0,\n                    isDependedOn: 0,\n                    hasRedundancy: 0,\n                    degradPrio: 0,\n                    dependsOn: avcSample.key ? 2 : 1,\n                    isNonSync: avcSample.key ? 0 : 1\n                }\n            });\n        }\n        // next AVC sample DTS should be equal to last sample DTS + last sample duration (in PES timescale)\n        this.nextAvcDts = lastDTS + <number>mp4SampleDuration;\n        const { dropped } = track;\n        track.nbNalu = 0;\n        track.dropped = 0;\n        if(outputSamples.length && navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {\n            const { flags } = outputSamples[0];\n            // chrome workaround, mark first sample as being a Random Access Point to avoid sourcebuffer append issue\n            // https://code.google.com/p/chromium/issues/detail?id=229412\n            flags.dependsOn = 2;\n            flags.isNonSync = 0;\n        }\n        track.samples = outputSamples;\n        outputSamples.forEach((sample) => {\n            if(sample.keyframe) {\n                // 关键帧\n                syncPoints.push(\n                    new SampleInfo(\n                        (sample.dts * 1000) / track.inputTimeScale,\n                        (sample.pts * 1000) / track.inputTimeScale,\n                        0,\n                        Math.ceil((sample.pts * 1000) / track.inputTimeScale),\n                        true\n                    )\n                );\n            }\n        });\n        const firstSample = new SampleInfo(\n            outputSamples[0].dts,\n            outputSamples[0].pts,\n            <number>outputSamples[0].duration,\n            outputSamples[0].originalDts,\n            false\n        );\n        const lastSample = new SampleInfo(\n            outputSamples[outputSamples.length - 1].dts,\n            outputSamples[outputSamples.length - 1].pts,\n            <number>outputSamples[outputSamples.length - 1].duration,\n            outputSamples[outputSamples.length - 1].originalDts,\n            false\n        );\n\n        const moof = MP4.moof(track.sequenceNumber++, <number>firstDTS, track);\n        track.samples = [];\n        const mergeData = this._mergeBoxes(moof, mdat);\n        const data: TSVideoData = {\n            data1: moof,\n            data2: mdat,\n            startPTS: firstPTS / timeScale,\n            endPTS: (lastPTS + <number>mp4SampleDuration) / timeScale,\n            startDTS: <number>firstDTS / timeScale,\n            endDTS: this.nextAvcDts / timeScale,\n            type: 'video',\n            hasAudio: false,\n            hasVideo: true,\n            nb: outputSamples.length,\n            dropped\n        };\n\n        const segment = {\n            type: 'video',\n            data: mergeData,\n            sampleCount: nbSamples,\n            info: {\n                beginDts: <number>firstDTS / timeScale,\n                beginPts: firstPTS / timeScale,\n                endDts: this.nextAvcDts / timeScale,\n                endPts: (lastPTS + <number>mp4SampleDuration) / timeScale,\n                originalBeginDts,\n                originalEndDts,\n                syncPoints,\n                firstSample,\n                lastSample\n            }\n        };\n        this.emitter.emit(Events.MEDIA_SEGMENT, 'video', segment);\n        return data;\n    }\n\n    remuxAudio(\n        track: TSAudioTrack,\n        timeOffset: number,\n        contiguous: boolean,\n        accurateTimeOffset?: boolean\n    ): TSAudioData | null {\n        const { inputTimeScale } = track;\n        const mp4timeScale = track.timescale;\n        const scaleFactor = inputTimeScale / mp4timeScale;\n        const mp4SampleDuration = track.isAAC ? 1024 : 1152;\n        const inputSampleDuration = mp4SampleDuration * scaleFactor;\n        const ptsNormalize = this._PTSNormalize;\n        const initPTS = this._initPTS;\n        const rawMPEG = !track.isAAC && this.typeSupported.mpeg;\n\n        let mp4Sample = Object.create(null);\n        let fillFrame;\n        let mdat;\n        let moof;\n        let firstPTS;\n        let lastPTS;\n        let offset = rawMPEG ? 0 : 8;\n        let inputSamples = track.samples;\n        const outputSamples = [];\n        let nextAudioPts = <number> this.nextAudioPts;\n\n        // for audio samples, also consider consecutive fragments as being contiguous (even if a level switch occurs),\n        // for sake of clarity:\n        // consecutive fragments are frags with\n        //  - less than 100ms gaps between new time offset (if accurate) and next expected PTS OR\n        //  - less than 20 audio frames distance\n        // contiguous fragments are consecutive fragments from same quality level (same level, new SN = old SN + 1)\n        // this helps ensuring audio continuity\n        // and this also avoids audio glitches/cut when switching quality, or reporting wrong duration on first audio frame\n        const judgement1 = accurateTimeOffset && Math.abs(timeOffset - <number>nextAudioPts / inputTimeScale) < 0.1;\n        const judgement2 = Math.abs(inputSamples[0].pts - <number>nextAudioPts - <number>initPTS)\n            < 20 * inputSampleDuration;\n\n        contiguous = Boolean(\n            contiguous || (inputSamples.length && nextAudioPts && (judgement1 || judgement2))\n        );\n\n        // compute normalized PTS\n        inputSamples.forEach((sample: aacSample) => {\n            sample.dts = ptsNormalize(\n                sample.pts - <number>initPTS,\n                timeOffset * inputTimeScale\n            );\n            sample.pts = sample.dts;\n        });\n\n        // filter out sample with negative PTS that are not playable anyway\n        // if we don't remove these negative samples, they will shift all audio samples forward.\n        // leading to audio overlap between current / next fragment\n        inputSamples = inputSamples.filter((sample: aacSample) => sample.pts >= 0);\n\n        // in case all samples have negative PTS, and have been filtered out, return now\n        if(inputSamples.length === 0) {\n            return null;\n        }\n        const originalBeginDts = inputSamples[0].dts;\n        const originalEndDts = inputSamples[inputSamples.length - 1].dts;\n\n        if(!contiguous) {\n            if(!accurateTimeOffset) {\n                // if frag are mot contiguous and if we cant trust time offset, let's use first sample PTS as next audio PTS\n                nextAudioPts = inputSamples[0].pts;\n            } else {\n                // if timeOffset is accurate, let's use it as predicted next audio PTS\n                nextAudioPts = timeOffset * inputTimeScale;\n            }\n        }\n\n        // If the audio track is missing samples, the frames seem to get \"left-shifted\" within the\n        // resulting mp4 segment, causing sync issues and leaving gaps at the end of the audio segment.\n        // In an effort to prevent this from happening, we inject frames here where there are gaps.\n        // When possible, we inject a silent frame; when that's not possible, we duplicate the last\n        // frame.\n\n        if(track.isAAC) {\n            const { maxAudioFramesDrift } = this.config;\n            for(let i = 0, nextPts = nextAudioPts; i < inputSamples.length;) {\n                // First, let's see how far off this frame is from where we expect it to be\n                const sample = inputSamples[i];\n                const { pts } = sample;\n                const delta = pts - nextPts;\n\n                const duration = Math.abs((1000 * delta) / inputTimeScale);\n\n                // If we're overlapping by more than a duration, drop this sample\n                if(delta <= -maxAudioFramesDrift * inputSampleDuration) {\n                    logger.warn(\n                        MP4Remuxer.Tag,\n                        `Dropping 1 audio frame @ ${(nextPts / inputTimeScale).toFixed(\n                            3\n                        )}s due to ${Math.round(duration)} ms overlap.`\n                    );\n                    inputSamples.splice(i, 1);\n                    // Don't touch nextPtsNorm or i\n                } // eslint-disable-line brace-style\n\n                // Insert missing frames if:\n                // 1: We're more than maxAudioFramesDrift frame away\n                // 2: Not more than MAX_SILENT_FRAME_DURATION away\n                // 3: currentTime (aka nextPtsNorm) is not 0\n                else if(\n                    delta >= maxAudioFramesDrift * inputSampleDuration\n                    && duration < MAX_SILENT_FRAME_DURATION\n                    && nextPts\n                ) {\n                    const missing = Math.round(delta / inputSampleDuration);\n                    logger.warn(\n                        MP4Remuxer.Tag,\n                        `Injecting ${missing} audio frame @ ${(nextPts / inputTimeScale).toFixed(\n                            3\n                        )}s due to ${Math.round((1000 * delta) / inputTimeScale)} ms gap.`\n                    );\n                    for(let j = 0; j < missing; j++) {\n                        const newStamp = Math.max(nextPts, 0);\n                        fillFrame = AAC.getSilentFrame(\n                            track.manifestCodec || track.codec,\n                            track.channelCount\n                        );\n                        if(!fillFrame) {\n                            logger.log(\n                                MP4Remuxer.Tag,\n                                'Unable to get silent frame for given audio codec; duplicating last frame instead.'\n                            );\n                            fillFrame = sample.unit.subarray(0); // 新标准begin是可以选择不传的\n                        }\n                        inputSamples.splice(i, 0, { unit: fillFrame, pts: newStamp, dts: newStamp });\n                        nextPts += inputSampleDuration;\n                        i++;\n                    }\n\n                    // Adjust sample to next expected pts\n                    sample.dts = nextPts;\n                    sample.pts = nextPts;\n                    nextPts += inputSampleDuration;\n                    i++;\n                } else {\n                    // Otherwise, just adjust pts\n                    if(Math.abs(delta) > 0.1 * inputSampleDuration) {\n                        // logger.log(`Invalid frame delta ${Math.round(delta + inputSampleDuration)} at PTS ${Math.round(pts / 90)} (should be ${Math.round(inputSampleDuration)}).`);\n                    }\n                    sample.dts = nextPts;\n                    sample.pts = nextPts;\n                    nextPts += inputSampleDuration;\n                    i++;\n                }\n            }\n        }\n\n        // compute mdat size, as we eventually filtered/added some samples\n        let nbSamples = inputSamples.length;\n        let mdatSize = 0;\n        while(nbSamples--) {\n            mdatSize += inputSamples[nbSamples].unit.byteLength;\n        }\n\n        for(let j = 0, nbSamples = inputSamples.length; j < nbSamples; j++) {\n            const audioSample = inputSamples[j];\n            const { unit } = audioSample;\n            let { pts } = audioSample;\n            // logger.log(`Audio/PTS:${Math.round(pts/90)}`);\n            // if not first sample\n            if(lastPTS !== undefined) {\n                mp4Sample.duration = Math.round((pts - lastPTS) / scaleFactor);\n            } else {\n                const delta = Math.round((1000 * (pts - <number>nextAudioPts)) / inputTimeScale);\n                let numMissingFrames = 0;\n                // if fragment are contiguous, detect hole/overlapping between fragments\n                // contiguous fragments are consecutive fragments from same quality level (same level, new SN = old SN + 1)\n                if(contiguous && track.isAAC) {\n                    // log delta\n                    if(delta) {\n                        if(delta > 0 && delta < MAX_SILENT_FRAME_DURATION) {\n                            numMissingFrames = Math.round(\n                                (pts - nextAudioPts) / inputSampleDuration\n                            );\n                            logger.log(\n                                MP4Remuxer.Tag,\n                                `${delta} ms hole between AAC samples detected,filling it`\n                            );\n                            if(numMissingFrames > 0) {\n                                fillFrame = AAC.getSilentFrame(\n                                    track.manifestCodec || track.codec,\n                                    track.channelCount\n                                );\n                                if(!fillFrame) {\n                                    fillFrame = unit.subarray(0);\n                                }\n\n                                mdatSize += numMissingFrames * fillFrame.length;\n                            }\n                            // if we have frame overlap, overlapping for more than half a frame duraion\n                        } else if(delta < -12) {\n                            // drop overlapping audio frames... browser will deal with it\n                            logger.log(\n                                MP4Remuxer.Tag,\n                                `drop overlapping AAC sample, expected/parsed/delta:${(\n                                    nextAudioPts / inputTimeScale\n                                ).toFixed(3)}s/${(pts / inputTimeScale).toFixed(3)}s/${-delta}ms`\n                            );\n                            mdatSize -= unit.byteLength;\n                            continue;\n                        }\n                        // set PTS/DTS to expected PTS/DTS\n                        pts = nextAudioPts;\n                    }\n                }\n                // remember first PTS of our audioSamples\n                firstPTS = pts;\n                if(mdatSize > 0) {\n                    mdatSize += offset;\n                    try {\n                        mdat = new Uint8Array(mdatSize);\n                    } catch (err) {\n                        this.emitter.emit(Events.ERROR, {\n                            type: ErrorTypes.MUX_ERROR,\n                            details: ErrorDetails.REMUX_ALLOC_ERROR,\n                            fatal: false,\n                            bytes: mdatSize,\n                            reason: `fail allocating audio mdat ${mdatSize}`\n                        });\n                        return null;\n                    }\n                    if(!rawMPEG) {\n                        const view = new DataView(mdat.buffer);\n                        view.setUint32(0, mdatSize);\n                        mdat.set(MP4.types.mdat, 4);\n                    }\n                } else {\n                    // no audio samples\n                    return null;\n                }\n\n                for(let i = 0; i < numMissingFrames; i++) {\n                    fillFrame = AAC.getSilentFrame(\n                        track.manifestCodec || track.codec,\n                        track.channelCount\n                    );\n                    if(!fillFrame) {\n                        logger.log(\n                            MP4Remuxer.Tag,\n                            'Unable to get silent frame for given audio codec; duplicating this frame instead.'\n                        );\n                        fillFrame = unit.subarray(0);\n                    }\n                    mdat.set(fillFrame, offset);\n                    offset += fillFrame.byteLength;\n                    mp4Sample = {\n                        size: fillFrame.byteLength,\n                        cts: 0,\n                        duration: 1024,\n                        flags: {\n                            isLeading: 0,\n                            isDependedOn: 0,\n                            hasRedundancy: 0,\n                            degradPrio: 0,\n                            dependsOn: 1\n                        }\n                    };\n                    outputSamples.push(mp4Sample);\n                }\n            }\n            mdat && mdat.set(unit, offset);\n            const unitLen = unit.byteLength;\n            offset += unitLen;\n            mp4Sample = {\n                size: unitLen,\n                cts: 0,\n                duration: 0,\n                flags: {\n                    isLeading: 0,\n                    isDependedOn: 0,\n                    hasRedundancy: 0,\n                    degradPrio: 0,\n                    dependsOn: 1\n                }\n            };\n            outputSamples.push(mp4Sample);\n            lastPTS = pts;\n        }\n        let lastSampleDuration = 0;\n        nbSamples = outputSamples.length;\n        // set last sample duration as being identical to previous sample\n        if(nbSamples >= 2) {\n            lastSampleDuration = outputSamples[nbSamples - 2].duration;\n            mp4Sample.duration = lastSampleDuration;\n        }\n        if(nbSamples) {\n            // next audio sample PTS should be equal to last sample PTS + duration\n            nextAudioPts = <number>lastPTS + scaleFactor * lastSampleDuration;\n            this.nextAudioPts = nextAudioPts;\n            // logger.log('Audio/PTS/PTSend:' + audioSample.pts.toFixed(0) + '/' + this.nextAacDts.toFixed(0));\n            track.samples = outputSamples;\n\n            if(rawMPEG) {\n                moof = new Uint8Array();\n            } else {\n                moof = MP4.moof(track.sequenceNumber++, <number>firstPTS / scaleFactor, track);\n            }\n            track.samples = [];\n            const start = <number>firstPTS / inputTimeScale;\n            const end = nextAudioPts / inputTimeScale;\n            const audioData: TSAudioData = {\n                data1: moof,\n                data2: <Uint8Array>mdat,\n                startPTS: start,\n                endPTS: end,\n                startDTS: start,\n                endDTS: end,\n                type: 'audio',\n                hasAudio: true,\n                hasVideo: false,\n                nb: nbSamples\n            };\n            // 格式化为flv.js中segment的格式再发出\n            const syncPoints: Array<SampleInfo> = [];\n            const segment = {\n                data: this._mergeBoxes(moof, <Uint8Array>mdat),\n                sampleCount: nbSamples,\n                type: 'audio',\n                info: {\n                    beginDts: start,\n                    beginPts: start,\n                    endDts: end,\n                    endPts: end,\n                    syncPoints, // 音频无同步点, 一直为空数组\n                    originalBeginDts,\n                    originalEndDts\n                }\n            };\n            this.emitter.emit(Events.MEDIA_SEGMENT, 'audio', segment);\n            return audioData;\n        }\n        return null;\n    }\n\n    /**\n     * 添加静默音频帧\n     * @param track\n     * @param timeOffset\n     * @param contiguous\n     * @param videoData\n     */\n    remuxEmptyAudio(\n        track: TSAudioTrack,\n        timeOffset: number,\n        contiguous: boolean,\n        videoData: TSVideoData\n    ) {\n        const { inputTimeScale } = track;\n        const mp4timeScale = track.samplerate ? track.samplerate : inputTimeScale;\n        const scaleFactor = inputTimeScale / mp4timeScale;\n        const { nextAudioPts } = this;\n        // sync with video's timestamp\n        const startDTS = (nextAudioPts !== undefined ? nextAudioPts : videoData.startDTS * inputTimeScale)\n                + <number> this._initDTS;\n        const endDTS = videoData.endDTS * inputTimeScale + <number> this._initDTS;\n        // one sample's duration value\n        const sampleDuration = 1024;\n        const frameDuration = scaleFactor * sampleDuration;\n        // samples count of this segment's duration\n        const nbSamples = Math.ceil((endDTS - startDTS) / frameDuration);\n        // silent frame\n        const silentFrame = AAC.getSilentFrame(track.manifestCodec || track.codec, track.channelCount);\n\n        logger.warn(MP4Remuxer.Tag, 'remux empty Audio');\n        // Can't remux if we can't generate a silent frame...\n        if(!silentFrame) {\n            logger.info(\n                MP4Remuxer.Tag,\n                'Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec!'\n            );\n            return;\n        }\n\n        const samples = [];\n        for(let i = 0; i < nbSamples; i++) {\n            const stamp = startDTS + i * frameDuration;\n            samples.push({ unit: silentFrame, pts: stamp, dts: stamp });\n        }\n        track.samples = samples;\n\n        this.remuxAudio(track, timeOffset, contiguous);\n    }\n\n    remuxID3(track: TSId3Track) {\n        const { length } = track.samples;\n        let sample;\n        const { inputTimeScale } = track;\n        const initPTS = this._initPTS;\n        const initDTS = this._initDTS;\n        // consume samples\n        if(length) {\n            for(let index = 0; index < length; index++) {\n                sample = track.samples[index];\n                // setting id3 pts, dts to relative time\n                // using this._initPTS and this._initDTS to calculate relative time\n                sample.pts = (<number>sample.pts - (initPTS as number)) / inputTimeScale;\n                sample.dts = (<number>sample.dts - (initPTS as number)) / inputTimeScale;\n            }\n            this.emitter.emit(Events.FRAG_PARSING_METADATA, {\n                samples: track.samples\n            });\n        }\n\n        track.samples = [];\n    }\n\n    /**\n     * 封装文本序列\n     * @param track 文本序列\n     */\n    remuxText(track: TSTextTrack) {\n        track.samples.sort((a, b) => <number>a.pts - <number>b.pts);\n\n        const { length } = track.samples;\n        let sample;\n        const { inputTimeScale } = track;\n        const initPTS = this._initPTS;\n        // consume samples\n        if(length) {\n            for(let index = 0; index < length; index++) {\n                sample = track.samples[index];\n                // setting text pts, dts to relative time\n                // using this._initPTS and this._initDTS to calculate relative time\n                sample.pts = (<number>sample.pts - <number>initPTS) / inputTimeScale;\n            }\n            this.emitter.emit(Events.FRAG_PARSING_USERDATA, {\n                samples: track.samples\n            });\n        }\n        track.samples = [];\n    }\n\n    /**\n     * 格式化PTS值\n     * @param value pts值,\n     * @param reference\n     */\n    _PTSNormalize(value: number, reference: number | undefined) {\n        let offset;\n        if(reference === undefined) {\n            return value;\n        }\n\n        if(reference < value) {\n            // - 2^33\n            offset = -8589934592;\n        } else {\n            // + 2^33\n            offset = 8589934592;\n        }\n        /* PTS is 33bit (from 0 to 2^33 -1)\n      if diff between value and reference is bigger than half of the amplitude (2^32) then it means that\n      PTS looping occured. fill the gap */\n        while(Math.abs(value - reference) > 4294967296) {\n            value += offset;\n        }\n\n        return value;\n    }\n\n    /**\n     * 将moof和mdat的数据合成一个media segment 发送出去\n     * @param moof moof BOX的数据\n     * @param mdat mdat BOX的数据\n     */\n    _mergeBoxes(moof: Uint8Array, mdat: Uint8Array) {\n        const result = new Uint8Array(moof.byteLength + mdat.byteLength);\n        result.set(moof, 0);\n        result.set(mdat, moof.byteLength);\n        return result;\n    }\n}\n\nexport default MP4Remuxer;\n","/**\n * highly optimized TS demuxer:\n * parse PAT, PMT\n * extract PES packet from audio and video PIDs\n * extract AVC/H264 NAL units and AAC/ADTS samples from PES packet\n * trigger the remuxer upon parsing completion\n * it also tries to workaround as best as it can audio codec switch (HE-AAC to AAC and vice versa), without having to restart the MediaSource.\n * it also controls the remuxing process :\n * upon discontinuity or level switch detection, it will also notifies the remuxer so that it can reset its state.\n */\nimport EventEmitter from 'eventemitter3';\nimport logger from '../../../Utils/Logger';\nimport * as ADTS from './adts';\nimport MpegAudio from './mpegaudio';\nimport Events from '../Events/index';\nimport ExpGolomb from './exp-golomb';\nimport { ErrorTypes, ErrorDetails } from '../errors';\nimport {\n    track,\n    pesData,\n    parsedPesData,\n    avcSample,\n    NALUnit,\n    TSTextTrack,\n    TSId3Track,\n    TSAudioTrack,\n    TSVideoTrack,\n    SampleLike,\n    typeSupported,\n    agentInfo\n} from '../TSCodecInterface';\nimport createAVCSample from '../TSUtils/createAVCSample';\nimport MP4Remuxer from '../Remuxer/mp4-remuxer';\nimport { videoTrack } from '../../FLVCodec/Interface';\n// We are using fixed track IDs for driving the MP4 remuxer\n// instead of following the TS PIDs.\n// There is no reason not to do this and some browsers/SourceBuffer-demuxers\n// may not like if there are TrackID \"switches\"\n// See https://github.com/video-dev/hls.js/issues/1331\n// Here we are mapping our internal track types to constant MP4 track IDs\n// With MSE currently one can only have one track of each, and we are muxing\n// whatever video/audio rendition in them.\nconst RemuxerTrackIdConfig: Record<string, number> = {\n    video: 1,\n    audio: 2,\n    id3: 3,\n    text: 4\n};\n\nclass TSDemuxer {\n    /**\n     * 事件中心\n     */\n    private _emitter: EventEmitter\n\n    /**\n     * 设置\n     */\n    private config: Record<string, any>\n\n    /**\n     * 浏览器支持回放类型\n     */\n    private typeSupported: typeSupported\n\n    /**\n     * 浏览器代理信息\n     */\n    agentInfo: agentInfo\n\n    /**\n     * 上一个加载的fragment\n     */\n    private frag: any\n\n    /**\n     * TS 转码器\n     */\n    private remuxer: MP4Remuxer\n\n    /**\n     * 待查明\n     */\n    private sampleAes: any\n\n    /**\n     * 上报错误的方法\n     */\n    private _onError: Function | null\n\n    /**\n     * 媒体信息\n     */\n    private _mediaInfo: Record<string, any>\n\n    /**\n     * 上报媒体信息的方法\n     */\n    private _onMediaInfo: Function | null\n\n    /**\n     * 上报metaData的方法\n     */\n    private _onMetaDataArrived: Function | null\n\n    /**\n     * 上报 ScriptData 的方法 (TS解码器没用);\n     */\n    private _onScriptDataArrived: Function | null\n\n    /**\n     * 上报 TrackMetadata 的方法\n     */\n    private _onTrackMetadata: Function | null\n\n    /**\n     * 上报数据的方法\n     */\n    private _onDataAvailable: Function | null\n\n    /**\n     * fragment的序列号\n     */\n    private sequenceNumber: number\n\n    /**\n     * 时间基础值\n     */\n    private _timestampBase: number\n\n    /**\n     * 是否对有声音的标识进行过覆盖\n     */\n    private _hasAudioFlagOverrided: boolean\n\n    /**\n     * 视频是否有声音\n     */\n    private _hasAudio: boolean\n\n    /**\n     * 是否对有视频的标识进行过覆盖\n     */\n    private _hasVideoFlagOverrided: boolean\n\n    /**\n     * 视频有视频\n     */\n    private _hasVideo: boolean\n\n    /**\n     * 媒体文件长度\n     */\n    private _duration: number\n\n    /**\n     * 是否对duration进行过覆盖\n     */\n    private _durationOverrided: boolean\n\n    /**\n     * fragment 的 ID, 等同于 sequenceNumber\n     */\n    private id: any\n\n    /**\n     * PMT表格是否已经解析\n     */\n    private pmtParsed: boolean\n\n    /**\n     * PMT的ID是多少\n     */\n    private _pmtId: number\n\n    /**\n     * AVC Track\n     */\n    private _avcTrack: TSVideoTrack\n\n    /**\n     * audio track\n     */\n    private _audioTrack: TSAudioTrack\n\n    /**\n     * id3 track\n     */\n    private _id3Track: TSId3Track\n\n    /**\n     * txt track\n     */\n    private _txtTrack: TSTextTrack\n\n    /**\n     * 溢出的AAC数据\n     */\n    aacOverFlow: Uint8Array | null\n\n    /**\n     * 音频最后的PTS时间\n     */\n    aacLastPTS: number | undefined\n\n    /**\n     * AVC Sample 的存储单元\n     */\n    avcSample: avcSample | null\n\n    /**\n     * 音频解码器类型\n     */\n    audioCodec: string | undefined\n\n    /**\n     * 视频解码器类型\n     */\n    videoCodec: string | undefined\n\n    /**\n     * 是否连续\n     */\n    contiguous: boolean\n\n    /**\n     * 初始的PTS\n     */\n    _initPTS: undefined\n\n    /**\n     * 初始的DTS\n     */\n    _initDTS: undefined\n\n    constructor(\n        emitter: EventEmitter,\n        config: Record<string, any>,\n        typeSupported: typeSupported,\n        agentInfo: agentInfo\n    ) {\n        this._emitter = emitter;\n        this.config = config;\n        this.typeSupported = typeSupported;\n        this.agentInfo = agentInfo;\n        this.frag = null;\n        this.remuxer = new MP4Remuxer(this._emitter, config, typeSupported, agentInfo);\n        this.sampleAes = null;\n        this._onError = null;\n        this._mediaInfo = Object.create(null);\n        this._onMediaInfo = null;\n        this._onMetaDataArrived = null;\n        this._onScriptDataArrived = null;\n        this._onTrackMetadata = null;\n        this._onDataAvailable = null;\n        this.sequenceNumber = 0;\n        this._timestampBase = 0;\n        this._avcTrack = TSDemuxer.createVideoTrack();\n        this._audioTrack = TSDemuxer.createAudioTrack(0);\n        this._id3Track = TSDemuxer.createId3Track();\n        this._txtTrack = TSDemuxer.createTextTrack();\n        this._hasAudioFlagOverrided = false;\n        this._hasAudio = false;\n        this._hasVideoFlagOverrided = false;\n        this._hasVideo = false;\n        this._durationOverrided = false;\n        this._duration = 0;\n        this.pmtParsed = false;\n        this._pmtId = -1;\n        this.contiguous = false;\n        this.avcSample = null;\n        this.aacOverFlow = null;\n        this.aacLastPTS = undefined;\n    }\n\n    /**\n     * 文件标签\n     */\n    static Tag: 'TSDemuxer'\n\n    // prototype: function(type: string, metadata: any): void\n    get onTrackMetadata() {\n        return this._onTrackMetadata;\n    }\n\n    set onTrackMetadata(callback) {\n        this._onTrackMetadata = callback;\n    }\n\n    // prototype: function(mediaInfo: MediaInfo): void\n    get onMediaInfo() {\n        return this._onMediaInfo;\n    }\n\n    set onMediaInfo(callback) {\n        this._onMediaInfo = callback;\n    }\n\n    get onMetaDataArrived() {\n        return this._onMetaDataArrived;\n    }\n\n    set onMetaDataArrived(callback) {\n        this._onMetaDataArrived = callback;\n    }\n\n    get onScriptDataArrived() {\n        return this._onScriptDataArrived;\n    }\n\n    set onScriptDataArrived(callback) {\n        this._onScriptDataArrived = callback;\n    }\n\n    // prototype: function(type: number, info: string): void\n    get onError() {\n        return this._onError;\n    }\n\n    set onError(callback) {\n        this._onError = callback;\n    }\n\n    // prototype: function(videoTrack: any, audioTrack: any): void\n    get onDataAvailable() {\n        return this._onDataAvailable;\n    }\n\n    set onDataAvailable(callback) {\n        this._onDataAvailable = callback;\n    }\n\n    // timestamp base for output samples, must be in milliseconds\n    get timestampBase() {\n        return this._timestampBase;\n    }\n\n    set timestampBase(base) {\n        this._timestampBase = base;\n    }\n\n    get overridedDuration() {\n        return this._duration;\n    }\n\n    // Force-override media duration. Must be in milliseconds, int32\n    set overridedDuration(duration) {\n        this._durationOverrided = true;\n        this._duration = duration;\n        this._mediaInfo.duration = duration;\n    }\n\n    // Force-override audio track present flag, boolean\n    set overridedHasAudio(hasAudio: boolean) {\n        this._hasAudioFlagOverrided = true;\n        this._hasAudio = hasAudio;\n        this._mediaInfo.hasAudio = hasAudio;\n    }\n\n    // Force-override video track present flag, boolean\n    set overridedHasVideo(hasVideo: boolean) {\n        this._hasVideoFlagOverrided = true;\n        this._hasVideo = hasVideo;\n        this._mediaInfo.hasVideo = hasVideo;\n    }\n\n    on(event: string, listener: EventEmitter.ListenerFn) {\n        this._emitter.on(event, listener);\n    }\n\n    once(event: string, listener: EventEmitter.ListenerFn) {\n        this._emitter.once(event, listener);\n    }\n\n    off(event: string, listener: EventEmitter.ListenerFn) {\n        this._emitter.off(event, listener);\n    }\n\n    // TODO 和 push 结合在一起\n    bindDataSource(loader: any) {\n        loader.onDataArrival = this.parseChunks.bind(this);\n        return this;\n    }\n\n    /**\n     * 解析数据\n     * @param { Uint8Aarray } chunks loader返回的额数据\n     * @param { Number } byteStart 累计的bytelength\n     * @param { * } extraData fragment-loader 返回的数据\n     */\n    parseChunks(chunks: Uint8Array, extraData: any) {\n        /**\n         * 发送过来数据块所属的fragment\n         */\n        const frag = extraData.fragCurrent;\n        /**\n         * 时间偏移\n         */\n        const timeOffset = Number.isFinite(frag.startPTS) ? frag.startPTS : frag.start;\n        /**\n         * 解码数据\n         */\n        const { decryptdata } = frag;\n        /**\n         * 上一个frag\n         */\n        const lastFrag = this.frag;\n        /**\n         * 是否不连续\n         */\n        const discontinuity = !(lastFrag && frag.cc === lastFrag.cc);\n        /**\n         * 是不是变了level\n         */\n        const trackSwitch = !(lastFrag && frag.level === lastFrag.level);\n        /**\n         * SN号是否连续的\n         */\n        const nextSN = lastFrag && frag.sn === lastFrag.sn + 1;\n        /**\n         * fragment是否是相邻的\n         */\n        const contiguous = !trackSwitch && nextSN;\n\n        if (discontinuity) {\n            logger.debug(TSDemuxer.Tag, `${this.id}:discontinuity detected`);\n        }\n\n        if (trackSwitch) {\n            logger.debug(TSDemuxer.Tag, `${this.id}:switch detected`);\n        }\n\n        this.frag = frag;\n        // 暂时不解密\n        this.pushDecrypted(\n            chunks,\n            decryptdata,\n            new Uint8Array(extraData.initSegmentData),\n            extraData.audioCodec,\n            extraData.videoCodec,\n            timeOffset,\n            discontinuity,\n            trackSwitch,\n            contiguous,\n            extraData.totalduration,\n            extraData.accurateTimeOffset,\n            extraData.defaultInitPTS\n        );\n    }\n\n    /**\n     * 推入已经解密过的数据\n     * @param data 要解析的数据块\n     * @param decryptdata 解密相关参数\n     * @param initSegment 初始化片段数据\n     * @param audioCodec 音频编码格式\n     * @param videoCodec 视频编码格式\n     * @param timeOffset 时间偏移\n     * @param discontinuity 是否不连续\n     * @param trackSwitch 是都切换了level\n     * @param contiguous 是否连续\n     * @param duration 媒体时长\n     * @param accurateTimeOffset 是否为精确的时间偏移\n     * @param defaultInitPTS 默认初始的PTS\n     */\n    pushDecrypted(\n        data: Uint8Array,\n        decryptdata: any,\n        initSegment: Uint8Array,\n        audioCodec: string | undefined,\n        videoCodec: string | undefined,\n        timeOffset: number,\n        discontinuity: boolean,\n        trackSwitch: boolean,\n        contiguous: boolean,\n        duration: number,\n        accurateTimeOffset: boolean,\n        defaultInitPTS: number | undefined\n    ) {\n        // 如果过不连续或者变更了level 则重新生成初始化segment\n        if (discontinuity || trackSwitch) {\n            this.resetInitSegment(initSegment, audioCodec, videoCodec, duration);\n            this.remuxer.resetInitSegment();\n        }\n\n        // 如果过不连续 重置 时间基础值\n        if (discontinuity) {\n            this.resetTimeStamp(defaultInitPTS);\n            this.remuxer.resetTimeStamp(defaultInitPTS);\n        }\n\n        this.append(new Uint8Array(data), timeOffset, contiguous, accurateTimeOffset);\n    }\n\n    /**\n     * 判断Uint8Array是否为TS数据\n     * @param data 侦测的数据\n     */\n    static probe(data: Uint8Array) {\n        const syncOffset = TSDemuxer._syncOffset(data);\n        if (syncOffset < 0) {\n            return false;\n        }\n        if (syncOffset) {\n            logger.warn(\n                TSDemuxer.Tag,\n                `MPEG2-TS detected but first sync word found @ offset ${syncOffset}, junk ahead ?`\n            );\n        }\n        return true;\n    }\n\n    /**\n     * 查找同步位所在位置, 如果没有找到返回 -1, 找到就返回找到的位置, 一般为 0\n     * @param data 要查找的数据\n     */\n    static _syncOffset(data: Uint8Array): number {\n        // scan 1000 first bytes\n        const scanwindow = Math.min(1000, data.length - 3 * 188);\n        let i = 0;\n        while (i < scanwindow) {\n            // a TS fragment should contain at least 3 TS packets, a PAT, a PMT, and one PID, each starting with 0x47\n            if (data[i] === 0x47 && data[i + 188] === 0x47 && data[i + 2 * 188] === 0x47) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n\n    /**\n     * 创建一个 track 模板, 用于 转码时放数据\n     * @param {string} type 'audio' | 'video' | 'id3' | 'text'\n     * @param {number} duration\n     * @return { track }\n     */\n    static createTrack(type: string, duration: number): track {\n        return {\n            container: type === 'video' || type === 'audio' ? 'video/mp2t' : undefined,\n            type,\n            id: RemuxerTrackIdConfig[type],\n            pid: -1,\n            inputTimeScale: 90000,\n            sequenceNumber: 0,\n            samples: [],\n            dropped: type === 'video' ? 0 : undefined,\n            isAAC: type === 'audio' ? true : undefined,\n            duration: type === 'audio' ? duration : undefined\n        };\n    }\n\n    /**\n     * 创建视频序列\n     */\n    static createVideoTrack(): TSVideoTrack {\n        return {\n            container: 'video/mp2t',\n            type: 'video',\n            id: RemuxerTrackIdConfig.video,\n            pid: -1,\n            inputTimeScale: 90000,\n            sequenceNumber: 0,\n            samples: [],\n            dropped: 0,\n            isAAC: undefined,\n            duration: undefined\n        };\n    }\n\n    /**\n     * 创建音频序列\n     * @param duration 时长\n     */\n    static createAudioTrack(duration: number): TSAudioTrack {\n        return {\n            container: 'video/mp2t',\n            type: 'audio',\n            id: RemuxerTrackIdConfig.audio,\n            pid: -1,\n            inputTimeScale: 90000,\n            sequenceNumber: 0,\n            samples: [],\n            dropped: undefined,\n            isAAC: true,\n            duration\n        };\n    }\n\n    /**\n     * 创建Id3序列\n     */\n    static createId3Track(): TSId3Track {\n        return {\n            container: undefined,\n            type: 'id3',\n            id: RemuxerTrackIdConfig.id3,\n            pid: -1,\n            inputTimeScale: 90000,\n            sequenceNumber: 0,\n            samples: [],\n            dropped: undefined,\n            isAAC: undefined,\n            duration: undefined\n        };\n    }\n\n    /**\n     * 创建文本序列\n     */\n    static createTextTrack(): TSTextTrack {\n        return {\n            container: undefined,\n            type: 'text',\n            id: RemuxerTrackIdConfig.text,\n            pid: -1,\n            inputTimeScale: 90000,\n            sequenceNumber: 0,\n            samples: [],\n            dropped: undefined,\n            isAAC: undefined,\n            duration: undefined\n        };\n    }\n\n    /**\n     * Initializes a new init segment on the demuxer/remuxer interface. Needed for discontinuities/track-switches (or at stream start)\n     * Resets all internal track instances of the demuxer.\n     * 重新初始化初始化片段, 初始化各个track等相关参数, 会在 frament不连续, 切换level或者刚开始的时候调用\n     * @override Implements generic demuxing/remuxing interface (see DemuxerInline)\n     * @param { Uint8Array } initSegment\n     * @param { string } audioCodec\n     * @param { string } videoCodec\n     * @param { number } duration (in TS timescale = 90kHz)\n     */\n    resetInitSegment(\n        initSegment: Uint8Array,\n        audioCodec: string | undefined,\n        videoCodec: string | undefined,\n        duration: number\n    ) {\n        this.pmtParsed = false;\n\n        this._pmtId = -1;\n\n        this._avcTrack = TSDemuxer.createVideoTrack();\n        this._audioTrack = TSDemuxer.createAudioTrack(duration);\n        this._id3Track = TSDemuxer.createId3Track();\n        this._txtTrack = TSDemuxer.createTextTrack();\n\n        // flush any partial content\n        this.aacOverFlow = null;\n        this.aacLastPTS = undefined;\n        this.avcSample = null;\n        this.audioCodec = audioCodec;\n        this.videoCodec = videoCodec;\n        this._duration = duration;\n    }\n\n    /**\n     * 重置时间基准值\n     */\n    resetTimeStamp(defaultInitPTS: number | undefined) { }\n\n    /**\n     * 重置媒体信息\n     */\n    resetMediaInfo() {\n        this._mediaInfo = Object.create(null);\n    }\n\n    // feed incoming data to the front of the parsing pipeline\n    /**\n     * 想解码器添加数据\n     * @param data 要解码的数据\n     * @param timeOffset 时间偏移值\n     * @param contiguous 是否连续\n     * @param accurateTimeOffset 是否是精确的时间偏移\n     */\n    append(data: Uint8Array, timeOffset: number, contiguous: boolean, accurateTimeOffset: boolean) {\n        let start;\n        /**\n         * 要解析数据的长度\n         */\n\n        let len = data.length;\n        /**\n         * ISOIEC13818-1 规定 负载单元起始标示符 为 true 时代表该包中含有 PES packets (refer to 2.4.3.6) or PSI data (refer to 2.4.4).\n         */\n        let stt = false;\n        /**\n         * ts packet id 包ID\n         */\n        let pid;\n        /**\n         * adaptation_field_control 自适应域标志\n         */\n        let atf;\n        /**\n         * 偏移量\n         */\n        let offset;\n        /**\n         * 经 parsePES 方法解析后的 pes 包数据\n         */\n        let pes;\n        /**\n         * 是否为未知的PID\n         */\n        let unknownPIDs = false;\n        this.contiguous = contiguous;\n        let { pmtParsed } = this;\n        const avcTrack = this._avcTrack;\n        const audioTrack = this._audioTrack;\n        const id3Track = this._id3Track;\n        let avcId = avcTrack ? avcTrack.pid : -1;\n        let audioId = audioTrack ? audioTrack.pid : -1;\n        let id3Id = id3Track ? id3Track.pid : -1;\n        let pmtId = this._pmtId;\n        let avcData: pesData | undefined = avcTrack.pesData;\n        let audioData: pesData | undefined = audioTrack.pesData;\n        let id3Data: pesData | undefined = id3Track.pesData;\n        const parsePAT = this._parsePAT;\n        const parsePMT = this._parsePMT;\n        const parsePES = this._parsePES;\n        const parseAVCPES = this._parseAVCPES.bind(this);\n        const parseAACPES = this._parseAACPES.bind(this);\n        const parseMPEGPES = this._parseMPEGPES.bind(this);\n        const parseID3PES = this._parseID3PES.bind(this);\n\n        const syncOffset = TSDemuxer._syncOffset(data);\n\n        // don't parse last TS packet if incomplete\n        len -= (len + syncOffset) % 188;\n\n        // loop through TS packets\n        for (start = syncOffset; start < len; start += 188) {\n            if (data[start] === 0x47) {\n                stt = !!(data[start + 1] & 0x40);\n                // pid is a 13-bit field starting at the last bit of TS[1]\n                pid = ((data[start + 1] & 0x1f) << 8) + data[start + 2];\n                atf = (data[start + 3] & 0x30) >> 4;\n                // if an adaption field is present, its length is specified by the fifth byte of the TS packet header.\n                if (atf > 1) {\n                    offset = start + 5 + data[start + 4];\n                    // continue if there is only adaptation field\n                    if (offset === start + 188) {\n                        continue;\n                    }\n                } else {\n                    offset = start + 4;\n                }\n\n                switch (pid) {\n                    case avcId:\n\n                        if (stt) {\n                            avcData && (pes = parsePES(avcData));\n                            if (avcData && pes && pes.pts !== undefined) {\n                                parseAVCPES(pes, false);\n                            }\n                            avcData = {\n                                data: [],\n                                size: 0\n                            };\n                        }\n                        if (avcData) {\n                            avcData.data.push(data.subarray(offset, start + 188));\n                            avcData.size += start + 188 - offset;\n                        }\n                        break;\n                    case audioId:\n                        if (stt) {\n                            audioData && (pes = parsePES(audioData));\n                            if (audioData && pes && pes.pts !== undefined) {\n                                if (audioTrack.isAAC) {\n                                    parseAACPES(pes);\n                                } else {\n                                    parseMPEGPES(pes);\n                                }\n                            }\n                            audioData = {\n                                data: [],\n                                size: 0\n                            };\n                        }\n                        if (audioData) {\n                            audioData.data.push(data.subarray(offset, start + 188));\n                            audioData.size += start + 188 - offset;\n                        }\n                        break;\n                    case id3Id:\n                        if (stt) {\n                            id3Data && (pes = parsePES(id3Data));\n\n                            if (id3Data && pes && pes.pts !== undefined) {\n                                parseID3PES(pes);\n                            }\n\n                            id3Data = {\n                                data: [],\n                                size: 0\n                            };\n                        }\n                        if (id3Data) {\n                            id3Data.data.push(data.subarray(offset, start + 188));\n                            id3Data.size += start + 188 - offset;\n                        }\n                        break;\n                    case 0:\n                        if (stt) {\n                            offset += data[offset] + 1;\n                        }\n                        this._pmtId = parsePAT(data, offset);\n                        pmtId = this._pmtId;\n                        break;\n                    // eslint-disable-next-line no-case-declarations\n                    case pmtId: {\n                        if (stt) {\n                            offset += data[offset] + 1;\n                        }\n\n                        const parsedPIDs = parsePMT(\n                            data,\n                            offset,\n                            this.typeSupported.mpeg === true || this.typeSupported.mp3 === true,\n                            this.sampleAes !== null\n                        );\n\n                        // only update track id if track PID found while parsing PMT\n                        // this is to avoid resetting the PID to -1 in case\n                        // track PID transiently disappears from the stream\n                        // this could happen in case of transient missing audio samples for example\n                        // NOTE this is only the PID of the track as found in TS,\n                        // but we are not using this for MP4 track IDs.\n                        avcId = parsedPIDs.avc;\n\n                        if (avcId > 0) {\n                            avcTrack.pid = avcId;\n                        }\n\n                        audioId = parsedPIDs.audio;\n\n                        if (audioId > 0) {\n                            audioTrack.pid = audioId;\n                            audioTrack.isAAC = parsedPIDs.isAAC;\n                        }\n\n                        id3Id = parsedPIDs.id3;\n                        if (id3Id > 0) {\n                            id3Track.pid = id3Id;\n                        }\n\n                        if (unknownPIDs && !pmtParsed) {\n                            logger.log(TSDemuxer.Tag, 'reparse from beginning');\n                            unknownPIDs = false;\n                            // we set it to -188, the += 188 in the for loop will reset start to 0\n                            start = syncOffset - 188;\n                        }\n                        this.pmtParsed = true;\n                        pmtParsed = true;\n                        break;\n                    }\n                    case 17:\n                    case 0x1fff:\n                        break;\n                    default:\n                        unknownPIDs = true;\n                        break;\n                }\n            } else {\n                this._emitter.emit(Events.ERROR, {\n                    type: ErrorTypes.MEDIA_ERROR,\n                    details: ErrorDetails.FRAG_PARSING_ERROR,\n                    fatal: false,\n                    code: -2,\n                    reason: 'TS packet did not start with 0x47'\n                });\n            }\n        }\n        // try to parse last PES packets\n        avcData && (pes = parsePES(avcData));\n        if (avcData && pes && pes.pts !== undefined) {\n            parseAVCPES(pes, true);\n            avcTrack.pesData = undefined;\n        } else {\n            // either avcData null or PES truncated, keep it for next frag parsing\n            avcTrack.pesData = avcData;\n        }\n        audioData && (pes = parsePES(audioData));\n        if (audioData && pes && pes.pts !== undefined) {\n            if (audioTrack.isAAC) {\n                parseAACPES(pes, true);\n            } else {\n                parseMPEGPES(pes);\n            }\n            audioTrack.pesData = undefined;\n        } else {\n            if (audioData && audioData.size) {\n                logger.log(\n                    TSDemuxer.Tag,\n                    'last AAC PES packet truncated,might overlap between fragments'\n                );\n            }\n\n            // either audioData null or PES truncated, keep it for next frag parsing\n            audioTrack.pesData = audioData;\n        }\n        id3Data && (pes = parsePES(id3Data));\n        if (id3Data && pes && pes.pts !== undefined) {\n            parseID3PES(pes);\n            id3Track.pesData = undefined;\n        } else {\n            // either id3Data null or PES truncated, keep it for next frag parsing\n            id3Track.pesData = id3Data;\n        }\n        this.sequenceNumber += 1;\n        const { sequenceNumber } = this;\n        audioTrack.sequenceNumber = sequenceNumber;\n        avcTrack.sequenceNumber = sequenceNumber;\n        this._parseMediaInfo(audioTrack, avcTrack);\n\n        this._createMetadata(audioTrack, avcTrack);\n        this.remuxer.remux(\n            audioTrack,\n            avcTrack,\n            id3Track,\n            this._txtTrack,\n            timeOffset,\n            contiguous,\n            accurateTimeOffset\n        );\n    }\n\n    /**\n     * 销毁功能\n     */\n    destroy() {\n        this._initDTS = undefined;\n        this._initPTS = undefined;\n        this._duration = 0;\n        this.sequenceNumber = 0;\n        this._emitter.removeAllListeners();\n        delete (this as any)._emitter;\n        delete (this as any).config;\n        delete (this as any).typeSupported;\n        delete (this as any).agentInfo;\n        this.frag = null;\n        delete (this as any).remuxer;\n        this.sampleAes = null;\n        this._onError = null;\n        delete (this as any)._mediaInfo;\n        this._onMediaInfo = null;\n        this._onMetaDataArrived = null;\n        this._onScriptDataArrived = null;\n        this._onTrackMetadata = null;\n        this._onDataAvailable = null;\n        this.sequenceNumber = 0;\n        this._timestampBase = 0;\n        delete (this as any)._avcTrack;\n        delete (this as any)._audioTrack;\n        delete (this as any)._id3Track;\n        delete (this as any)._txtTrack;\n        this._hasAudioFlagOverrided = false;\n        this._hasAudio = false;\n        this._hasVideoFlagOverrided = false;\n        this._hasVideo = false;\n        this._durationOverrided = false;\n        this._duration = 0;\n        this.pmtParsed = false;\n        this._pmtId = -1;\n        this.contiguous = false;\n        this.avcSample = null;\n        this.aacOverFlow = null;\n        this.aacLastPTS = undefined;\n    }\n\n    /**\n     * 解析 PAT表, 获取 PMT值\n     * @param data 要解析的Uint8Array 数据\n     * @param offset 偏移量\n     */\n    _parsePAT(data: Uint8Array, offset: number): number {\n        // skip the PSI header and parse the first PMT entry\n        return ((data[offset + 10] & 0x1f) << 8) | data[offset + 11];\n        // logger.log('PMT PID:'  + this._pmtId);\n    }\n\n    /**\n     *\n     * @param data 解析的UInt8Array\n     * @param offset 偏移数\n     * @param mpegSupported 浏览器是否支持MPEG回放\n     * @param isSampleAes 是否有解密程序\n     */\n    _parsePMT(data: Uint8Array, offset: number, mpegSupported: boolean, isSampleAes: boolean) {\n        let pid;\n        const result = {\n            audio: -1,\n            avc: -1,\n            id3: -1,\n            isAAC: true\n        };\n        const sectionLength = ((data[offset + 1] & 0x0f) << 8) | data[offset + 2];\n        const tableEnd = offset + 3 + sectionLength - 4;\n        // to determine where the table is, we have to figure out how\n        // long the program info descriptors are\n        const programInfoLength = ((data[offset + 10] & 0x0f) << 8) | data[offset + 11];\n        // advance the offset to the first entry in the mapping table\n        offset += 12 + programInfoLength;\n\n        while (offset < tableEnd) {\n            pid = ((data[offset + 1] & 0x1f) << 8) | data[offset + 2];\n            switch (data[offset]) {\n                case 0xcf: // SAMPLE-AES AAC\n                    if (!isSampleAes) {\n                        logger.log(TSDemuxer.Tag, `unkown stream type:${data[offset]}`);\n                        break;\n                    }\n                    break;\n                /* falls through */\n\n                // ISO/IEC 13818-7 ADTS AAC (MPEG-2 lower bit-rate audio)\n                // eslint-disable-next-line no-fallthrough\n                case 0x0f:\n                    // logger.log('AAC PID:'  + pid);\n                    if (result.audio === -1) {\n                        result.audio = pid;\n                    }\n\n                    break;\n\n                // Packetized metadata (ID3)\n                case 0x15:\n                    // logger.log('ID3 PID:'  + pid);\n                    if (result.id3 === -1) {\n                        result.id3 = pid;\n                    }\n\n                    break;\n\n                case 0xdb: // SAMPLE-AES AVC\n                    if (!isSampleAes) {\n                        logger.log(TSDemuxer.Tag, `unkown stream type:${data[offset]}`);\n                        break;\n                    }\n                    break;\n                /* falls through */\n\n                // ITU-T Rec. H.264 and ISO/IEC 14496-10 (lower bit-rate video)\n                // eslint-disable-next-line no-fallthrough\n                case 0x1b:\n                    // logger.log('AVC PID:'  + pid);\n                    if (result.avc === -1) {\n                        result.avc = pid;\n                    }\n\n                    break;\n\n                // ISO/IEC 11172-3 (MPEG-1 audio)\n                // or ISO/IEC 13818-3 (MPEG-2 halved sample rate audio)\n                case 0x03:\n                case 0x04:\n                    // logger.log('MPEG PID:'  + pid);\n                    if (!mpegSupported) {\n                        logger.log(\n                            TSDemuxer.Tag,\n                            'MPEG audio found, not supported in this browser for now'\n                        );\n                    } else if (result.audio === -1) {\n                        result.audio = pid;\n                        result.isAAC = false;\n                    }\n                    break;\n\n                case 0x24:\n                    logger.log(TSDemuxer.Tag, 'HEVC stream type found, not supported for now');\n                    break;\n\n                default:\n                    logger.log(TSDemuxer.Tag, `unkown stream type:${data[offset]}`);\n                    break;\n            }\n            // move to the next table entry\n            // skip past the elementary stream descriptors, if present\n            offset += (((data[offset + 3] & 0x0f) << 8) | data[offset + 4]) + 5;\n        }\n        return result;\n    }\n\n    /**\n     * 解析PES包\n     * @param stream PES包\n     */\n    _parsePES(stream: pesData): parsedPesData | null {\n        let i = 0;\n        let frag;\n        let pesFlags;\n        let pesLen;\n        let pesHdrLen;\n        let pesData;\n        let pesPts: number | undefined;\n        let pesDts: number | undefined;\n        let payloadStartOffset;\n        const { data } = stream;\n        // safety check\n        if (!stream || stream.size === 0) {\n            return null;\n        }\n\n        // we might need up to 19 bytes to read PES header\n        // if first chunk of data is less than 19 bytes, let's merge it with following ones until we get 19 bytes\n        // usually only one merge is needed (and this is rare ...)\n        while (data[0].length < 19 && data.length > 1) {\n            const newData = new Uint8Array(data[0].length + data[1].length);\n            newData.set(data[0]);\n            newData.set(data[1], data[0].length);\n            data[0] = newData;\n            data.splice(1, 1);\n        }\n        // retrieve PTS/DTS from first fragment\n        frag = data[0];\n        const pesPrefix = (frag[0] << 16) + (frag[1] << 8) + frag[2];\n        if (pesPrefix === 1) {\n            pesLen = (frag[4] << 8) + frag[5];\n            // if PES parsed length is not zero and greater than total received length, stop parsing. PES might be truncated\n            // minus 6 : PES header size\n            if (pesLen && pesLen > stream.size - 6) {\n                return null;\n            }\n\n            pesFlags = frag[7];\n            if (pesFlags & 0xc0) {\n                /* PES header described here : http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n                    as PTS / DTS is 33 bit we cannot use bitwise operator in JS,\n                    as Bitwise operators treat their operands as a sequence of 32 bits */\n                pesPts = (frag[9] & 0x0e) * 536870912 // 1 << 29\n                    + (frag[10] & 0xff) * 4194304 // 1 << 22\n                    + (frag[11] & 0xfe) * 16384 // 1 << 14\n                    + (frag[12] & 0xff) * 128 // 1 << 7\n                    + (frag[13] & 0xfe) / 2;\n                // check if greater than 2^32 -1\n                if (pesPts > 4294967295) {\n                    // decrement 2^33\n                    pesPts -= 8589934592;\n                }\n                if (pesFlags & 0x40) {\n                    pesDts = (frag[14] & 0x0e) * 536870912 // 1 << 29\n                        + (frag[15] & 0xff) * 4194304 // 1 << 22\n                        + (frag[16] & 0xfe) * 16384 // 1 << 14\n                        + (frag[17] & 0xff) * 128 // 1 << 7\n                        + (frag[18] & 0xfe) / 2;\n                    // check if greater than 2^32 -1\n                    if (pesDts > 4294967295) {\n                        // decrement 2^33\n                        pesDts -= 8589934592;\n                    }\n                    if (pesPts - pesDts > 60 * 90000) {\n                        logger.warn(\n                            TSDemuxer.Tag,\n                            `${Math.round(\n                                (pesPts - pesDts) / 90000\n                            )}s delta between PTS and DTS, align them`\n                        );\n                        pesPts = pesDts;\n                    }\n                } else {\n                    pesDts = pesPts;\n                }\n            }\n            pesHdrLen = frag[8];\n            // 9 bytes : 6 bytes for PES header + 3 bytes for PES extension\n            payloadStartOffset = pesHdrLen + 9;\n\n            stream.size -= payloadStartOffset;\n            // reassemble PES packet\n            pesData = new Uint8Array(stream.size);\n            for (let j = 0, dataLen = data.length; j < dataLen; j++) {\n                frag = data[j];\n                let len = frag.byteLength;\n                if (payloadStartOffset) {\n                    if (payloadStartOffset > len) {\n                        // trim full frag if PES header bigger than frag\n                        payloadStartOffset -= len;\n                        continue;\n                    } else {\n                        // trim partial frag if PES header smaller than frag\n                        frag = frag.subarray(payloadStartOffset);\n                        len -= payloadStartOffset;\n                        payloadStartOffset = 0;\n                    }\n                }\n                pesData.set(frag, i);\n                i += len;\n            }\n            if (pesLen) {\n                // payload size : remove PES header + PES extension\n                pesLen -= pesHdrLen + 3;\n            }\n            return {\n                data: pesData,\n                pts: pesPts,\n                dts: pesDts,\n                len: pesLen\n            };\n        }\n        return null;\n    }\n\n    pushAccesUnit(avcSample: avcSample, avcTrack: TSVideoTrack) {\n        if (avcSample.units.length && avcSample.frame) {\n            const { samples } = avcTrack;\n            const nbSamples = samples.length;\n            // only push AVC sample if starting with a keyframe is not mandatory OR\n            //    if keyframe already found in this fragment OR\n            //       keyframe found in last fragment (track.sps) AND\n            //          samples already appended (we already found a keyframe in this fragment) OR fragment is contiguous\n            if (\n                !this.config.forceKeyFrameOnDiscontinuity\n                || avcSample.key === true\n                || (avcTrack.sps && (nbSamples || this.contiguous))\n            ) {\n                avcSample.id = nbSamples;\n                samples.push(avcSample);\n            } else {\n                // dropped samples, track it\n                avcTrack.dropped !== undefined && avcTrack.dropped++;\n            }\n        }\n        if (avcSample.debug.length) {\n            logger.info(TSDemuxer.Tag, `${avcSample.pts}/${avcSample.dts}:${avcSample.debug}`);\n        }\n    }\n\n    /**\n     * 解析AVC PES 数据\n     * @param pes 要解析的PES Data\n     * @param last 是否为最后一个\n     */\n    _parseAVCPES(pes: parsedPesData, last?: boolean) {\n        const track = this._avcTrack;\n        const units = this._parseAVCNALu(pes.data);\n        const debug = false;\n        let expGolombDecoder;\n        let { avcSample } = this;\n        /**\n             * 是否插入到units中\n             */\n        let push = false;\n        /**\n             * 是否找到SPS\n             */\n        let spsfound = false;\n        let i;\n        const pushAccesUnit = this.pushAccesUnit.bind(this);\n        // free pes.data to save up some memory\n        delete (pes as any).data;\n\n        // if new NAL units found and last sample still there, let's push ...\n        // this helps parsing streams with missing AUD (only do this if AUD never found)\n        if (avcSample && units.length && !track.audFound) {\n            pushAccesUnit(avcSample, track);\n            this.avcSample = createAVCSample(false, pes.pts, pes.dts, '');\n            ({ avcSample } = this);\n        }\n        // console.info('DEBUG_HJPlayer_debug,units', units);\n\n        units.forEach((unit) => {\n            switch (unit.type) {\n                // eslint-disable-next-line no-case-declarations\n                case 1: { // NDR\n                    push = true;\n\n                    if (!avcSample) {\n                        this.avcSample = createAVCSample(true, pes.pts, pes.dts, '');\n                        ({ avcSample } = this);\n                    }\n\n                    if (!avcSample) {\n                        return;\n                    }\n\n                    if (debug) {\n                        avcSample.debug += 'NDR ';\n                    }\n\n                    avcSample.frame = true;\n\n                    const { data } = unit;\n                    // only check slice type to detect KF in case SPS found in same packet (any keyframe is preceded by SPS ...)\n                    if (spsfound && data.length > 4) {\n                        // retrieve slice type by parsing beginning of NAL unit (follow H264 spec, slice_header definition) to detect keyframe embedded in NDR\n                        const sliceType = new ExpGolomb(data).readSliceType();\n                        // 2 : I slice, 4 : SI slice, 7 : I slice, 9: SI slice\n                        // SI slice : A slice that is coded using intra prediction only and using quantisation of the prediction samples.\n                        // An SI slice can be coded such that its decoded samples can be constructed identically to an SP slice.\n                        // I slice: A slice that is not an SI slice that is decoded using intra prediction only.\n                        // if (sliceType === 2 || sliceType === 7) {\n                        // https://www.cnblogs.com/pengkunfan/p/3945445.html SliceType 简介\n                        if (\n                            sliceType === 2\n                            || sliceType === 4\n                            || sliceType === 7\n                            || sliceType === 9\n                        ) {\n                            avcSample.key = true;\n                        }\n                    }\n                    break;\n                }\n                // IDR\n                case 5:\n                    push = true;\n                    // handle PES not starting with AUD\n                    if (!avcSample) {\n                        this.avcSample = createAVCSample(true, pes.pts, pes.dts, '');\n                        ({ avcSample } = this);\n                    }\n\n                    if (!avcSample) {\n                        return;\n                    }\n\n                    if (debug) {\n                        avcSample.debug += 'IDR ';\n                    }\n\n                    avcSample.key = true;\n                    avcSample.frame = true;\n                    break;\n                // SEI\n                // eslint-disable-next-line no-case-declarations\n                case 6: {\n                    push = true;\n                    if (debug && avcSample) {\n                        avcSample.debug += 'SEI ';\n                    }\n                    this._emitter.emit(Events.GET_SEI_INFO, new Uint8Array(unit.data));\n                    expGolombDecoder = new ExpGolomb(this.discardEPB(unit.data));\n\n                    // skip frameType\n                    expGolombDecoder.readUByte();\n\n                    let payloadType = 0;\n                    let payloadSize = 0;\n                    let endOfCaptions = false;\n                    let b = 0;\n\n                    while (!endOfCaptions && expGolombDecoder.bytesAvailable > 1) {\n                        payloadType = 0;\n                        do {\n                            b = expGolombDecoder.readUByte();\n                            payloadType += b;\n                        } while (b === 0xff);\n\n                        // Parse payload size.\n                        payloadSize = 0;\n                        do {\n                            b = expGolombDecoder.readUByte();\n                            payloadSize += b;\n                        } while (b === 0xff);\n\n                        // TODO: there can be more than one payload in an SEI packet...\n                        // TODO: need to read type and size in a while loop to get them all\n                        if (payloadType === 4 && expGolombDecoder.bytesAvailable !== 0) {\n                            endOfCaptions = true;\n\n                            const countryCode = expGolombDecoder.readUByte();\n\n                            if (countryCode === 181) {\n                                const providerCode = expGolombDecoder.readUShort();\n\n                                if (providerCode === 49) {\n                                    const userStructure = expGolombDecoder.readUInt();\n\n                                    if (userStructure === 0x47413934) {\n                                        const userDataType = expGolombDecoder.readUByte();\n\n                                        // Raw CEA-608 bytes wrapped in CEA-708 packet\n                                        if (userDataType === 3) {\n                                            const firstByte = expGolombDecoder.readUByte();\n                                            const secondByte = expGolombDecoder.readUByte();\n\n                                            const totalCCs = 31 & firstByte;\n                                            const byteArray = [firstByte, secondByte];\n\n                                            for (i = 0; i < totalCCs; i++) {\n                                                // 3 bytes per CC\n                                                byteArray.push(expGolombDecoder.readUByte());\n                                                byteArray.push(expGolombDecoder.readUByte());\n                                                byteArray.push(expGolombDecoder.readUByte());\n                                            }\n\n                                            this._insertSampleInOrder(this._txtTrack.samples, {\n                                                type: 3,\n                                                pts: <number>pes.pts,\n                                                bytes: byteArray\n                                            });\n                                        }\n                                    }\n                                }\n                            }\n                        } else if (payloadType === 5 && expGolombDecoder.bytesAvailable !== 0) {\n                            endOfCaptions = true;\n\n                            if (payloadSize > 16) {\n                                const uuidStrArray = [];\n                                const userDataPayloadBytes = [];\n\n                                for (i = 0; i < 16; i++) {\n                                    uuidStrArray.push(expGolombDecoder.readUByte().toString(16));\n\n                                    if (i === 3 || i === 5 || i === 7 || i === 9) {\n                                        uuidStrArray.push('-');\n                                    }\n                                }\n\n                                for (i = 16; i < payloadSize; i++) {\n                                    userDataPayloadBytes.push(expGolombDecoder.readUByte());\n                                }\n\n                                this._insertSampleInOrder(this._txtTrack.samples, {\n                                    pts: pes.pts,\n                                    payloadType,\n                                    uuid: uuidStrArray.join(''),\n                                    userData: String.fromCharCode.apply(null, userDataPayloadBytes),\n                                    userDataBytes: userDataPayloadBytes\n                                });\n                            }\n                        } else if (payloadSize < expGolombDecoder.bytesAvailable) {\n                            for (i = 0; i < payloadSize; i++) {\n                                expGolombDecoder.readUByte();\n                            }\n                        }\n                    }\n                    break;\n                }\n                // SPS\n                // eslint-disable-next-line no-case-declarations\n                case 7:\n                    push = true;\n                    spsfound = true;\n                    if (debug && avcSample) {\n                        avcSample.debug += 'SPS ';\n                    }\n\n                    if (!track.sps) {\n                        expGolombDecoder = new ExpGolomb(unit.data);\n                        const config = expGolombDecoder.readSPS();\n                        track.width = config.width;\n                        track.height = config.height;\n                        track.pixelRatio = config.pixelRatio;\n                        track.sps = [unit.data];\n                        track.duration = this._duration;\n                        const codecarray = unit.data.subarray(1, 4);\n                        let codecstring = 'avc1.';\n                        for (i = 0; i < 3; i++) {\n                            let h = codecarray[i].toString(16);\n                            if (h.length < 2) {\n                                h = `0${h}`;\n                            }\n\n                            codecstring += h;\n                        }\n                        track.codec = codecstring;\n                    }\n                    break;\n                // PPS\n                case 8:\n                    push = true;\n                    if (debug && avcSample) {\n                        avcSample.debug += 'PPS ';\n                    }\n\n                    if (!track.pps) {\n                        track.pps = [unit.data];\n                    }\n\n                    break;\n                // AUD\n                case 9:\n                    push = false;\n                    track.audFound = true;\n                    if (avcSample) {\n                        pushAccesUnit(avcSample, track);\n                    }\n                    this.avcSample = createAVCSample(\n                        false,\n                        pes.pts,\n                        pes.dts,\n                        debug ? 'AUD ' : ''\n                    );\n                    ({ avcSample } = this);\n                    break;\n                // Filler Data\n                case 12:\n                    push = false;\n                    break;\n                default:\n                    push = false;\n                    if (avcSample) {\n                        avcSample.debug += `unknown NAL ${unit.type} `;\n                    }\n\n                    break;\n            }\n            if (avcSample && push) {\n                const { units } = avcSample;\n                units.push(unit);\n            }\n        });\n        // if last PES packet, push samples\n        if (last && avcSample) {\n            pushAccesUnit(avcSample, track);\n            this.avcSample = null;\n        }\n    }\n\n    /**\n     * 按照pts排序 插入一个sample\n     * @param arr 被插入的avcsample\n     * @param data 要排序的数据\n     */\n    _insertSampleInOrder(arr: Array<SampleLike>, data: SampleLike) {\n        const len = arr.length;\n        if (len > 0) {\n            if (data.pts && data.pts >= <number>arr[len - 1].pts) {\n                arr.push(data);\n            } else {\n                for (let pos = len - 1; pos >= 0; pos--) {\n                    if (data.pts && data.pts < <number>arr[pos].pts) {\n                        arr.splice(pos, 0, data);\n                        break;\n                    }\n                }\n            }\n        } else {\n            arr.push(data);\n        }\n    }\n\n    _getLastNalUnit(): NALUnit | undefined {\n        let { avcSample } = this;\n        let lastUnit;\n        // try to fallback to previous sample if current one is empty\n        if (!avcSample || avcSample.units.length === 0) {\n            const track = this._avcTrack;\n            const { samples } = track;\n            avcSample = samples[samples.length - 1];\n        }\n        if (avcSample) {\n            const { units } = avcSample;\n            lastUnit = units[units.length - 1];\n        }\n        return lastUnit;\n    }\n\n    /**\n     * 解析AVC的NAL Unit, 返回 NAL Unit 的数组\n     * @param array 要解析的Uint8Array\n     */\n    _parseAVCNALu(array: Uint8Array): Array<NALUnit> {\n        let i = 0;\n        const len = array.byteLength;\n        let value;\n        let overflow;\n        const track = this._avcTrack;\n        let state = track.naluState || 0;\n        const lastState = state;\n        const units = [];\n        let unit: NALUnit;\n        let unitType: number;\n        let lastUnitStart = -1;\n        let lastUnitType = 0;\n        // logger.log('PES:' + Hex.hexDump(array));\n\n        if (state === -1) {\n            // special use case where we found 3 or 4-byte start codes exactly at the end of previous PES packet\n            lastUnitStart = 0;\n            // NALu type is value read from offset 0\n            lastUnitType = array[0] & 0x1f;\n            state = 0;\n            i = 1;\n        }\n\n        while (i < len) {\n            value = array[i++];\n            // optimization. state 0 and 1 are the predominant case. let's handle them outside of the switch/case\n            if (!state) {\n                state = value ? 0 : 1;\n                continue;\n            }\n            if (state === 1) {\n                state = value ? 0 : 2;\n                continue;\n            }\n            // here we have state either equal to 2 or 3\n            if (!value) {\n                state = 3;\n            } else if (value === 1) {\n                if (lastUnitStart >= 0) {\n                    unit = {\n                        data: array.subarray(lastUnitStart, i - state - 1),\n                        type: lastUnitType,\n                        state: undefined\n                    };\n                    // logger.log('pushing NALU, type/size:' + unit.type + '/' + unit.data.byteLength);\n                    // if (unit.type === 6) {\n                    //     // 获取到SEI信息\n                    //     // this._emitter.emit(Events.GET_SEI_INFO, new Uint8Array(unit.data));\n                    // }\n                    units.push(unit);\n                } else {\n                    // lastUnitStart is undefined => this is the first start code found in this PES packet\n                    // first check if start code delimiter is overlapping between 2 PES packets,\n                    // ie it started in last packet (lastState not zero)\n                    // and ended at the beginning of this PES packet (i <= 4 - lastState)\n                    const lastUnit = this._getLastNalUnit();\n                    if (lastUnit) {\n                        if (lastState && i <= 4 - lastState) {\n                            // start delimiter overlapping between PES packets\n                            // strip start delimiter bytes from the end of last NAL unit\n                            // check if lastUnit had a state different from zero\n                            if (lastUnit.state) {\n                                // strip last bytes\n                                lastUnit.data = lastUnit.data.subarray(\n                                    0,\n                                    lastUnit.data.byteLength - lastState\n                                );\n                            }\n                        }\n                        // If NAL units are not starting right at the beginning of the PES packet, push preceding data into previous NAL unit.\n                        overflow = i - state - 1;\n                        if (overflow > 0) {\n                            // logger.log('first NALU found with overflow:' + overflow);\n                            const tmp = new Uint8Array(lastUnit.data.byteLength + overflow);\n                            tmp.set(lastUnit.data, 0);\n                            tmp.set(array.subarray(0, overflow), lastUnit.data.byteLength);\n                            lastUnit.data = tmp;\n                        }\n                    }\n                }\n                // check if we can read unit type\n                if (i < len) {\n                    unitType = array[i] & 0x1f;\n                    // logger.log('find NALU @ offset:' + i + ',type:' + unitType);\n                    lastUnitStart = i;\n                    lastUnitType = unitType;\n                    state = 0;\n                } else {\n                    // not enough byte to read unit type. let's read it on next PES parsing\n                    state = -1;\n                }\n            } else {\n                state = 0;\n            }\n        }\n\n        if (lastUnitStart >= 0 && state >= 0) {\n            unit = {\n                data: array.subarray(lastUnitStart, len),\n                type: lastUnitType,\n                state\n            };\n            units.push(unit);\n            // logger.log('pushing NALU, type/size/state:' + unit.type + '/' + unit.data.byteLength + '/' + state);\n        }\n        // no NALu found\n        if (units.length === 0) {\n            // append pes.data to previous NAL unit\n            const lastUnit = this._getLastNalUnit();\n            if (lastUnit) {\n                const tmp = new Uint8Array(lastUnit.data.byteLength + array.byteLength);\n                tmp.set(lastUnit.data, 0);\n                tmp.set(array, lastUnit.data.byteLength);\n                lastUnit.data = tmp;\n            }\n        }\n        track.naluState = state;\n        return units;\n    }\n\n    /**\n     * remove Emulation Prevention bytes from a RBSP\n     */\n    discardEPB(data: Uint8Array): Uint8Array {\n        const length = data.byteLength;\n        const EPBPositions = [];\n        let i = 1;\n\n        // Find all `Emulation Prevention Bytes`\n        while (i < length - 2) {\n            if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n                EPBPositions.push(i + 2);\n                i += 2;\n            } else {\n                i++;\n            }\n        }\n\n        // If no Emulation Prevention Bytes were found just return the original\n        // array\n        if (EPBPositions.length === 0) {\n            return data;\n        }\n\n        // Create a new array to hold the NAL unit data\n        const newLength = length - EPBPositions.length;\n        const newData = new Uint8Array(newLength);\n        let sourceIndex = 0;\n\n        for (i = 0; i < newLength; sourceIndex++, i++) {\n            if (sourceIndex === EPBPositions[0]) {\n                // Skip this byte\n                sourceIndex++;\n                // Remove this position index\n                EPBPositions.shift();\n            }\n            newData[i] = data[sourceIndex];\n        }\n        return newData;\n    }\n\n    /**\n     * 解析AAC音频 PES 数据, 填充 AudioTrack的samples\n     * @param pes 要解析的PES 数据\n     * @param last 是否为最后一个PES\n     */\n    _parseAACPES(pes: parsedPesData, last?: boolean) {\n        const track = this._audioTrack;\n        let { data } = pes;\n        let pts = <number>pes.pts;\n        const startOffset = 0;\n        let { aacOverFlow } = this;\n        const { aacLastPTS } = this;\n        let frameIndex;\n        let offset;\n        let stamp;\n        let len;\n        if (aacOverFlow) {\n            const tmp = new Uint8Array(aacOverFlow.byteLength + data.byteLength);\n            tmp.set(aacOverFlow, 0);\n            tmp.set(data, aacOverFlow.byteLength);\n            // logger.log(`AAC: append overflowing ${aacOverFlow.byteLength} bytes to beginning of new PES`);\n            data = tmp;\n        }\n        // look for ADTS header (0xFFFx)\n        for (offset = startOffset, len = data.length; offset < len - 1; offset++) {\n            if (ADTS.isHeader(data, offset)) {\n                break;\n            }\n        }\n        // if ADTS header does not start straight from the beginning of the PES payload, raise an error\n        if (offset) {\n            let reason; let\n                fatal;\n            if (offset < len - 1) {\n                reason = `AAC PES did not start with ADTS header,offset:${offset}`;\n                fatal = false;\n            } else {\n                reason = 'no ADTS header found in AAC PES';\n                fatal = true;\n            }\n            logger.warn(TSDemuxer.Tag, `parsing error:${reason}`);\n\n            this._emitter.emit(Events.ERROR, {\n                type: ErrorTypes.MEDIA_ERROR,\n                details: ErrorDetails.FRAG_PARSING_ERROR,\n                fatal,\n                reason\n            });\n\n            if (fatal) {\n                return;\n            }\n        }\n\n        ADTS.initTrackConfig(track, this._emitter, data, offset, this.audioCodec);\n        frameIndex = 0;\n        const frameDuration = ADTS.getFrameDuration(track.samplerate);\n\n        // if last AAC frame is overflowing, we should ensure timestamps are contiguous:\n        // first sample PTS should be equal to last sample PTS + frameDuration\n        if (aacOverFlow && aacLastPTS && frameDuration) {\n            const newPTS = aacLastPTS + frameDuration;\n            if (pts && Math.abs(newPTS - pts) > 1) {\n                logger.log(\n                    TSDemuxer.Tag,\n                    `AAC: align PTS for overlapping frames by ${Math.round((newPTS - pts) / 90)}`\n                );\n                pts = newPTS;\n            }\n        }\n\n        // scan for aac samples\n        while (offset < len) {\n            if (ADTS.isHeader(data, offset) && offset + 5 < len && track) {\n                const frame = ADTS.appendFrame(track, data, offset, pts, frameIndex);\n                if (frame) {\n                    // logger.log(`${Math.round(frame.sample.pts)} : AAC`);\n                    offset += frame.length;\n                    stamp = frame.sample.pts;\n                    frameIndex++;\n                } else {\n                    // logger.log('Unable to parse AAC frame');\n                    break;\n                }\n            } else {\n                // nothing found, keep looking\n                offset++;\n            }\n        }\n\n        if (offset < len) {\n            aacOverFlow = data.subarray(offset, len);\n            // logger.log(`AAC: overflow detected:${len-offset}`);\n        } else {\n            aacOverFlow = null;\n        }\n\n        this.aacOverFlow = aacOverFlow;\n\n        this.aacLastPTS = stamp;\n    }\n\n    /**\n     * 解析MPEG的PES包, 填充 _audioTrack的samples\n     * @param pes 待解析的 PES 包数据\n     */\n    _parseMPEGPES(pes: parsedPesData) {\n        const { data } = pes;\n        const { length } = data;\n        let frameIndex = 0;\n        let offset = 0;\n        const { pts } = pes;\n\n        while (offset < length) {\n            if (MpegAudio.isHeader(data, offset)) {\n                const frame = MpegAudio.appendFrame(\n                    this._audioTrack,\n                    data,\n                    offset,\n                    pts as number,\n                    frameIndex\n                );\n                if (frame) {\n                    offset += frame.length;\n                    frameIndex++;\n                } else {\n                    // logger.log('Unable to parse Mpeg audio frame');\n                    break;\n                }\n            } else {\n                // nothing found, keep looking\n                offset++;\n            }\n        }\n    }\n\n    _parseID3PES(pes: parsedPesData) {\n        this._id3Track.samples.push(pes);\n    }\n\n    /**\n     * 填充mediaInfo, 并向上发送\n     */\n    _parseMediaInfo(audioTrack: track, videoTrack: track) {\n        this._mediaInfo = Object.assign(Object.create(null), this._mediaInfo, {\n            duration: Math.max(<number>audioTrack.duration, <number>videoTrack.duration),\n            audioChannelCount: audioTrack.channelCount,\n            audioCodec: audioTrack.codec,\n            audioSampleRate: audioTrack.samplerate,\n            fps: null,\n            hasAudio: !!audioTrack,\n            hasKeyframesIndex: false,\n            keyframesIndex: null,\n            hasVideo: !!videoTrack,\n            width: videoTrack.width,\n            height: videoTrack.height,\n            mimeType: `${videoTrack.container || audioTrack.container}; codecs=\"${videoTrack.codec\n                },${audioTrack.codec}\"`,\n            videoCodec: videoTrack.codec,\n            pixelRatio: videoTrack.pixelRatio,\n            pps: videoTrack.pps,\n            sps: videoTrack.sps\n        });\n        this._emitter.emit(Events.MEDIA_INFO, this._mediaInfo);\n    }\n\n    /**\n     * 创建metadata, 并用emitter发送出去\n     * @param audioTrack 音频序列\n     * @param videoTrack 视频序列\n     */\n    _createMetadata(audioTrack: TSAudioTrack, videoTrack: TSVideoTrack) {\n        const MD = {\n            audiodatarate: 0,\n            audiosamplerate: audioTrack.samplerate,\n            compatibleBrands: 'isom',\n            duration: videoTrack.duration,\n            height: videoTrack.height,\n            majorBrand: 'isom',\n            minorVersion: '1',\n            width: videoTrack.width\n        };\n        this._emitter.emit(Events.META_DATA, MD);\n    }\n}\n\nexport default TSDemuxer;\n","const TSCodecDefaultConfig: Record<string, any> = {\n    forceKeyFrameOnDiscontinuity: true,\n    maxBufferHole: 0.5,\n    maxAudioFramesDrift: 1,\n    stretchShortVideoTrack: false\n};\n\nexport default TSCodecDefaultConfig;\n","import { typeSupported } from '../TSCodecInterface';\n\nconst typeSupport = function typeSupport(): typeSupported {\n    const MediaSource = (window as any).MediaSource || (window as any).WebKitMediaSource;\n    return {\n        mp4: MediaSource.isTypeSupported('video/mp4'),\n        mpeg: MediaSource.isTypeSupported('audio/mpeg'),\n        mp3: MediaSource.isTypeSupported('audio/mp4; codecs=\"mp3\"')\n    };\n};\n\nexport default typeSupport;\n","import EventEmitter from 'eventemitter3';\nimport CodecInterface from '../Interfaces/Codec';\nimport HLSDemuxer from './TSCodec/Demuxer/TSDemuxer';\nimport { typeSupported, agentInfo } from './TSCodec/TSCodecInterface';\nimport TSEvents from './TSCodec/Events/index';\nimport TSDefaultConfig from './TSCodec/config';\nimport typeSupport from './TSCodec/TSUtils/getMediaTypeSupport';\nimport { TSExtraData } from '../Interfaces/TSExtraData';\n\nclass TSCodec implements CodecInterface {\n    /**\n     * 文件标签\n     */\n    Tag: string\n\n    /**\n     * 类型\n     */\n    type: string\n\n    /**\n     * 事件中心\n     */\n    eventEmitter: EventEmitter\n\n    /**\n     * HLS流TS文件解码器\n     */\n    private _demuxer: HLSDemuxer\n\n    /**\n     * TS解码设置\n     */\n    _config: Record<string, any>\n\n    timestampBase: number\n\n    constructor(config: Record<string, any>, typeSupported: typeSupported, agentInfo: agentInfo) {\n        this.Tag = 'TSCodec';\n        this.type = 'TSCodec';\n        this.eventEmitter = new EventEmitter();\n        this._config = Object.assign(Object.create(null), TSDefaultConfig, config);\n        this._demuxer = new HLSDemuxer(this.eventEmitter, this._config, typeSupported, agentInfo);\n        this.timestampBase = 0;\n    }\n\n    /**\n     * 解码器添加数据\n     * @param data loader 发送过来的数据\n     * @param timeOffset 时间偏移量\n     * @param contiguous 是否连续\n     * @param accurateTimeOffset 是否为精确的时间偏移\n     */\n    appendData(\n        data: ArrayBuffer,\n        timeOffset: number,\n        contiguous: boolean,\n        accurateTimeOffset: boolean\n    ) {\n        this._demuxer.append(new Uint8Array(data), timeOffset, contiguous, accurateTimeOffset);\n    }\n\n    /**\n     * 探测数据是否能够解码\n     * @param data loader第一次发送过来的数据\n     */\n    static probe(data: ArrayBuffer) {\n        return HLSDemuxer.probe(new Uint8Array(data));\n    }\n\n    on(eventName: string, callback: EventEmitter.ListenerFn) {\n        this.eventEmitter.on(eventName, callback);\n    }\n\n    once(eventName: string, callback: EventEmitter.ListenerFn) {\n        this.eventEmitter.once(eventName, callback);\n    }\n\n    off(eventName: string, callback?: EventEmitter.ListenerFn) {\n        this.eventEmitter.off(eventName, callback);\n    }\n\n    /**\n     * 销毁功能\n     */\n    destroy() {\n        this.eventEmitter.removeAllListeners();\n        this._demuxer.destroy();\n        delete (this as any)._demuxer;\n        delete (this as any)._config;\n        delete (this as any).eventEmitter;\n    }\n\n    /**\n     * 重置初始化片段\n     * @param initSegment 初始化片段\n     * @param audioCodec 音频编码类型\n     * @param videoCodec 视频编码类型\n     * @param duration 时长\n     */\n    resetInitSegment(\n        initSegment: Uint8Array,\n        audioCodec: string | undefined,\n        videoCodec: string | undefined,\n        duration: number\n    ) {\n        this._demuxer.resetInitSegment(initSegment, audioCodec, videoCodec, duration);\n    }\n\n    /**\n     * 重置时间基准值\n     */\n    resetTimeStamp(data?: any) {\n        this._demuxer.resetTimeStamp(data);\n    }\n\n    /**\n     * 获取TS转码事件\n     */\n    static get Events() {\n        return TSEvents;\n    }\n\n    get config() {\n        return this._config;\n    }\n\n    /**\n     * 测试使用, 真实环境中需要父级传过来\n     */\n    static get typeSupportFunc() {\n        return typeSupport;\n    }\n\n    seek(ms?: number) {}\n\n    insertDiscontinuity() {}\n\n    flushStashedSamples() {}\n\n    bindDataSource(dataSource: any) {\n        dataSource.onDataArrival = this.parseChunks.bind(this);\n        return this;\n    }\n\n    resetMediaInfo() {}\n\n    /**\n     *\n     * @param data 要解析的数据\n     * @param byteStart FLV中parseChunks所需参数, HLS流不需要\n     * @param extraData loader发送过来的关于ts文件的详情\n     * @returns { number } 已被解析的数据的长度\n     */\n    parseChunks(data: ArrayBuffer, byteStart: number, extraData: TSExtraData): number {\n        const typeData = new Uint8Array(data);\n        this._demuxer.parseChunks(typeData, extraData);\n        return typeData.length;\n    }\n}\n\nexport default TSCodec;\n","// see https://tools.ietf.org/html/rfc1808\n\n(function (root) {\n  var URL_REGEX =\n    /^((?:[a-zA-Z0-9+\\-.]+:)?)(\\/\\/[^\\/?#]*)?((?:[^\\/?#]*\\/)*[^;?#]*)?(;[^?#]*)?(\\?[^#]*)?(#[^]*)?$/;\n  var FIRST_SEGMENT_REGEX = /^([^\\/?#]*)([^]*)$/;\n  var SLASH_DOT_REGEX = /(?:\\/|^)\\.(?=\\/)/g;\n  var SLASH_DOT_DOT_REGEX = /(?:\\/|^)\\.\\.\\/(?!\\.\\.\\/)[^\\/]*(?=\\/)/g;\n\n  var URLToolkit = {\n    // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //\n    // E.g\n    // With opts.alwaysNormalize = false (default, spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g\n    // With opts.alwaysNormalize = true (not spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/g\n    buildAbsoluteURL: function (baseURL, relativeURL, opts) {\n      opts = opts || {};\n      // remove any remaining space and CRLF\n      baseURL = baseURL.trim();\n      relativeURL = relativeURL.trim();\n      if (!relativeURL) {\n        // 2a) If the embedded URL is entirely empty, it inherits the\n        // entire base URL (i.e., is set equal to the base URL)\n        // and we are done.\n        if (!opts.alwaysNormalize) {\n          return baseURL;\n        }\n        var basePartsForNormalise = URLToolkit.parseURL(baseURL);\n        if (!basePartsForNormalise) {\n          throw new Error('Error trying to parse base URL.');\n        }\n        basePartsForNormalise.path = URLToolkit.normalizePath(\n          basePartsForNormalise.path\n        );\n        return URLToolkit.buildURLFromParts(basePartsForNormalise);\n      }\n      var relativeParts = URLToolkit.parseURL(relativeURL);\n      if (!relativeParts) {\n        throw new Error('Error trying to parse relative URL.');\n      }\n      if (relativeParts.scheme) {\n        // 2b) If the embedded URL starts with a scheme name, it is\n        // interpreted as an absolute URL and we are done.\n        if (!opts.alwaysNormalize) {\n          return relativeURL;\n        }\n        relativeParts.path = URLToolkit.normalizePath(relativeParts.path);\n        return URLToolkit.buildURLFromParts(relativeParts);\n      }\n      var baseParts = URLToolkit.parseURL(baseURL);\n      if (!baseParts) {\n        throw new Error('Error trying to parse base URL.');\n      }\n      if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== '/') {\n        // If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc\n        // This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'\n        var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);\n        baseParts.netLoc = pathParts[1];\n        baseParts.path = pathParts[2];\n      }\n      if (baseParts.netLoc && !baseParts.path) {\n        baseParts.path = '/';\n      }\n      var builtParts = {\n        // 2c) Otherwise, the embedded URL inherits the scheme of\n        // the base URL.\n        scheme: baseParts.scheme,\n        netLoc: relativeParts.netLoc,\n        path: null,\n        params: relativeParts.params,\n        query: relativeParts.query,\n        fragment: relativeParts.fragment,\n      };\n      if (!relativeParts.netLoc) {\n        // 3) If the embedded URL's <net_loc> is non-empty, we skip to\n        // Step 7.  Otherwise, the embedded URL inherits the <net_loc>\n        // (if any) of the base URL.\n        builtParts.netLoc = baseParts.netLoc;\n        // 4) If the embedded URL path is preceded by a slash \"/\", the\n        // path is not relative and we skip to Step 7.\n        if (relativeParts.path[0] !== '/') {\n          if (!relativeParts.path) {\n            // 5) If the embedded URL path is empty (and not preceded by a\n            // slash), then the embedded URL inherits the base URL path\n            builtParts.path = baseParts.path;\n            // 5a) if the embedded URL's <params> is non-empty, we skip to\n            // step 7; otherwise, it inherits the <params> of the base\n            // URL (if any) and\n            if (!relativeParts.params) {\n              builtParts.params = baseParts.params;\n              // 5b) if the embedded URL's <query> is non-empty, we skip to\n              // step 7; otherwise, it inherits the <query> of the base\n              // URL (if any) and we skip to step 7.\n              if (!relativeParts.query) {\n                builtParts.query = baseParts.query;\n              }\n            }\n          } else {\n            // 6) The last segment of the base URL's path (anything\n            // following the rightmost slash \"/\", or the entire path if no\n            // slash is present) is removed and the embedded URL's path is\n            // appended in its place.\n            var baseURLPath = baseParts.path;\n            var newPath =\n              baseURLPath.substring(0, baseURLPath.lastIndexOf('/') + 1) +\n              relativeParts.path;\n            builtParts.path = URLToolkit.normalizePath(newPath);\n          }\n        }\n      }\n      if (builtParts.path === null) {\n        builtParts.path = opts.alwaysNormalize\n          ? URLToolkit.normalizePath(relativeParts.path)\n          : relativeParts.path;\n      }\n      return URLToolkit.buildURLFromParts(builtParts);\n    },\n    parseURL: function (url) {\n      var parts = URL_REGEX.exec(url);\n      if (!parts) {\n        return null;\n      }\n      return {\n        scheme: parts[1] || '',\n        netLoc: parts[2] || '',\n        path: parts[3] || '',\n        params: parts[4] || '',\n        query: parts[5] || '',\n        fragment: parts[6] || '',\n      };\n    },\n    normalizePath: function (path) {\n      // The following operations are\n      // then applied, in order, to the new path:\n      // 6a) All occurrences of \"./\", where \".\" is a complete path\n      // segment, are removed.\n      // 6b) If the path ends with \".\" as a complete path segment,\n      // that \".\" is removed.\n      path = path.split('').reverse().join('').replace(SLASH_DOT_REGEX, '');\n      // 6c) All occurrences of \"<segment>/../\", where <segment> is a\n      // complete path segment not equal to \"..\", are removed.\n      // Removal of these path segments is performed iteratively,\n      // removing the leftmost matching pattern on each iteration,\n      // until no matching pattern remains.\n      // 6d) If the path ends with \"<segment>/..\", where <segment> is a\n      // complete path segment not equal to \"..\", that\n      // \"<segment>/..\" is removed.\n      while (\n        path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, '')).length\n      ) {}\n      return path.split('').reverse().join('');\n    },\n    buildURLFromParts: function (parts) {\n      return (\n        parts.scheme +\n        parts.netLoc +\n        parts.path +\n        parts.params +\n        parts.query +\n        parts.fragment\n      );\n    },\n  };\n\n  if (typeof exports === 'object' && typeof module === 'object')\n    module.exports = URLToolkit;\n  else if (typeof define === 'function' && define.amd)\n    define([], function () {\n      return URLToolkit;\n    });\n  else if (typeof exports === 'object') exports['URLToolkit'] = URLToolkit;\n  else root['URLToolkit'] = URLToolkit;\n})(this);\n","import { KeyframeData, MediaKeyframe } from '../Interfaces/MediaInfo';\nimport Metadata from '../Interfaces/Metadata';\n\nclass MediaInfo {\n    mimeType: string | null\n\n    // 媒体类型\n    duration: number | undefined\n\n    // 媒体播放时长\n    hasAudio: boolean | null\n\n    // 是否有音频\n    hasVideo: boolean | null\n\n    // 是否有视频\n    audioCodec: string | null\n\n    // 音频编码格式\n    videoCodec: string | null\n\n    // 视频编码格式\n    audioDataRate: number | null\n\n    // 音频比特率（千比特/秒）\n    videoDataRate: number | null\n\n    // 视频比特率（千比特/秒)\n    audioSampleRate: number | null\n\n    // 音频采样率\n    audioChannelCount: number | null\n\n    // 音频声道数量\n    width: number | null\n\n    // 媒体渲染宽度\n    height: number | null\n\n    // 媒体渲染高度\n    fps: number | null\n\n    // 媒体每秒播放帧数\n    profile: string | null\n\n    // H264 profile, 四种: baseline, extended, main, high 详见 https://www.cnblogs.com/lidabo/p/7419393.html\n    level: string | null\n\n    // H264 level级别 详见 https://www.cnblogs.com/lidabo/p/7419393.html\n    refFrames: number | string | null\n\n    // B帧的最大参考数量 详见 https://www.jianshu.com/p/a82da1d0d84f\n    chromaFormat: number | null\n\n    // 亮度和色度空间 详见 http://blog.chinaunix.net/uid-12947719-id-3413698.html 例如: 4:2:0, 4:2:1\n    sarNum: number | null\n\n    // 由容器指定的播放高宽比的分子 详见 https://www.nmm-hd.org/doc/FFmpegSource2 章节 输出给的AviSynth变量\n    sarDen: number | null\n\n    // 由容器指定的播放高宽比的分母 详见 https://www.nmm-hd.org/doc/FFmpegSource2 章节 输出给的AviSynth变量\n    metadata: Metadata | null\n\n    // 媒体的元数据\n    segments: Array<any> | null\n\n    // 媒体片段(flv.js的segment选项内容)\n    segmentCount: number | null\n\n    // 媒体片段数量\n    hasKeyframesIndex: boolean | null\n\n    // 是否有关键帧索引\n    keyframesIndex: MediaKeyframe | null\n\n    // 关键帧索引\n    constructor() {\n        this.mimeType = null;\n        this.duration = undefined;\n\n        this.hasAudio = null;\n        this.hasVideo = null;\n        this.audioCodec = null;\n        this.videoCodec = null;\n        this.audioDataRate = null;\n        this.videoDataRate = null;\n\n        this.audioSampleRate = null;\n        this.audioChannelCount = null;\n\n        this.width = null;\n        this.height = null;\n        this.fps = null;\n        this.profile = null;\n        this.level = null;\n        this.refFrames = null;\n        this.chromaFormat = null;\n        this.sarNum = null;\n        this.sarDen = null;\n\n        this.metadata = null;\n        this.segments = null; // MediaInfo[]\n        this.segmentCount = null;\n        this.hasKeyframesIndex = null;\n        this.keyframesIndex = null;\n    }\n\n    /**\n     * 是否已经完成\n     */\n    isComplete() {\n        const audioInfoComplete = this.hasAudio === false\n            || (this.hasAudio === true\n                && this.audioCodec != null\n                && this.audioSampleRate != null\n                && this.audioChannelCount != null);\n\n        const videoInfoComplete = this.hasVideo === false\n            || (this.hasVideo === true\n                && this.videoCodec != null\n                && this.width != null\n                && this.height != null\n                && this.fps != null\n                && this.profile != null\n                && this.level != null\n                && this.refFrames != null\n                && this.chromaFormat != null\n                && this.sarNum != null\n                && this.sarDen != null);\n\n        return (\n            this.mimeType !== null\n            && this.duration !== undefined\n            && this.metadata !== null\n            && this.hasKeyframesIndex !== null\n            && audioInfoComplete\n            && videoInfoComplete\n        );\n    }\n\n    /**\n     * 根据 hasKeyframesIndex(有关键帧索引) 是否为真来判断是否可以 SEEK\n     */\n    isSeekable(): boolean {\n        return this.hasKeyframesIndex === true;\n    }\n\n    /**\n     * 寻找跳转时间点最近的关键帧\n     * @param milliseconds 跳转的时间\n     */\n    getNearestKeyframe(milliseconds: number): KeyframeData | null {\n        if(this.keyframesIndex == null) {\n            return null;\n        }\n\n        const table = this.keyframesIndex;\n        const keyframeIdx = this._search(table.times, milliseconds);\n\n        return {\n            index: keyframeIdx,\n            milliseconds: table.times[keyframeIdx],\n            fileposition: table.filepositions[keyframeIdx]\n        };\n    }\n\n    /**\n     * 查找关键帧索引值\n     * @param list 关键帧时间点\n     * @param value 寻找的时间点\n     */\n    private _search(list: Array<number>, value: number): number {\n        let idx = 0;\n\n        const last = list.length - 1;\n        let mid = 0;\n        let lbound = 0;\n        let ubound = last;\n\n        if(value < list[0]) {\n            idx = 0;\n            lbound = ubound + 1; // skip search\n        }\n\n        while(lbound <= ubound) {\n            mid = lbound + Math.floor((ubound - lbound) / 2);\n            if(mid === last || (value >= list[mid] && value < list[mid + 1])) {\n                idx = mid;\n                break;\n            } else if(list[mid] < value) {\n                lbound = mid + 1;\n            } else {\n                ubound = mid - 1;\n            }\n        }\n\n        return idx;\n    }\n}\n\nexport default MediaInfo;\n","import EventEmitter from 'eventemitter3';\nimport BaseLoader from './BaseLoader';\nimport Browser from '../Utils/Browser';\nimport LoaderStatus from './LoaderStatus';\nimport LoaderErrors from './LoaderErrors';\nimport { RuntimeException } from '../Utils/Exception';\nimport SeekHandler, { SeekConfig } from '../Interfaces/SeekHandler';\nimport MediaConfig from '../Interfaces/MediaConfig';\nimport SeekRange from '../Interfaces/SeekRange';\nimport getGlobal from '../Utils/getGlobalObject';\nimport HJPlayerConfig from '../Interfaces/HJPlayerConfig';\n\nconst GlobalEnvironment = getGlobal();\n\nclass FetchStreamLoader extends BaseLoader {\n    Tag: string\n\n    eventEmitter: EventEmitter\n\n    private mediaConfig: MediaConfig | null\n\n    /**\n     * 初始化回调函数\n     */\n    private seekHandler: SeekHandler\n\n    /**\n     * 初始化配置\n     */\n    private userConfig: HJPlayerConfig\n\n    private seekRange: SeekRange\n\n    /**\n     * 请求是否阻止\n     */\n    private requestAbort: boolean\n\n    /**\n     * 数据长度\n     */\n    private contentLength: number | null\n\n    /**\n     * 接收到的数据长度\n     */\n    private receivedLength: number\n\n    constructor(seekHandler: SeekHandler, userConfig: HJPlayerConfig) {\n        super('FetchStreamLoader', 'flv');\n        this.Tag = 'FetchStreamLoader';\n\n        this.eventEmitter = new EventEmitter();\n        this.mediaConfig = null;\n        this.userConfig = userConfig;\n        this.seekHandler = seekHandler;\n        this.seekRange = { from: 0, to: 0 };\n        this.requestAbort = false;\n        this.contentLength = null;\n        this.receivedLength = 0;\n    }\n\n    /**\n     * 判断是否支持fetch请求\n     */\n    static isSupported(): boolean {\n        let isSupport: boolean = false;\n        try {\n            const isWorkWellEdge = Browser.msedge && Browser.version.minor >= 15048;\n            const browserNotBlacklisted = Browser.msedge ? isWorkWellEdge : true;\n            isSupport = (GlobalEnvironment as any).fetch && (GlobalEnvironment as any).ReadableStream && browserNotBlacklisted;\n        } catch (e) {\n            isSupport = false;\n        }\n\n        return isSupport;\n    }\n\n    on(eventName: string, callback: EventEmitter.ListenerFn): void {\n        this.eventEmitter.on(eventName, callback);\n    }\n\n    once(eventName: string, callback: EventEmitter.ListenerFn): void {\n        this.eventEmitter.once(eventName, callback);\n    }\n\n    off(eventName: string, callback?: EventEmitter.ListenerFn): void {\n        this.eventEmitter.off(eventName, callback);\n    }\n\n    destroy() {\n        this.abort();\n        this.eventEmitter.removeAllListeners();\n        delete (this as any).eventEmitter;\n        delete (this as any).mediaConfig;\n        delete (this as any).seekRange;\n        delete (this as any).seekHandler;\n        delete (this as any).userConfig;\n        this._status = LoaderStatus.kIdle;\n        this._onContentLengthKnown = null;\n        this._onURLRedirect = null;\n        this._onDataArrival = null;\n        this._onError = null;\n        this._onComplete = null;\n    }\n\n    /**\n     * 开始加载\n     */\n    startLoad(mediaConfig: MediaConfig, seekRange: SeekRange): void {\n        this.mediaConfig = mediaConfig;\n        this.seekRange = seekRange;\n        let sourceURL = mediaConfig.url;\n\n        if (this.userConfig.reuseRedirectedURL && mediaConfig.redirectedURL !== undefined) {\n            sourceURL = mediaConfig.redirectedURL;\n        }\n\n        const seekConfig: SeekConfig = this.seekHandler.getConfig(sourceURL, seekRange);\n        const headers: Headers = new (GlobalEnvironment as any).Headers();\n\n        const params = {\n            method: 'GET', // 请求方法 get post\n            headers, // 加到请求头的参数\n            mode: 'cors', // 请求模式\n            cache: 'default', // 缓存\n            referrerPolicy: 'no-referrer-when-downgrade', // 控制refferrer 此为默认值\n            credentials: 'same-origin' // 控制cookie，同源发送\n        };\n\n        if (typeof seekConfig.headers === 'object') {\n            const configHeaders = seekConfig.headers;\n            Object.keys(configHeaders).forEach((key) => {\n                headers.append(key, (configHeaders as any)[key]);\n            });\n        }\n\n        if (typeof this.userConfig.headers === 'object') {\n            Object.keys(this.userConfig.headers).forEach((key) => {\n                this.userConfig.headers && headers.append(key, this.userConfig.headers[key]);\n            });\n        }\n\n        if (mediaConfig.cors === false) {\n            params.mode = 'same-origin';\n        }\n\n        if (mediaConfig.withCredentials) {\n            params.credentials = 'include'; // 发送cookie\n        }\n\n        if (mediaConfig.referrerPolicy) {\n            params.referrerPolicy = mediaConfig.referrerPolicy;\n        }\n\n        this._status = LoaderStatus.kConnecting;\n\n        GlobalEnvironment.fetch(seekConfig.url, params as any)\n            .then((res) => {\n                if (this.requestAbort) {\n                    this.requestAbort = false;\n                    this._status = LoaderStatus.kIdle;\n                    return;\n                }\n                if (res && res.ok && (res.status >= 200 && res.status <= 299)) {\n                    if (res.url !== seekConfig.url) {\n                        if (this._onURLRedirect) {\n                            const redirectedURL: string = this.seekHandler.removeURLParameters(\n                                res.url\n                            );\n                            this._onURLRedirect(redirectedURL);\n                        }\n                    }\n\n                    const lengthHeader: string | null = res.headers.get('Content-Length');\n                    if (lengthHeader !== null) {\n                        this.contentLength = parseInt(lengthHeader, 10);\n                        if (this.contentLength !== 0) {\n                            if (this._onContentLengthKnown) {\n                                this._onContentLengthKnown(this.contentLength);\n                            }\n                        }\n                    }\n                    if (res === null || res.body === null) {\n                        return;\n                    }\n                    return this._pump.call(this, res.body.getReader());\n                }\n                this._status = LoaderStatus.kError;\n                if (this._onError) {\n                    this._onError(LoaderErrors.HTTP_STATUS_CODE_INVALID, {\n                        code: res.status,\n                        reason: res.statusText\n                    });\n                } else {\n                    throw new RuntimeException(\n                        `FetchStreamLoader: Http code invalid, ${res.status} ${res.statusText}`\n                    );\n                }\n            })\n            .catch((e) => {\n                this._status = LoaderStatus.kError;\n                if (this._onError) {\n                    this._onError(LoaderErrors.EXCEPTION, { code: -1, reason: e.message });\n                } else {\n                    throw e;\n                }\n            });\n    }\n\n    _pump(reader: ReadableStreamDefaultReader): Promise<any> {\n        return reader\n            .read()\n            .then((result) => {\n                if (result.done) {\n                    if (this.contentLength !== null && this.receivedLength < this.contentLength) {\n                        this._status = LoaderStatus.kError;\n                        const type = LoaderErrors.EARLY_EOF;\n                        const info = { code: -1, reason: 'Fetch stream meet Early-EOF' };\n\n                        if (this._onError) {\n                            this._onError(type, info);\n                        } else {\n                            throw new RuntimeException(info.reason);\n                        }\n                    } else {\n                        this._status = LoaderStatus.kComplete;\n                        if (this._onComplete) {\n                            this._onComplete(\n                                this.seekRange.from,\n                                this.seekRange.from + this.receivedLength - 1\n                            );\n                        }\n                    }\n                } else {\n                    if (this.requestAbort === true) {\n                        this.requestAbort = false;\n                        this._status = LoaderStatus.kComplete;\n                        return reader.cancel();\n                    }\n\n                    this._status = LoaderStatus.kBuffering;\n                    const chunk = result.value.buffer;\n                    const byteStart = this.seekRange.from + this.receivedLength;\n                    this.receivedLength += chunk.byteLength;\n\n                    if (this._onDataArrival) {\n                        this._onDataArrival(chunk, byteStart, this.receivedLength);\n                    }\n                    this._pump(reader);\n                }\n            })\n            .catch((e) => {\n                if (e.code === 11 && Browser.msedge) {\n                    return;\n                }\n                this._status = LoaderStatus.kError;\n                let type: number | string = LoaderErrors.EXCEPTION;\n                let info: { reason: string; code: number } = { code: e.code || -1, reason: e.message || 'readable stream exception' };\n\n                if (\n                    (e.code === 19 || e.message === 'network error')\n                    && (this.contentLength === null\n                        || (this.contentLength !== null && this.receivedLength < this.contentLength))\n                ) {\n                    type = LoaderErrors.EARLY_EOF;\n                    info = { code: e.code, reason: e.message };\n                }\n\n                if (this._onError) {\n                    this._onError(type, info);\n                } else {\n                    if (!info) {\n                        return;\n                    }\n                    throw new RuntimeException(info.reason);\n                }\n            });\n    }\n\n    /**\n     * 待实现\n     */\n    // isWorking(): boolean {\n    //     return true\n    // }\n    /**\n     * 取消加载\n     */\n    abort(): void {\n        this.requestAbort = true;\n    }\n}\n\nexport default FetchStreamLoader;\n","import logger from '../Utils/Logger';\nimport {\n    LoaderContext,\n    LoaderConfiguration,\n    LoaderCallbacks,\n    XhrLoaderStats\n} from '../Interfaces/Loader';\nimport getGlobal from '../Utils/getGlobalObject';\n\nconst GlobalEnvironment = getGlobal();\n\nconst { performance } = GlobalEnvironment;\n\nclass XhrLoader {\n    public Tag: string = 'XhrLoader'\n\n    private xhrSetup: ((xhr: XMLHttpRequest, url: string) => void) | null = null\n\n    private loader: XMLHttpRequest | null = null\n\n    /**\n     * 请求超时时间\n     */\n    private requestTimeout: null | number = null\n\n    /**\n     * xhr 请求时间统计\n     */\n    public stats: XhrLoaderStats | null = null\n\n    /**\n     * 重试timeout\n     */\n    retryTimeout: number | null = null;\n\n    /* eslint-disable */\n    context: LoaderContext | null = null;\n\n    /* eslint-endable */\n\n    config: LoaderConfiguration | null = null;\n\n    /**\n     * 回调函数\n     */\n    callbacks: LoaderCallbacks<LoaderContext> | null = null\n\n    /**\n     * 重试的delay时间\n     */\n    retryDelay: number = 0\n\n    constructor(config?: { xhrSetup: (xhr: XMLHttpRequest, url: string) => void }) {\n        this.context = null;\n        if(config && config.xhrSetup) {\n            this.xhrSetup = config.xhrSetup;\n        }\n    }\n\n    destroy(): void {\n        this.abort();\n        this.loader = null;\n    }\n\n    abort(): void {\n        const { loader } = this;\n        if(loader && loader.readyState !== 4) {\n            (this.stats as XhrLoaderStats).aborted = true;\n            loader.abort();\n        }\n\n        (GlobalEnvironment as any).clearTimeout(this.requestTimeout);\n        this.requestTimeout = null;\n        (GlobalEnvironment as any).clearTimeout(this.retryTimeout);\n        this.retryTimeout = null;\n    }\n\n    load(\n        context: LoaderContext,\n        config: LoaderConfiguration,\n        callback: LoaderCallbacks<LoaderContext>\n    ): void {\n        this.context = context;\n        this.config = config;\n        this.callbacks = callback;\n        this.stats = {\n            trequest: performance.now(),\n            retry: 0,\n            tfirst: 0,\n            loaded: 0,\n            // total number of bytes\n            total: 0,\n            tload: 0,\n            aborted: false\n        };\n        this.retryDelay = config.retryDelay;\n        this.loadInternal();\n    }\n\n    loadInternal(): void {\n        const { context } = this;\n        const xhr = new XMLHttpRequest();\n\n        const stats = this.stats as XhrLoaderStats;\n        stats.tfirst = 0;\n        stats.loaded = 0;\n        const { xhrSetup } = this;\n\n        if(!context || !this.callbacks || !this.config) {\n            return;\n        }\n\n        try {\n            if(xhrSetup) {\n                try {\n                    xhrSetup(xhr, context.url);\n                } catch (e) {\n                    xhr.open('GET', context.url, true);\n                    xhrSetup(xhr, context.url);\n                }\n            }\n            if(!xhr.readyState) {\n                xhr.open('GET', context.url, true);\n            }\n        } catch (e) {\n            this.callbacks.onError(\n                {\n                    code: xhr.status,\n                    text: e.message\n                },\n                context,\n                xhr\n            );\n            return;\n        }\n\n        if(context.rangeEnd) {\n            xhr.setRequestHeader(\n                'Range',\n                `bytes=${context.rangeStart}-${context.rangeEnd - 1}`\n            );\n        }\n        // statechange progress 事件设置回调\n        xhr.onreadystatechange = this.readystatechange.bind(this);\n        xhr.onprogress = this.loadprogress.bind(this);\n        xhr.responseType = context.responseType;\n\n        this.requestTimeout = GlobalEnvironment.setTimeout(this.loadtimeout.bind(this), this.config.timeout);\n        xhr.send();\n    }\n\n    readystatechange(event: Event): void {\n        const xhr = event.currentTarget as XMLHttpRequest;\n\n        const { readyState } = xhr;\n        const stats = this.stats as XhrLoaderStats;\n        const context = this.context as LoaderContext;\n        const config = this.config as LoaderConfiguration;\n\n        if(stats.aborted) {\n            return;\n        }\n        if(!this.callbacks) {\n            return;\n        }\n        if(readyState >= 2) {\n            (<any>GlobalEnvironment).clearTimeout(this.requestTimeout);\n            if(stats.tfirst === 0) {\n                stats.tfirst = Math.max(performance.now(), stats.trequest); // 首次请求开始时间\n            }\n\n            if(readyState === 4) {\n                const { status } = xhr;\n                if(status >= 200 && status < 300) {\n                    // 正常返回数据\n                    stats.tload = Math.max(stats.tfirst, performance.now());\n                    let data; let\n                        len;\n                    if(context.responseType === 'arraybuffer') {\n                        data = xhr.response;\n                        len = data.byteLength;\n                    } else {\n                        data = xhr.responseText;\n                        len = data.length;\n                    }\n                    stats.total = len;\n                    stats.loaded = len;\n                    const response = { url: xhr.responseURL, data };\n                    this.callbacks.onSuccess(response, stats, context, xhr);\n                } else if(\n                    (stats.retry as number) >= config.maxRetry\n                        || (status >= 400 && status < 499)\n                ) {\n                    // 4xx 客户端问题，抛出错误\n                    logger.error(this.Tag, `${status} while loading ${context.url}`);\n                    this.callbacks.onError(\n                        {\n                            code: status,\n                            text: xhr.statusText\n                        },\n                        context,\n                        xhr\n                    );\n                } else {\n                    // 5xx 服务器端错误进行重试~\n                    logger.warn(\n                        this.Tag,\n                        `${status} while loading ${context.url}, retrying in ${this.retryDelay}...`\n                    );\n                    // abort and reset internal state\n                    this.destroy();\n                    // schedule retry\n                    this.retryTimeout = GlobalEnvironment.setTimeout(\n                        this.loadInternal.bind(this),\n                        this.retryDelay\n                    );\n                    // set exponential backoff\n                    this.retryDelay = Math.min(2 * this.retryDelay, config.maxRetryDelay);\n                    stats.retry++;\n                }\n            } else {\n                this.requestTimeout = GlobalEnvironment.setTimeout(this.loadtimeout.bind(this), config.timeout); // 状态改变超时处理\n            }\n        }\n    }\n\n    /**\n     * 状态改变超时处理\n     */\n    loadtimeout(): void {\n        if(!this.context || !this.callbacks || !this.stats) {\n            return;\n        }\n        logger.warn(this.Tag, `timeout while loading ${this.context.url}`);\n        this.callbacks.onTimeout(this.stats, this.context, null);\n    }\n\n    /**\n     * 进度处理\n     */\n    loadprogress(event: ProgressEvent): void {\n        const xhr = <XMLHttpRequest>event.currentTarget;\n        const { stats } = this;\n\n        if(!stats || !this.callbacks || !this.context) {\n            return;\n        }\n        stats.loaded = event.loaded;\n        if(event.lengthComputable) {\n            stats.total = event.total;\n        }\n\n        const { onProgress } = this.callbacks;\n        if(onProgress) {\n            onProgress(stats, this.context, '', xhr);\n        }\n    }\n}\n\nexport default XhrLoader;\n","import SeekRange from '../Interfaces/SeekRange';\n\n/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass ParamSeekHandler {\n    private _startName: string\n\n    private _endName: string\n\n    constructor(paramStart: string, paramEnd: string) {\n        this._startName = paramStart;\n        this._endName = paramEnd;\n    }\n\n    getConfig(baseUrl: string, range: SeekRange) {\n        let url = baseUrl;\n\n        if(range.from !== 0 || range.to !== -1) {\n            let needAnd = true;\n            if(url.indexOf('?') === -1) {\n                url += '?';\n                needAnd = false;\n            }\n\n            if(needAnd) {\n                url += '&';\n            }\n\n            url += `${this._startName}=${range.from.toString()}`;\n\n            if(range.to !== -1) {\n                url += `&${this._endName}=${range.to.toString()}`;\n            }\n        }\n\n        return {\n            url,\n            headers: {}\n        };\n    }\n\n    removeURLParameters(seekedURL: string) {\n        const baseURL = seekedURL.split('?')[0];\n        let params;\n\n        const queryIndex = seekedURL.indexOf('?');\n        if(queryIndex !== -1) {\n            params = seekedURL.substring(queryIndex + 1);\n        }\n\n        let resultParams = '';\n\n        if(params !== undefined && params.length > 0) {\n            const pairs = params.split('&');\n\n            for(let i = 0; i < pairs.length; i++) {\n                const pair = pairs[i].split('=');\n                const requireAnd = i > 0;\n\n                if(pair[0] !== this._startName && pair[0] !== this._endName) {\n                    if(requireAnd) {\n                        resultParams += '&';\n                    }\n                    resultParams += pairs[i];\n                }\n            }\n        }\n\n        return resultParams.length === 0 ? baseURL : `${baseURL}?${resultParams}`;\n    }\n}\n\nexport default ParamSeekHandler;\n","import URLToolkit from 'url-toolkit';\nimport logger from '../Utils/Logger';\nimport LevelKey from '../Parser/LevelKey';\nimport { PlaylistLevelType } from '../Interfaces/Loader';\n\nexport enum ElementaryStreamTypes {\n    AUDIO = 'audio',\n    VIDEO = 'video'\n}\n\nexport default class Fragment {\n    Tag: string = 'Fragment'\n\n    private _url: string | null = null\n\n    private _byteRange: number[] | null = null\n\n    private _decryptdata: LevelKey | null = null\n\n    // Holds the types of data this fragment supports\n    private _elementaryStreams: Record<ElementaryStreamTypes, boolean> = {\n        [ElementaryStreamTypes.AUDIO]: false,\n        [ElementaryStreamTypes.VIDEO]: false\n    }\n\n    // deltaPTS tracks the change in presentation timestamp between fragments\n    public deltaPTS: number = 0\n\n    public rawProgramDateTime: string | null = null\n\n    public programDateTime: number | null = null\n\n    public title: string | null = null\n\n    public tagList: Array<string[]> = []\n\n    // TODO: Move at least baseurl to constructor.\n    // Currently we do a two-pass construction as use the Fragment class almost like a object for holding parsing state.\n    // It may make more sense to just use a POJO to keep state during the parsing phase.\n    // Have Fragment be the representation once we have a known state?\n    // Something to think on.\n\n    // Discontinuity Counter\n    public cc!: number\n\n    public type!: PlaylistLevelType\n\n    // relurl is the portion of the URL that comes from inside the playlist.\n    public relurl!: string\n\n    // baseurl is the URL to the playlist\n    public baseurl!: string\n\n    // EXTINF has to be present for a m3u8 to be considered valid\n    public duration!: number\n\n    // When this segment starts in the timeline\n    public start!: number\n\n    // sn notates the sequence number for a segment, and if set to a string can be 'initSegment'\n    public sn: number | 'initSegment' = 0\n\n    public urlId: number = 0\n\n    // level matches this fragment to a index playlist\n    public level: number = 0\n\n    // levelkey is the EXT-X-KEY that applies to this segment for decryption\n    // core difference from the private field _decryptdata is the lack of the initialized IV\n    // _decryptdata will set the IV for this segment based on the segment number in the fragment\n    public levelkey?: LevelKey\n\n    // TODO(typescript-xhrloader)\n    public loader: any\n\n    // setByteRange converts a EXT-X-BYTERANGE attribute into a two element array\n    setByteRange(value: string, previousFrag?: Fragment) {\n        const params = value.split('@', 2);\n        const byteRange: number[] = [];\n        if(params.length === 1) {\n            byteRange[0] = previousFrag ? previousFrag.byteRangeEndOffset : 0;\n        } else {\n            byteRange[0] = parseInt(params[1], 10);\n        }\n        byteRange[1] = parseInt(params[0], 10) + byteRange[0];\n        this._byteRange = byteRange;\n    }\n\n    get url() {\n        if(!this._url && this.relurl) {\n            this._url = URLToolkit.buildAbsoluteURL(this.baseurl, this.relurl, {\n                alwaysNormalize: true\n            });\n        }\n\n        return this._url;\n    }\n\n    set url(value) {\n        this._url = value;\n    }\n\n    get byteRange(): number[] {\n        if(!this._byteRange) {\n            return [];\n        }\n\n        return this._byteRange;\n    }\n\n    /**\n     * @type {number}\n     */\n    get byteRangeStartOffset() {\n        return this.byteRange[0];\n    }\n\n    get byteRangeEndOffset() {\n        return this.byteRange[1];\n    }\n\n    get decryptdata(): LevelKey | null {\n        if(!this.levelkey && !this._decryptdata) {\n            return null;\n        }\n\n        if(!this._decryptdata && this.levelkey) {\n            let { sn } = this;\n            if(typeof sn !== 'number') {\n                // We are fetching decryption data for a initialization segment\n                // If the segment was encrypted with AES-128\n                // It must have an IV defined. We cannot substitute the Segment Number in.\n                if(this.levelkey && this.levelkey.method === 'AES-128' && !this.levelkey.iv) {\n                    logger.warn(\n                        this.Tag,\n                        `missing IV for initialization segment with method=\"${this.levelkey.method}\" - compliance issue`\n                    );\n                }\n\n                /*\n        Be converted to a Number.\n        'initSegment' will become NaN.\n        NaN, which when converted through ToInt32() -> +0.\n        ---\n        Explicitly set sn to resulting value from implicit conversions 'initSegment' values for IV generation.\n        */\n                sn = 0;\n            }\n            this._decryptdata = this.setDecryptDataFromLevelKey(this.levelkey, sn);\n        }\n\n        return this._decryptdata;\n    }\n\n    get endProgramDateTime() {\n        if(this.programDateTime === null) {\n            return null;\n        }\n\n        if(!Number.isFinite(this.programDateTime)) {\n            return null;\n        }\n\n        const duration = !Number.isFinite(this.duration) ? 0 : this.duration;\n\n        return this.programDateTime + duration * 1000;\n    }\n\n    get encrypted() {\n        return !!(\n            this.decryptdata\n            && this.decryptdata.uri !== null\n            && this.decryptdata.key === null\n        );\n    }\n\n    /**\n     * @param {ElementaryStreamTypes} type\n     */\n    addElementaryStream(type: ElementaryStreamTypes) {\n        this._elementaryStreams[type] = true;\n    }\n\n    /**\n     * @param {ElementaryStreamTypes} type\n     */\n    hasElementaryStream(type: ElementaryStreamTypes) {\n        return this._elementaryStreams[type] === true;\n    }\n\n    /**\n     * Utility method for parseLevelPlaylist to create an initialization vector for a given segment\n     * @param {number} segmentNumber - segment number to generate IV with\n     * @returns {Uint8Array}\n     */\n    createInitializationVector(segmentNumber: number): Uint8Array {\n        const uint8View = new Uint8Array(16);\n\n        for(let i = 12; i < 16; i++) {\n            uint8View[i] = (segmentNumber >> (8 * (15 - i))) & 0xff;\n        }\n\n        return uint8View;\n    }\n\n    /**\n     * Utility method for parseLevelPlaylist to get a fragment's decryption data from the currently parsed encryption key data\n     * @param levelkey - a playlist's encryption info\n     * @param segmentNumber - the fragment's segment number\n     * @returns {LevelKey} - an object to be applied as a fragment's decryptdata\n     */\n    setDecryptDataFromLevelKey(levelkey: LevelKey, segmentNumber: number): LevelKey {\n        let decryptdata = levelkey;\n\n        if(levelkey && levelkey.method && levelkey.uri && !levelkey.iv) {\n            decryptdata = new LevelKey(levelkey.baseuri, levelkey.reluri);\n            decryptdata.method = levelkey.method;\n            decryptdata.iv = this.createInitializationVector(segmentNumber);\n        }\n\n        return decryptdata;\n    }\n}\n","import URLToolkit from 'url-toolkit';\n\nexport default class LevelKey {\n    private _uri: null | string = null\n\n    public method: string | null = null\n\n    public key: Uint8Array | null = null\n\n    public iv: Uint8Array | null = null\n\n    public baseuri: string\n\n    public reluri: string\n\n    constructor(baseURI: string, relativeURI: string) {\n        this.baseuri = baseURI;\n        this.reluri = relativeURI;\n    }\n\n    get uri(): string {\n        if(!this._uri && this.reluri) {\n            this._uri = URLToolkit.buildAbsoluteURL(this.baseuri, this.reluri, {\n                alwaysNormalize: true\n            });\n        }\n        return <string> this._uri;\n    }\n}\n","import Fragment from '../Loaders/Fragment';\n\nexport default class Level {\n    endCC: number\n\n    /**\n     * m3u8 最后ts文件的序列号\n     */\n    endSN: number\n\n    fragments: Fragment[]\n\n    initSegment: any\n\n    live: boolean\n\n    needSidxRanges: boolean\n\n    startCC: number\n\n    /**\n     * m3u8第一个ts序列号\n     */\n    startSN: number\n\n    startTimeOffset: null | number\n\n    /**\n     * 视频的最大时长\n     */\n    targetduration: number\n\n    /**\n     * 总时长\n     */\n    totalduration: number\n\n    type: any\n\n    /**\n     * ts 链接\n     */\n    private url: string\n\n    /**\n     * 平均时长\n     */\n    averagetargetduration?: number\n\n    /**\n     * 兼容的版本号\n     */\n    version: null | string | number\n\n    constructor(baseUrl: string) {\n        // Please keep properties in alphabetical order\n        this.endCC = 0;\n        this.endSN = 0;\n        this.fragments = [];\n        this.initSegment = null;\n        this.live = true;\n        this.needSidxRanges = false;\n        this.startCC = 0;\n        this.startSN = 0;\n        this.startTimeOffset = null;\n        this.targetduration = 0;\n        this.totalduration = 0;\n        this.type = null;\n        this.url = baseUrl;\n        this.version = null;\n        this.averagetargetduration = 0;\n    }\n\n    get hasProgramDateTime(): boolean {\n        return !!(this.fragments[0] && Number.isFinite(<number> this.fragments[0].programDateTime));\n    }\n}\n","const DECIMAL_RESOLUTION_REGEX = /^(\\d+)x(\\d+)$/; // eslint-disable-line no-useless-escape\nconst ATTR_LIST_REGEX = /\\s*(.+?)\\s*=((?:\\\".*?\\\")|.*?)(?:,|$)/g; // eslint-disable-line no-useless-escape\n\n// adapted from https://github.com/kanongil/node-m3u8parse/blob/master/attrlist.js\nclass AttrList {\n    AUDIO: string = '' // todo 确认内容\n\n    constructor(attrs: string | object) {\n        if(typeof attrs === 'string') {\n            attrs = AttrList.parseAttrList(attrs);\n        }\n\n        Object.keys(attrs).forEach((attr) => {\n            (this as any)[attr] = (attrs as any)[attr];\n        });\n    }\n\n    decimalInteger(attrName: string): number {\n        const intValue = parseInt((this as any)[attrName], 10);\n        if(intValue > Number.MAX_SAFE_INTEGER) {\n            return Infinity;\n        }\n\n        return intValue;\n    }\n\n    hexadecimalInteger(attrName: string): Uint8Array | null {\n        if((this as any)[attrName]) {\n            let stringValue = ((this as any)[attrName] || '0x').slice(2);\n            stringValue = (stringValue.length & 1 ? '0' : '') + stringValue;\n\n            const value = new Uint8Array(stringValue.length / 2);\n            for(let i = 0; i < stringValue.length / 2; i++) {\n                value[i] = parseInt(stringValue.slice(i * 2, i * 2 + 2), 16);\n            }\n\n            return value;\n        }\n        return null;\n    }\n\n    hexadecimalIntegerAsNumber(attrName: string): number {\n        const intValue = parseInt((this as any)[attrName], 16);\n        if(intValue > Number.MAX_SAFE_INTEGER) {\n            return Infinity;\n        }\n\n        return intValue;\n    }\n\n    decimalFloatingPoint(attrName: string): number {\n        return parseFloat((this as any)[attrName]);\n    }\n\n    enumeratedString(attrName: string): number {\n        return (this as any)[attrName];\n    }\n\n    decimalResolution(attrName: string): undefined | { width: number; height: number } {\n        const res = DECIMAL_RESOLUTION_REGEX.exec((this as any)[attrName]);\n        if(res === null) {\n            return undefined;\n        }\n\n        return {\n            width: parseInt(res[1], 10),\n            height: parseInt(res[2], 10)\n        };\n    }\n\n    static parseAttrList(input: string) {\n        let match;\n        const attrs = Object.create(null);\n        const quote = '\"';\n        let value;\n        ATTR_LIST_REGEX.lastIndex = 0;\n        while(ATTR_LIST_REGEX.exec(input) !== null) {\n            const match:RegExpExecArray = <RegExpExecArray>ATTR_LIST_REGEX.exec(input);\n            value = match[2];\n            if(value.indexOf(quote) === 0 && value.lastIndexOf(quote) === value.length - 1) {\n                value = value.slice(1, -1);\n            }\n            (attrs as any)[match[1]] = value; // todo attrs 类型\n        }\n        return attrs;\n    }\n}\n\nexport default AttrList;\n","// from http://mp4ra.org/codecs.html\nconst sampleEntryCodesISO = {\n    audio: {\n        a3ds: true,\n        'ac-3': true,\n        'ac-4': true,\n        alac: true,\n        alaw: true,\n        dra1: true,\n        'dts+': true,\n        'dts-': true,\n        dtsc: true,\n        dtse: true,\n        dtsh: true,\n        'ec-3': true,\n        enca: true,\n        g719: true,\n        g726: true,\n        m4ae: true,\n        mha1: true,\n        mha2: true,\n        mhm1: true,\n        mhm2: true,\n        mlpa: true,\n        mp4a: true,\n        'raw ': true,\n        Opus: true,\n        samr: true,\n        sawb: true,\n        sawp: true,\n        sevc: true,\n        sqcp: true,\n        ssmv: true,\n        twos: true,\n        ulaw: true\n    },\n    video: {\n        avc1: true,\n        avc2: true,\n        avc3: true,\n        avc4: true,\n        avcp: true,\n        drac: true,\n        dvav: true,\n        dvhe: true,\n        encv: true,\n        hev1: true,\n        hvc1: true,\n        mjp2: true,\n        mp4v: true,\n        mvc1: true,\n        mvc2: true,\n        mvc3: true,\n        mvc4: true,\n        resv: true,\n        rv60: true,\n        s263: true,\n        svc1: true,\n        svc2: true,\n        'vc-1': true,\n        vp08: true,\n        vp09: true\n    }\n};\n\nexport type CodecType = 'audio' | 'video'\n\nfunction isCodecType(codec: string, type: CodecType): boolean {\n    const typeCodes: any = sampleEntryCodesISO[type];\n    return !!typeCodes && typeCodes[codec.slice(0, 4)] === true;\n}\n\nfunction isCodecSupportedInMp4(codec: string, type: CodecType): boolean {\n    return (window as any).MediaSource.isTypeSupported(`${type || 'video'}/mp4;codecs=\"${codec}\"`);\n}\n\nexport { isCodecType, isCodecSupportedInMp4 };\n","import URLToolkit from 'url-toolkit';\nimport Fragment from '../Loaders/Fragment';\nimport Level from './Level';\nimport LevelKey from './LevelKey';\nimport AttrList from '../Utils/attr-list';\nimport logger from '../Utils/Logger';\nimport { MediaPlaylist, AudioGroup, MediaPlaylistType } from '../Interfaces/Media-playlist';\nimport { PlaylistLevelType, SingleLevels } from '../Interfaces/Loader';\nimport { isCodecType, CodecType } from '../Utils/codecs';\n\n/* eslint-disable */\n\n/**\n * M3U8 parser\n * @module\n */\n\n// https://regex101.com is your friend\nconst MASTER_PLAYLIST_REGEX = /#EXT-X-STREAM-INF:([^\\n\\r]*)[\\r\\n]+([^\\r\\n]+)/g\nconst MASTER_PLAYLIST_MEDIA_REGEX = /#EXT-X-MEDIA:(.*)/g\n\nconst LEVEL_PLAYLIST_REGEX_FAST = new RegExp(\n    [\n        /#EXTINF:\\s*(\\d*(?:\\.\\d+)?)(?:,(.*)\\s+)?/.source, // duration (#EXTINF:<duration>,<title>), group 1 => duration, group 2 => title\n        /|(?!#)([\\S+ ?]+)/.source, // segment URI, group 3 => the URI (note newline is not eaten)\n        /|#EXT-X-BYTERANGE:*(.+)/.source, // next segment's byterange, group 4 => range spec (x@y)\n        /|#EXT-X-PROGRAM-DATE-TIME:(.+)/.source, // next segment's program date/time group 5 => the datetime spec\n        /|#.*/.source // All other non-segment oriented tags will match with all groups empty\n    ].join(''),\n    'g'\n)\n\nconst LEVEL_PLAYLIST_REGEX_SLOW = /(?:(?:#(EXTM3U))|(?:#EXT-X-(PLAYLIST-TYPE):(.+))|(?:#EXT-X-(MEDIA-SEQUENCE): *(\\d+))|(?:#EXT-X-(TARGETDURATION): *(\\d+))|(?:#EXT-X-(KEY):(.+))|(?:#EXT-X-(START):(.+))|(?:#EXT-X-(ENDLIST))|(?:#EXT-X-(DISCONTINUITY-SEQ)UENCE:(\\d+))|(?:#EXT-X-(DIS)CONTINUITY))|(?:#EXT-X-(VERSION):(\\d+))|(?:#EXT-X-(MAP):(.+))|(?:(#)([^:]*):(.*))|(?:(#)(.*))(?:.*)\\r?\\n?/\n\nconst MP4_REGEX_SUFFIX = /\\.(mp4|m4s|m4v|m4a)$/i\n\nexport default class M3U8Parser {\n    static Tag: string = 'M3U8Parser'\n\n    static findGroup(groups: Array<AudioGroup>, mediaGroupId: string): AudioGroup | null {\n        if (!groups) {\n            return null\n        }\n\n        let matchingGroup = null\n\n        for (let i = 0; i < groups.length; i++) {\n            const group = groups[i]\n            if (group.id === mediaGroupId) {\n                matchingGroup = group\n            }\n        }\n\n        return matchingGroup\n    }\n\n    static convertAVC1ToAVCOTI(codec: string) {\n        let avcdata: Array<any> = codec.split('.')\n        let result\n        if (avcdata.length > 2) {\n            result = avcdata.shift() + '.'\n            result += parseInt(avcdata.shift()).toString(16)\n            result += ('000' + parseInt(avcdata.shift()).toString(16)).substr(-4)\n        } else {\n            result = codec\n        }\n        return result\n    }\n\n    static resolve(url: string, baseUrl: string): string {\n        return URLToolkit.buildAbsoluteURL(baseUrl, url, { alwaysNormalize: true })\n    }\n\n    static parseMasterPlaylist(string: string, baseurl: string): SingleLevels[] {\n        let levels: Array<any> = []\n        MASTER_PLAYLIST_REGEX.lastIndex = 0\n\n        function setCodecs(codecs: Array<string>, level: any) {\n            ;['video', 'audio'].forEach(type => {\n                const filtered = codecs.filter(codec => isCodecType(codec, type as CodecType))\n                if (filtered.length) {\n                    const preferred = filtered.filter(codec => {\n                        return (\n                            codec.lastIndexOf('avc1', 0) === 0 || codec.lastIndexOf('mp4a', 0) === 0\n                        )\n                    })\n                    level[`${type}Codec`] = preferred.length > 0 ? preferred[0] : filtered[0]\n\n                    // remove from list\n                    codecs = codecs.filter(codec => filtered.indexOf(codec) === -1)\n                }\n            })\n\n            level.unknownCodecs = codecs\n        }\n\n        let result: RegExpExecArray | null\n        while ((result = MASTER_PLAYLIST_REGEX.exec(string)) != null) {\n            const level: any = {}\n\n            const attrs = (level.attrs = new AttrList(result[1]))\n            level.url = M3U8Parser.resolve(result[2], baseurl)\n\n            const resolution = attrs.decimalResolution('RESOLUTION')\n            if (resolution) {\n                level.width = resolution.width\n                level.height = resolution.height\n            }\n            level.bitrate =\n                attrs.decimalInteger('AVERAGE-BANDWIDTH') || attrs.decimalInteger('BANDWIDTH')\n            level.name = (<any>attrs).NAME\n\n            setCodecs([].concat(((<any>attrs).CODECS || '').split(/[ ,]+/)), level)\n\n            if (level.videoCodec && level.videoCodec.indexOf('avc1') !== -1) {\n                level.videoCodec = M3U8Parser.convertAVC1ToAVCOTI(level.videoCodec)\n            }\n\n            levels.push(level)\n        }\n        return levels\n    }\n\n    static parseMasterPlaylistMedia(\n        string: string,\n        baseurl: string,\n        type: MediaPlaylistType,\n        audioGroups: Array<AudioGroup> = []\n    ): Array<MediaPlaylist> {\n        let result: RegExpExecArray | null\n        let medias: Array<MediaPlaylist> = []\n        let id = 0\n        MASTER_PLAYLIST_MEDIA_REGEX.lastIndex = 0\n        while ((result = MASTER_PLAYLIST_MEDIA_REGEX.exec(string)) !== null) {\n            const media = {}\n            const attrs: any = new AttrList(result[1])\n            if (attrs.TYPE === type) {\n                const media: MediaPlaylist = {\n                    id: id++,\n                    groupId: attrs['GROUP-ID'],\n                    name: attrs.NAME || attrs.LANGUAGE,\n                    type,\n                    default: attrs.DEFAULT === 'YES',\n                    autoselect: attrs.AUTOSELECT === 'YES',\n                    forced: attrs.FORCED === 'YES',\n                    lang: attrs.LANGUAGE\n                }\n\n                if (attrs.URI) {\n                    media.url = M3U8Parser.resolve(attrs.URI, baseurl)\n                }\n\n                if (audioGroups.length) {\n                    const groupCodec = M3U8Parser.findGroup(audioGroups, <string>media.groupId)\n                    media.audioCodec = groupCodec ? groupCodec.codec : audioGroups[0].codec\n                }\n\n                medias.push(media)\n            }\n        }\n        return medias\n    }\n\n    static parseLevelPlaylist(\n        string: string,\n        baseurl: string,\n        id: number,\n        type: PlaylistLevelType,\n        levelUrlId: number\n    ): Level {\n        let currentSN = 0\n        let totalduration = 0\n        let level = new Level(baseurl)\n\n        let levelkey: LevelKey | undefined // todo 不用传输吗？？？\n        let cc = 0\n        let prevFrag: Fragment | null = null\n        let frag: Fragment | null = new Fragment()\n        let result: RegExpExecArray | RegExpMatchArray | null\n        let i: number\n\n        let firstPdtIndex = null\n\n        LEVEL_PLAYLIST_REGEX_FAST.lastIndex = 0\n\n        while ((result = LEVEL_PLAYLIST_REGEX_FAST.exec(string)) !== null) {\n            const duration = result[1]\n            if (duration) {\n                // 持续时间\n                frag.duration = parseFloat(duration)\n                // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939\n                const title = (' ' + result[2]).slice(1)\n                frag.title = title || null\n                frag.tagList.push(title ? ['INF', duration, title] : ['INF', duration])\n            } else if (result[3]) {\n                // url\n                if (Number.isFinite(frag.duration)) {\n                    const sn = currentSN++\n                    frag.type = type\n                    frag.start = totalduration\n                    frag.levelkey = levelkey\n                    frag.sn = sn\n                    frag.level = id\n                    frag.cc = cc\n                    frag.urlId = levelUrlId\n                    frag.baseurl = baseurl\n                    // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939\n                    frag.relurl = (' ' + result[3]).slice(1)\n                    assignProgramDateTime(frag, prevFrag)\n\n                    level.fragments.push(frag)\n                    prevFrag = frag\n                    totalduration += frag.duration\n\n                    frag = new Fragment()\n                }\n            } else if (result[4]) {\n                // X-BYTERANGE\n                const data = (' ' + result[4]).slice(1)\n                if (prevFrag) {\n                    frag.setByteRange(data, prevFrag)\n                } else {\n                    frag.setByteRange(data)\n                }\n            } else if (result[5]) {\n                // PROGRAM-DATE-TIME\n                // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939\n                frag.rawProgramDateTime = (' ' + result[5]).slice(1)\n                frag.tagList.push(['PROGRAM-DATE-TIME', frag.rawProgramDateTime])\n                if (firstPdtIndex === null) {\n                    firstPdtIndex = level.fragments.length\n                }\n            } else {\n                result = result[0].match(LEVEL_PLAYLIST_REGEX_SLOW) as RegExpExecArray\n\n                for (i = 1; i < result.length; i++) {\n                    if (typeof result[i] !== 'undefined') {\n                        break\n                    }\n                }\n\n                // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939\n                const value1 = (' ' + result[i + 1]).slice(1)\n                const value2 = (' ' + result[i + 2]).slice(1)\n                switch (result[i]) {\n                    case '#':\n                        frag.tagList.push(value2 ? [value1, value2] : [value1])\n                        break\n                    case 'PLAYLIST-TYPE':\n                        level.type = value1.toUpperCase()\n                        break\n                    case 'MEDIA-SEQUENCE':\n                        currentSN = level.startSN = parseInt(value1)\n                        break\n                    case 'TARGETDURATION':\n                        level.targetduration = parseFloat(value1)\n                        break\n                    case 'VERSION':\n                        level.version = parseInt(value1)\n                        break\n                    case 'EXTM3U':\n                        break\n                    case 'ENDLIST':\n                        level.live = false\n                        break\n                    case 'DIS':\n                        cc++\n                        frag.tagList.push(['DIS'])\n                        break\n                    case 'DISCONTINUITY-SEQ':\n                        cc = parseInt(value1)\n                        break\n                    case 'KEY': {\n                        // https://tools.ietf.org/html/draft-pantos-http-live-streaming-08#section-3.4.4\n                        const decryptparams = value1\n                        const keyAttrs: any = new AttrList(decryptparams)\n                        const decryptmethod = keyAttrs.enumeratedString('METHOD')\n                        const decrypturi = keyAttrs.URI\n                        const decryptiv = keyAttrs.hexadecimalInteger('IV')\n\n                        if (decryptmethod) {\n                            levelkey = new LevelKey(baseurl, decrypturi)\n                            if (\n                                decrypturi &&\n                                ['AES-128', 'SAMPLE-AES', 'SAMPLE-AES-CENC'].indexOf(\n                                    decryptmethod\n                                ) >= 0\n                            ) {\n                                levelkey.method = decryptmethod\n                                // URI to get the key\n                                levelkey.baseuri = baseurl\n                                levelkey.reluri = decrypturi\n                                levelkey.key = null\n                                // Initialization Vector (IV)\n                                levelkey.iv = decryptiv\n                            }\n                        }\n                        break\n                    }\n                    case 'START': {\n                        const startAttrs = new AttrList(value1)\n                        const startTimeOffset = startAttrs.decimalFloatingPoint('TIME-OFFSET')\n                        // TIME-OFFSET can be 0\n                        if (Number.isFinite(startTimeOffset)) {\n                            level.startTimeOffset = startTimeOffset\n                        }\n                        break\n                    }\n                    case 'MAP': {\n                        const mapAttrs: any = new AttrList(value1)\n                        frag.relurl = mapAttrs.URI\n                        if (mapAttrs.BYTERANGE) {\n                            frag.setByteRange(mapAttrs.BYTERANGE)\n                        }\n                        frag.baseurl = baseurl\n                        frag.level = id\n                        frag.type = type\n                        frag.sn = 'initSegment'\n                        level.initSegment = frag\n                        frag = new Fragment()\n                        frag.rawProgramDateTime = level.initSegment.rawProgramDateTime\n                        break\n                    }\n                    default:\n                        logger.warn(this.Tag, `line parsed but not handled: ${result}`)\n                        break\n                }\n            }\n        }\n        frag = prevFrag\n        // logger.log('found ' + level.fragments.length + ' fragments');\n        if (frag && !frag.relurl) {\n            level.fragments.pop()\n            totalduration -= frag.duration\n        }\n        level.totalduration = totalduration // ts 总时长\n        level.averagetargetduration = totalduration / level.fragments.length // 计算平均时长\n        level.endSN = currentSN - 1 // 最后ts文件的序列号\n        level.startCC = level.fragments[0] ? level.fragments[0].cc : 0\n        level.endCC = cc\n\n        if (!level.initSegment && level.fragments.length) {\n            // this is a bit lurky but HLS really has no other way to tell us\n            // if the fragments are TS or MP4, except if we download them :/\n            // but this is to be able to handle SIDX.\n            if (level.fragments.every(frag => MP4_REGEX_SUFFIX.test(frag.relurl))) {\n                logger.warn(\n                    this.Tag,\n                    'MP4 fragments found but no init segment (probably no MAP, incomplete M3U8), trying to fetch SIDX'\n                )\n\n                frag = new Fragment()\n                frag.relurl = level.fragments[0].relurl\n                frag.baseurl = baseurl\n                frag.level = id\n                frag.type = type\n                frag.sn = 'initSegment'\n\n                level.initSegment = frag\n                level.needSidxRanges = true\n            }\n        }\n\n        /**\n         * Backfill any missing PDT values\n         \"If the first EXT-X-PROGRAM-DATE-TIME tag in a Playlist appears after\n        one or more Media Segment URIs, the client SHOULD extrapolate\n        backward from that tag (using EXTINF durations and/or media\n        timestamps) to associate dates with those segments.\"\n        * We have already extrapolated forward, but all fragments up to the first instance of PDT do not have their PDTs\n        * computed.\n        */\n        if (firstPdtIndex) {\n            backfillProgramDateTimes(level.fragments, firstPdtIndex)\n        }\n\n        return level\n    }\n}\n\nfunction backfillProgramDateTimes(fragments: any, startIndex: number): void {\n    let fragPrev = fragments[startIndex]\n    for (let i = startIndex - 1; i >= 0; i--) {\n        const frag = fragments[i]\n        frag.programDateTime = fragPrev.programDateTime - frag.duration * 1000\n        fragPrev = frag\n    }\n}\n\nfunction assignProgramDateTime(frag: any, prevFrag: any): void {\n    if (frag.rawProgramDateTime) {\n        frag.programDateTime = Date.parse(frag.rawProgramDateTime)\n    } else if (prevFrag && prevFrag.programDateTime) {\n        frag.programDateTime = prevFrag.endProgramDateTime\n    }\n\n    if (!Number.isFinite(frag.programDateTime)) {\n        frag.programDateTime = null\n        frag.rawProgramDateTime = null\n    }\n}\n/* eslint-enable */\n","import Level from '../Parser/Level';\nimport Attr from '../Utils/attr-list';\nimport Fragment from '../Loaders/Fragment';\n\nexport interface LoaderContext {\n    // target URL\n    url: string\n    // loader response type (arraybuffer or default response type for playlist)\n    responseType: XMLHttpRequestResponseType\n    // start byte range offset\n    rangeStart?: number\n    // end byte range offset\n    rangeEnd?: number\n    // true if onProgress should report partial chunk of loaded content\n    progressData?: boolean\n}\nexport interface FragLoaderContext extends LoaderContext {\n    frag?: Fragment\n    type?: string\n    level?: number\n    id?: number | null\n}\nexport interface level {\n    bitrate: number\n    width: number\n    height: number\n    name: string\n    url: string\n    videoCodec: string\n}\n\nexport interface LoaderConfiguration {\n    // Max number of load retries\n    maxRetry: number\n    // Timeout after which `onTimeOut` callback will be triggered\n    // (if loading is still not finished after that delay)\n    timeout: number\n    // Delay between an I/O error and following connection retry (ms).\n    // This to avoid spamming the server\n    retryDelay: number\n    // max connection retry delay (ms)\n    maxRetryDelay: number\n}\n\nexport interface LoaderResponse {\n    url: string\n    // TODO(jstackhouse): SharedArrayBuffer, es2017 extension to TS\n    data: string | ArrayBuffer\n}\n\nexport interface LoaderStats {\n    // performance.now() just after load() has been called\n    trequest: number\n    // performance.now() of first received byte\n    tfirst: number\n    // performance.now() on load complete\n    tload: number\n    // performance.now() on parse completion\n    tparsed?: number\n    // number of loaded bytes\n    loaded: number\n    // total number of bytes\n    total: number\n    //  performance.now() of first bufffer\n    tbuffered?: number\n}\n/**\n * xhr-load stats\n */\nexport interface XhrLoaderStats extends LoaderStats {\n    aborted: boolean\n    // 重试次数\n    retry: number // xhr-loader 重试次数\n\n    text?: string\n}\nexport interface XhrLoaderResponse extends LoaderResponse {\n    text?: string\n}\nexport interface Frag {\n    byteRangeStartOffset: number\n    byteRangeEndOffset: number\n    start: number\n    duration: number\n    type: string\n    url: string\n    sn: number\n}\n\ntype LoaderOnSuccess<T extends LoaderContext> = (\n    response: LoaderResponse,\n    stats: XhrLoaderStats,\n    context: T,\n    networkDetails: any\n) => void\n\ntype LoaderOnProgress<T extends LoaderContext> = (\n    stats: LoaderStats,\n    context: T,\n    data: string | ArrayBuffer,\n    networkDetails: any\n) => void\n\nexport interface ResponseData {\n    response: {\n        code: string | number\n        text: string\n    }\n}\nexport interface ErrorData {\n    // 错误返回数据格式\n    code: string | number\n    text: string\n}\ntype LoaderOnError<T extends LoaderContext> = (\n    error: {\n        // error status code\n        code: number\n        // error description\n        text: string\n    },\n    context: T,\n    networkDetails: any\n) => void\n\nexport type timeoutData = {\n    stats: XhrLoaderStats,\n    context: LoaderContext,\n    xhr: XMLHttpRequest | null\n}\n\nexport type LoaderOnTimeout<T extends LoaderContext> = (\n    stats: XhrLoaderStats,\n    context: T,\n    xhr: XMLHttpRequest | null\n) => void\n\nexport interface LoaderCallbacks<T extends LoaderContext> {\n    onSuccess: LoaderOnSuccess<T>\n    onError: LoaderOnError<T>\n    onTimeout: LoaderOnTimeout<T>\n    onProgress?: LoaderOnProgress<T>\n}\n\nexport interface Loader<T extends LoaderContext> {\n    destroy(): void\n    abort(): void\n    load(context: LoaderContext, config: LoaderConfiguration, callbacks: LoaderCallbacks<T>): void\n\n    context: T\n}\n\n/**\n * `type` property values for this loaders' context object\n * @enum\n *\n */\nexport enum PlaylistContextType {\n    MANIFEST = 'manifest',\n    LEVEL = 'level',\n    AUDIO_TRACK = 'audioTrack',\n    SUBTITLE_TRACK = 'subtitleTrack'\n}\n\n/**\n * @enum {string}\n */\nexport enum PlaylistLevelType {\n    MAIN = 'main',\n    AUDIO = 'audio',\n    SUBTITLE = 'subtitle'\n}\nexport interface SingleLevels {\n    // todo 确定level的结构\n    url: string\n    details: Level\n    bitrate: number\n    height: number\n    audioCodec: string\n    attrs: Attr\n    videoCodec: 'string' // 使用的编码规则\n}\n\nexport interface PlaylistLoaderContext extends LoaderContext {\n    loader?: Loader<PlaylistLoaderContext>\n\n    type: PlaylistContextType\n    // the level index to load\n    // level?: number | null\n    // TODO: what is id?\n    id: number | null\n    // defines if the loader is handling a sidx request for the playlist\n    isSidxRequest?: boolean\n    // internal reprsentation of a parsed m3u8 level playlist\n    levelDetails?: Level\n}\n","/**\n * 计算M3U8文件加载周期\n * @param { Object } currentPlaylist - 当前的M3U8文件内容\n * @param { Object } newPlaylist - 新加载的M3U8文件内容\n * @param { Number } lastRequestTime 新加载M3U8请求时间\n * @returns { Number } loadtime - 下一次加载延迟\n */\n\nimport getGlobalObject from './getGlobalObject';\nimport Level from '../Parser/Level';\n\nconst global = getGlobalObject();\n\nexport default function computeReloadInterval(\n    currentPlaylist: Level | null,\n    newPlaylist: Level,\n    lastRequestTime: number\n) {\n    let reloadInterval = 1000\n        * (newPlaylist.averagetargetduration\n            ? newPlaylist.averagetargetduration\n            : newPlaylist.targetduration);\n    const minReloadInterval = reloadInterval / 2;\n    if(currentPlaylist && newPlaylist.endSN === currentPlaylist.endSN) {\n        // follow HLS Spec, If the client reloads a Playlist file and finds that it has not\n        // changed then it MUST wait for a period of one-half the target\n        // duration before retrying.\n        reloadInterval = minReloadInterval;\n    }\n\n    if(lastRequestTime) {\n        reloadInterval = Math.max(\n            minReloadInterval,\n            reloadInterval - (global.performance.now() - lastRequestTime)\n        );\n    }\n    // in any case, don't reload more than half of target duration\n    return Math.round(reloadInterval);\n}\n","/**\n * playlist-loader\n */\nimport EventEmitter from 'eventemitter3';\nimport XHRLoader from './XHRLoader';\nimport M3U8Parser from '../Parser/M3u8Parser';\nimport LoaderEvent from './LoaderEvent';\nimport computeReloadInterval from '../Utils/computeReloadInterval';\nimport getGlobal from '../Utils/getGlobalObject';\nimport Level from '../Parser/Level';\nimport { AudioGroup } from '../Interfaces/Media-playlist';\nimport {\n    PlaylistLevelType,\n    SingleLevels,\n    XhrLoaderResponse,\n    FragLoaderContext,\n    LoaderConfiguration,\n    LoaderCallbacks,\n    XhrLoaderStats,\n    ErrorData\n} from '../Interfaces/Loader';\nimport MediaConfig from '../Interfaces/MediaConfig';\nimport Logger from '../Utils/Logger';\n\nconst GlobalEnvironment = getGlobal();\n\nenum PlaylistContextType {\n    'MANIFEST' = 'manifest',\n    'LEVEL' = 'level',\n    'AUDIO_TRACK' = 'audioTrack',\n    'SUBTITLE_TRACK' = 'subtitleTrack'\n}\n\nexport default class PlaylistLoader {\n    private _emitter: EventEmitter = new EventEmitter()\n\n    /**\n     * 是否中断请求\n     */\n    private _requestAbort: boolean = false\n\n    /**\n     * 拉直播M3U8的定时器\n     */\n    private timer: number = 0\n\n    /**\n     * m3u8地址\n     */\n    public url: string\n\n    /**\n     * 请求m3u8地址的配置\n     */\n    public dataSource: MediaConfig\n\n    /**\n     * m3u8解析返回数据\n     */\n    private currentPlaylist: Level | null = null\n\n    /**\n     * 最新的m3u8文档内容\n     */\n    private lastestM3U8Content: string = ''\n\n    private Tag: string = 'PlayListLoader';\n\n    constructor(dataSource: MediaConfig) {\n        this.dataSource = dataSource;\n        this.url = dataSource.url;\n    }\n\n    /**\n     * 绑定事件\n     * @param { String } event\n     * @param { Function } listener\n     */\n    on(event: string, listener: EventEmitter.ListenerFn): void {\n        this._emitter.addListener(event, listener);\n    }\n\n    /**\n     * 取消绑定事件\n     * @param { String } event\n     * @param { Function } listener\n     */\n    off(event: string, listener: EventEmitter.ListenerFn): void {\n        this._emitter.removeListener(event, listener);\n    }\n\n    /**\n     * 初始化XHR对象, 加载M3U8文件;\n     */\n    load() {\n        /**\n         * 加载m3u8文件配置参数\n         */\n        const loaderConfig: LoaderConfiguration = {\n            maxRetry: 2,\n            maxRetryDelay: 1000,\n            retryDelay: 1000,\n            timeout: 10000\n        };\n        const loaderCallbacks: LoaderCallbacks<FragLoaderContext> = {\n            onSuccess: this.loadSuccess.bind(this),\n            onError: this.loadError.bind(this),\n            onTimeout: this.loadTimeout.bind(this)\n        };\n\n        const context: FragLoaderContext = {\n            url: this.url,\n            type: PlaylistContextType.MANIFEST,\n            level: 0,\n            id: null,\n            responseType: 'text'\n        };\n\n        const xhrLoader = new XHRLoader();\n\n        xhrLoader.load(context, loaderConfig, loaderCallbacks);\n    }\n\n    /**\n     * 停止，直播暂时没实现暂停\n     */\n    stop() {}\n\n    /**\n     * 加载M3U8文件成功\n     */\n    loadSuccess(\n        response: XhrLoaderResponse,\n        stats: XhrLoaderStats,\n        context: FragLoaderContext,\n        networkDetails:any = null\n    ): void {\n        if(typeof response.data !== 'string') {\n            throw new Error('expected responseType of \"text\" for PlaylistLoader');\n        }\n        const string: string = response.data;\n\n        this.lastestM3U8Content = string;\n\n        stats.tload = performance.now();\n\n        if(string.indexOf('#EXTM3U') !== 0) {\n            this._handleManifestParsingError(\n                response,\n                context,\n                'no EXTM3U delimiter',\n                networkDetails\n            );\n            return;\n        }\n\n        if(string.indexOf('#EXTINF:') > 0 || string.indexOf('#EXT-X-TARGETDURATION:') > 0) {\n            this._handleTrackOrLevelPlaylist(response, stats, context, networkDetails);\n        } else {\n            this._handleMasterPlaylist(response, stats, context, networkDetails);\n        }\n    }\n\n    /**\n     * 取消loader, 清除定时器, 移除自身绑定的事件\n     */\n    abort() {\n        this._requestAbort = true;\n        clearInterval(this.timer);\n        this._emitter && this._emitter.removeAllListeners();\n        delete (this as any)._emitter;\n        delete (this as any).dataSource;\n        delete (this as any).currentPlaylist;\n        Logger.info(this.Tag, `${this.Tag} has been abort`);\n    }\n\n    /**\n     * 销毁功能\n     */\n    destroy() {\n        this.abort();\n        Logger.info(this.Tag, `${this.Tag} has been destroy`);\n    }\n\n    /**\n     * 处理下载的M3U8文件(普通M3U8 ts文件列表)\n     */\n    _handleTrackOrLevelPlaylist(\n        response: XhrLoaderResponse,\n        stats: XhrLoaderStats,\n        context: FragLoaderContext,\n        networkDetails: any\n    ): void {\n        const { id, level, type } = context;\n        const url: string = this._getResponseUrl(response, context);\n        const levelUrlId: number = Number.isFinite(id as number) ? (id as number) : 0;\n        const levelId: number = Number.isFinite(level as number) ? (level as number) : levelUrlId;\n        const levelType: PlaylistLevelType = this.mapContextToLevelType(context);\n        const levelDetails: Level = M3U8Parser.parseLevelPlaylist(\n            response.data as string,\n            url,\n            levelId,\n            levelType,\n            levelUrlId\n        );\n        (levelDetails as any).tload = stats.tload;\n\n        if(type === PlaylistContextType.MANIFEST) {\n            const singleLevel = {\n                url,\n                details: levelDetails\n            };\n\n            this._emitter.emit(LoaderEvent.MANIFEST_PARSED, {\n                type: 'levelPlaylist',\n                levels: [singleLevel],\n                audioTracks: [],\n                url,\n                stats,\n                networkDetails\n            });\n            if(levelDetails.live === true && this._requestAbort === false) {\n                const reloadInterval = computeReloadInterval(\n                    this.currentPlaylist,\n                    levelDetails,\n                    stats.trequest\n                );\n                this.timer = GlobalEnvironment.setTimeout(() => {\n                    this.load();\n                }, reloadInterval);\n            }\n\n            this.currentPlaylist = levelDetails;\n        }\n    }\n\n    /**\n     * 处理下载的M3U8文件(清晰度选择)\n     */\n    _handleMasterPlaylist(\n        response: XhrLoaderResponse,\n        stats: XhrLoaderStats,\n        context: FragLoaderContext,\n        networkDetails: any\n    ): void {\n        const string: string = response.data as string;\n\n        const url: string = this._getResponseUrl(response, context);\n        const levels: SingleLevels[] = M3U8Parser.parseMasterPlaylist(string, url);\n        if(!levels.length) {\n            this._handleManifestParsingError(\n                response,\n                context,\n                'no level found in manifest',\n                networkDetails\n            );\n            return;\n        }\n\n        // multi level playlist, parse level info\n\n        const audioGroups: Array<AudioGroup> = levels.map((level) => ({\n            id: level.attrs.AUDIO,\n            codec: level.audioCodec\n        }));\n\n        const audioTracks = M3U8Parser.parseMasterPlaylistMedia(string, url, 'AUDIO', audioGroups);\n        const subtitles = M3U8Parser.parseMasterPlaylistMedia(string, url, 'SUBTITLES');\n\n        if(audioTracks.length) {\n            // check if we have found an audio track embedded in main playlist (audio track without URI attribute)\n            let embeddedAudioFound = false;\n            audioTracks.forEach((audioTrack) => {\n                if(!audioTrack.url) {\n                    embeddedAudioFound = true;\n                }\n            });\n\n            // if no embedded audio track defined, but audio codec signaled in quality level,\n            // we need to signal this main audio track this could happen with playlists with\n            // alt audio rendition in which quality levels (main)\n            // contains both audio+video. but with mixed audio track not signaled\n            if(embeddedAudioFound === false && levels[0].audioCodec && !levels[0].attrs.AUDIO) {\n                Logger.log(this.Tag, 'audio codec signaled in quality level, but no embedded audio track signaled, create one');\n                audioTracks.unshift({\n                    type: 'main',\n                    name: 'main',\n                    default: false,\n                    autoselect: false,\n                    forced: false,\n                    id: 0\n                });\n            }\n        }\n        levels.sort((a, b) => a.bitrate - b.bitrate);\n        this._emitter.emit(LoaderEvent.MANIFEST_PARSED, {\n            type: 'masterPlaylist',\n            levels,\n            audioTracks,\n            subtitles,\n            url,\n            stats,\n            networkDetails,\n        });\n    }\n\n    /**\n     * 处理解析M3U8文件解析错误\n     * @param response\n     * @param context\n     * @param reason\n     * @param networkDetails\n     * @private\n     */\n    _handleManifestParsingError(\n        response: XhrLoaderResponse,\n        context: FragLoaderContext,\n        reason: string,\n        networkDetails: any\n    ) {\n        this._emitter.emit(LoaderEvent.PARSE_ERROR, {\n            url: response.url,\n            reason,\n            fatal: true,\n            networkDetails\n        });\n    }\n\n    // 获得请求响应的URL\n    _getResponseUrl(response: XhrLoaderResponse, context: FragLoaderContext) {\n        let { url } = response;\n        // responseURL not supported on some browsers (it is used to detect URL redirection)\n        // data-uri mode also not supported (but no need to detect redirection)\n        if(url === undefined || url.indexOf('data:') === 0) {\n            // fallback to initial URL\n            ({ url } = context);\n        }\n        return url;\n    }\n\n    mapContextToLevelType(context: FragLoaderContext): PlaylistLevelType {\n        const { type } = context;\n        switch(type) {\n        case PlaylistContextType.AUDIO_TRACK:\n            return PlaylistLevelType.AUDIO;\n        case PlaylistContextType.SUBTITLE_TRACK:\n            return PlaylistLevelType.SUBTITLE;\n        default:\n            return PlaylistLevelType.MAIN;\n        }\n    }\n\n    loadError(response: ErrorData, context: FragLoaderContext, xhr: XMLHttpRequest | null): void {\n        response.text = 'playlist not found';\n        this._emitter.emit(LoaderEvent.LOADING_ERROR, {\n            response,\n            context,\n            xhr\n        });\n    }\n\n    loadTimeout(\n        stats: XhrLoaderStats,\n        context: FragLoaderContext,\n        xhr: XMLHttpRequest | null\n    ): void {\n        stats.text = 'download playlist timeout';\n        this._emitter.emit(LoaderEvent.LOADIND_TIMEOUT, {\n            stats,\n            context,\n            xhr\n        });\n    }\n}\n","/**\n * 计算网速\n */\nimport getGlobal from './getGlobalObject';\n\nconst GW = getGlobal();\n\nclass NetworkSpeeder {\n    private _firstCheckpoint: number\n\n    private _lastCheckpoint: number\n\n    private _intervalBytes: number\n\n    private _totalBytes: number\n\n    private _lastSecondBytes: number\n\n    private _now: Function\n\n    constructor() {\n        // milliseconds\n        this._firstCheckpoint = 0;\n        this._lastCheckpoint = 0;\n        this._intervalBytes = 0;\n        this._totalBytes = 0;\n        this._lastSecondBytes = 0;\n\n        if(GW.performance && GW.performance.now) {\n            this._now = GW.performance.now.bind(GW.performance);\n        } else {\n            this._now = Date.now;\n        }\n    }\n\n    reset(): void {\n        this._firstCheckpoint = 0;\n        this._lastCheckpoint = 0;\n        this._totalBytes = 0;\n        this._intervalBytes = 0;\n        this._lastSecondBytes = 0;\n    }\n\n    /**\n     * 添加数据, 用于计算带宽\n     * @param bytes 从loader添加的数据长度\n     */\n    addBytes(bytes: number): void {\n        if(this._firstCheckpoint === 0) {\n            this._firstCheckpoint = this._now();\n            this._lastCheckpoint = this._firstCheckpoint;\n            this._intervalBytes += bytes;\n            this._totalBytes += bytes;\n        } else if(this._now() - this._lastCheckpoint < 1000) {\n            this._intervalBytes += bytes;\n            this._totalBytes += bytes;\n        } else {\n            // duration >= 1000\n            this._lastSecondBytes = this._intervalBytes;\n            this._intervalBytes = bytes;\n            this._totalBytes += bytes;\n            this._lastCheckpoint = this._now();\n        }\n    }\n\n    get currentKBps(): number {\n        this.addBytes(0);\n\n        let durationSeconds = (this._now() - this._lastCheckpoint) / 1000;\n        if(durationSeconds === 0) durationSeconds = 1;\n        return this._intervalBytes / durationSeconds / 1024;\n    }\n\n    get lastSecondKBps(): number {\n        this.addBytes(0);\n\n        if(this._lastSecondBytes !== 0) {\n            return this._lastSecondBytes / 1024;\n        }\n        // lastSecondBytes === 0\n        if(this._now() - this._lastCheckpoint >= 500) {\n            // if time interval since last checkpoint has exceeded 500ms\n            // the speed is nearly accurate\n            return this.currentKBps;\n        }\n        // We don't know\n        return 0;\n    }\n\n    get averageKBps(): number {\n        const durationSeconds = (this._now() - this._firstCheckpoint) / 1000;\n        return this._totalBytes / durationSeconds / 1024;\n    }\n}\n\nexport default NetworkSpeeder;\n","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Log from '../Utils/Logger';\nimport BaseLoader from './BaseLoader';\nimport { RuntimeException } from '../Utils/Exception';\n\nimport LoaderStatus from './LoaderStatus';\nimport LoaderErrors from './LoaderErrors';\n\nimport UserConfig from '../Interfaces/UserConfig';\nimport MediaConfig from '../Interfaces/MediaConfig';\nimport SeekRange from '../Interfaces/SeekRange';\nimport SeekHandler, { SeekConfig } from '../Interfaces/SeekHandler';\nimport ErrorData from '../Interfaces/ErrorData';\nimport HJPlayerConfig from '../Interfaces/HJPlayerConfig';\n\n// For FireFox browser which supports `xhr.responseType = 'moz-chunked-arraybuffer'`\nclass MozChunkedLoader extends BaseLoader {\n    public Tag: string = 'MozChunkedLoader'\n\n    private _seekHandler: SeekHandler\n\n    private _config: UserConfig\n\n    public _needStash: boolean = true\n\n    private _xhr: XMLHttpRequest | null = null\n\n    /**\n     * 请求流的url\n     */\n    private _requestURL: string = ''\n\n    /**\n     * 是否终止请求\n     */\n    private _requestAbort: boolean = false\n\n    /**\n     * 数据的长度\n     */\n    private _contentLength: number = 0\n\n    /**\n     * 接收到的数据长度\n     */\n    private _receivedLength: number = 0\n\n    /**\n     * 请求流的配置\n     */\n    private _dataSource: MediaConfig | null = null\n\n    /**\n     * 数据请求的范围\n     */\n    private _range: SeekRange = { from: 0, to: -1 }\n\n    static isSupported() {\n        try {\n            const xhr = new XMLHttpRequest();\n            // Firefox 37- requires .open() to be called before setting responseType\n            xhr.open('GET', 'https://example.com', true);\n            xhr.responseType = <XMLHttpRequestResponseType>'moz-chunked-arraybuffer';\n            return xhr.responseType === <XMLHttpRequestResponseType>'moz-chunked-arraybuffer';\n        } catch (e) {\n            Log.warn('MozChunkedLoader', e.message);\n            return false;\n        }\n    }\n\n    constructor(seekHandler: SeekHandler, config: HJPlayerConfig) {\n        super('xhr-moz-chunked-loader', 'moz-chunked');\n\n        this._seekHandler = seekHandler;\n        this._config = config;\n    }\n\n    destroy() {\n        if(this.isWorking()) {\n            this.abort();\n        }\n        if(this._xhr) {\n            this._xhr.onreadystatechange = null;\n            this._xhr.onprogress = null;\n            this._xhr.onloadend = null;\n            this._xhr.onerror = null;\n            this._xhr = null;\n        }\n        super.destroy();\n    }\n\n    startLoad(dataSource: MediaConfig, range: SeekRange) {\n        this._dataSource = dataSource;\n        this._range = range;\n\n        let sourceURL = dataSource.url;\n        if(this._config.reuseRedirectedURL && dataSource.redirectedURL !== undefined) {\n            sourceURL = dataSource.redirectedURL;\n        }\n\n        const seekConfig: SeekConfig = this._seekHandler.getConfig(sourceURL, range);\n        this._requestURL = seekConfig.url;\n        this._xhr = new XMLHttpRequest();\n        const xhr: XMLHttpRequest = this._xhr;\n        xhr.open('GET', seekConfig.url, true);\n        xhr.responseType = <XMLHttpRequestResponseType>'moz-chunked-arraybuffer';\n        xhr.onreadystatechange = this._onReadyStateChange.bind(this);\n        xhr.onprogress = this._onProgress.bind(this);\n        xhr.onloadend = this._onLoadEnd.bind(this);\n        xhr.onerror = this._onXhrError.bind(this);\n\n        // cors is auto detected and enabled by xhr\n\n        // withCredentials is disabled by default\n        if(dataSource.withCredentials) {\n            xhr.withCredentials = true;\n        }\n\n        if(typeof seekConfig.headers === 'object') {\n            const { headers } = seekConfig;\n            Object.keys(headers).forEach((key) => {\n                xhr.setRequestHeader(key, headers[key]);\n            });\n        }\n\n        // add additional headers\n        if(typeof this._config.headers === 'object') {\n            const { headers } = this._config;\n            Object.keys(headers).forEach((key) => {\n                xhr.setRequestHeader(key, headers[key]);\n            });\n        }\n\n        this._status = LoaderStatus.kConnecting;\n        xhr.send();\n    }\n\n    abort() {\n        this._requestAbort = true;\n        if(this._xhr) {\n            this._xhr.abort();\n        }\n        this._status = LoaderStatus.kComplete;\n    }\n\n    _onReadyStateChange(e: Event): void {\n        const xhr = <XMLHttpRequest>e.target;\n\n        if(xhr.readyState === 2) {\n            // HEADERS_RECEIVED\n            if(xhr.responseURL !== undefined && xhr.responseURL !== this._requestURL) {\n                if(this._onURLRedirect) {\n                    const redirectedURL = this._seekHandler.removeURLParameters(xhr.responseURL);\n                    this._onURLRedirect(redirectedURL);\n                }\n            }\n\n            if(xhr.status !== 0 && (xhr.status < 200 || xhr.status > 299)) {\n                this._status = LoaderStatus.kError;\n                if(this._onError) {\n                    this._onError(LoaderErrors.HTTP_STATUS_CODE_INVALID, {\n                        code: xhr.status,\n                        reason: xhr.statusText\n                    });\n                } else {\n                    throw new RuntimeException(\n                        `MozChunkedLoader: Http code invalid, ${xhr.status} ${xhr.statusText}`\n                    );\n                }\n            } else {\n                this._status = LoaderStatus.kBuffering;\n            }\n        }\n    }\n\n    _onProgress(e: ProgressEvent): void {\n        if(this._status === LoaderStatus.kError) {\n            // Ignore error response\n            return;\n        }\n\n        if(this._contentLength === null) {\n            if(e.total !== null && e.total !== 0) {\n                this._contentLength = e.total;\n                if(this._onContentLengthKnown) {\n                    this._onContentLengthKnown(this._contentLength);\n                }\n            }\n        }\n\n        const chunk = (<XMLHttpRequest>e.target).response;\n        const byteStart = this._range.from + this._receivedLength;\n        this._receivedLength += chunk.byteLength;\n\n        if(this._onDataArrival) {\n            this._onDataArrival(chunk, byteStart, this._receivedLength);\n        }\n    }\n\n    _onLoadEnd(e: Event) {\n        if(this._requestAbort === true) {\n            this._requestAbort = false;\n            return;\n        } if(this._status === LoaderStatus.kError) {\n            return;\n        }\n\n        this._status = LoaderStatus.kComplete;\n        if(this._onComplete) {\n            this._onComplete(this._range.from, this._range.from + this._receivedLength - 1);\n        }\n    }\n\n    _onXhrError(e: ProgressEvent) {\n        this._status = LoaderStatus.kError;\n        let type: number | string = 0;\n        let info: ErrorData | null = null;\n\n        if(this._contentLength && e.loaded < this._contentLength) {\n            type = LoaderErrors.EARLY_EOF;\n            info = { code: -1, reason: 'Moz-Chunked stream meet Early-Eof' };\n        } else {\n            type = LoaderErrors.EXCEPTION;\n            info = { code: -1, reason: `${e.constructor.name} ${e.type}` };\n        }\n\n        if(this._onError) {\n            this._onError(type, info);\n        } else {\n            throw new RuntimeException(info.reason);\n        }\n    }\n}\n\nexport default MozChunkedLoader;\n","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Utility class to calculate realtime network I/O speed\nimport getGlobal from '../Utils/getGlobalObject';\n\nconst GlobalEnvironment = getGlobal();\nclass SpeedChecker {\n    /**\n     * 首次检测时间\n     */\n    _firstCheckpoint: number\n\n    /**\n     * 最新检测时间\n     */\n    _lastCheckpoint: number\n\n    /**\n     * 单次下载量\n     */\n    _intervalBytes: number\n\n    /**\n     * 总字节数\n     */\n    _totalBytes: number\n\n    /**\n     * 最新下载速度\n     */\n    _lastSecondBytes: number\n\n    /**\n     * 获取现在时间 performace.now || Date.now\n     */\n    _now: () => number\n\n    constructor() {\n        // milliseconds\n        this._firstCheckpoint = 0;\n        this._lastCheckpoint = 0;\n        this._intervalBytes = 0;\n        this._totalBytes = 0;\n        this._lastSecondBytes = 0;\n\n        // compatibility detection\n        if(GlobalEnvironment.performance && GlobalEnvironment.performance.now) {\n            this._now = GlobalEnvironment.performance.now.bind(GlobalEnvironment.performance);\n        } else {\n            this._now = Date.now;\n        }\n    }\n\n    reset(): void {\n        this._lastCheckpoint = 0;\n        this._firstCheckpoint = 0;\n        this._intervalBytes = 0;\n        this._totalBytes = 0;\n        this._lastSecondBytes = 0;\n    }\n\n    /**\n     * 添加下载数据\n     * @param bytes 下载数据大小\n     */\n    addBytes(bytes: number): void {\n        if(this._firstCheckpoint === 0) {\n            this._firstCheckpoint = this._now();\n            this._lastCheckpoint = this._firstCheckpoint;\n            this._intervalBytes += bytes;\n            this._totalBytes += bytes;\n        } else if(this._now() - this._lastCheckpoint < 1000) {\n            this._intervalBytes += bytes;\n            this._totalBytes += bytes;\n        } else {\n            // duration >= 1000\n            this._lastSecondBytes = this._intervalBytes;\n            this._intervalBytes = bytes;\n            this._totalBytes += bytes;\n            this._lastCheckpoint = this._now();\n        }\n    }\n\n    /**\n     * 当前下载速度\n     */\n    get currentKBps(): number {\n        this.addBytes(0);\n\n        let durationSeconds = (this._now() - this._lastCheckpoint) / 1000;\n        if(durationSeconds === 0) durationSeconds = 1;\n        return this._intervalBytes / durationSeconds / 1024;\n    }\n\n    get lastSecondKBps(): number {\n        this.addBytes(0);\n\n        if(this._lastSecondBytes !== 0) {\n            return this._lastSecondBytes / 1024;\n        }\n        // lastSecondBytes === 0\n        if(this._now() - this._lastCheckpoint >= 500) {\n            // if time interval since last checkpoint has exceeded 500ms\n            // the speed is nearly accurate\n            return this.currentKBps;\n        }\n        // We don't know\n        return 0;\n    }\n\n    /**\n     * 平均下载速度\n     */\n    get averageKBps(): number {\n        const durationSeconds = (this._now() - this._firstCheckpoint) / 1000;\n        return this._totalBytes / durationSeconds / 1024;\n    }\n}\n\nexport default SpeedChecker;\n","import EventEmitter from 'eventemitter3';\nimport Log from '../Utils/Logger';\nimport SpeedSampler from './SpeedChecker';\nimport BaseLoader from './BaseLoader';\nimport { RuntimeException } from '../Utils/Exception';\nimport UserConfig from '../Interfaces/UserConfig';\nimport RangeSeekHandler from './RangeSeekHandler';\nimport SeekRange from '../Interfaces/SeekRange';\n// import Headers from '../Interfaces/Headers';\nimport LoaderStatus from './LoaderStatus';\nimport MediaConfig from '../Interfaces/MediaConfig';\nimport LoaderErrors from './LoaderErrors';\n\nclass RangeLoader extends BaseLoader {\n    Tag: string\n\n    /**\n     * use range request to seek\n     */\n    private seekHandler: RangeSeekHandler\n\n    /**\n     * 初始化配置\n     */\n    private userConfig: UserConfig\n\n    _needStash: boolean\n\n    /**\n     * 块数据的大小\n     */\n    private _currentChunkSizeKB: number\n\n    /**\n     * 当前标准速度\n     */\n    private _currentSpeedNormalized: number\n\n    /**\n     * 下载速度为0的次数\n     */\n    private _zeroSpeedChunkCount: number\n\n    /**\n     * xhr\n     */\n    _xhr: XMLHttpRequest | null\n\n    private _speedSampler: SpeedSampler\n\n    /**\n     * 是否阻止请求\n     */\n    private _requestAbort: boolean\n\n    private _waitForTotalLength: boolean\n\n    /**\n     * 是否收到整个数据\n     */\n    private _totalLengthReceived: boolean\n\n    /**\n     * 当前请求url\n     */\n    private _currentRequestURL: string | null\n\n    private _currentRedirectedURL: string | null\n\n    /**\n     * 当前range\n     */\n    _currentRequestRange: SeekRange | null\n\n    /**\n     * 数据的长度\n     */\n    private _contentLength: number | null\n\n    /**\n     * 接受数据长度\n     */\n    private _receivedLength: number\n\n    /**\n     * 最新下载进度, 字节\n     */\n    private _lastTimeLoaded: number\n\n    /**\n     * chunk list\n     */\n    private _chunkSizeKBList: number[]\n\n    /**\n     * 文件总长度\n     */\n    private _totalLength: number | null\n\n    private _range: SeekRange | null\n\n    private mediaConfig: MediaConfig | null\n\n    eventEmitter: EventEmitter = new EventEmitter()\n\n    /**\n     * 是否支持xhr\n     */\n    static isSupported() {\n        try {\n            const xhr = new XMLHttpRequest();\n            xhr.open('GET', 'https://example.com', true);\n            xhr.responseType = 'arraybuffer';\n            return xhr.responseType === 'arraybuffer';\n        } catch (e) {\n            Log.warn('RangeLoader', e.message);\n            return false;\n        }\n    }\n\n    constructor(seekHandler: RangeSeekHandler, userConfig: UserConfig) {\n        super('xhr-range-laoder', 'flv');\n        this.Tag = 'RangerLoader';\n\n        this.seekHandler = seekHandler;\n        this.userConfig = userConfig;\n        this._needStash = false;\n        this._chunkSizeKBList = [\n            128,\n            256,\n            384,\n            512,\n            768,\n            1024,\n            1536,\n            2048,\n            3072,\n            4096,\n            5120,\n            6144,\n            7168,\n            8192\n        ];\n        this._currentChunkSizeKB = 384;\n        this._currentSpeedNormalized = 0;\n        this._zeroSpeedChunkCount = 0;\n\n        this._xhr = null;\n        this._speedSampler = new SpeedSampler();\n\n        this._requestAbort = false;\n        this._waitForTotalLength = false;\n        this._totalLengthReceived = false;\n\n        this._currentRequestURL = null;\n        this._currentRedirectedURL = null;\n        this._currentRequestRange = null;\n        this._totalLength = null;\n        this._contentLength = null;\n        this._receivedLength = 0;\n        this._lastTimeLoaded = 0;\n        this._range = null;\n        this.mediaConfig = null;\n    }\n\n    destory(): void {\n        if(this.isWorking()) {\n            this.abort();\n        }\n        if(this._xhr) {\n            this._xhr.onreadystatechange = null;\n            this._xhr.onprogress = null;\n            this._xhr.onload = null;\n            this._xhr.onerror = null;\n            this._xhr = null;\n        }\n        super.destroy();\n    }\n\n    get currentSpeed(): number {\n        return this._speedSampler.lastSecondKBps;\n    }\n\n    startLoad(mediaConfig: MediaConfig, seekRange: SeekRange): void {\n        this.mediaConfig = mediaConfig;\n        this._range = seekRange;\n        this._status = LoaderStatus.kConnecting;\n\n        let useRefTotalLength = false;\n        if(this.mediaConfig.fileSize !== undefined && this.mediaConfig.fileSize !== 0) {\n            useRefTotalLength = true;\n            this._totalLength = this.mediaConfig.fileSize;\n        }\n\n        if(!this._totalLengthReceived && !useRefTotalLength) {\n            this._waitForTotalLength = true;\n            this._internalOpen(this.mediaConfig, { from: 0, to: -1 });\n        } else {\n            this._openSubRange();\n        }\n    }\n\n    /**\n     * 请求子range\n     */\n    _openSubRange(): void {\n        if(!this._range) {\n            return;\n        }\n        const chunkSize = this._currentChunkSizeKB * 1024;\n        const from = this._range.from + this._receivedLength;\n        let to = from + chunkSize;\n\n        if(this._contentLength != null) {\n            if(to - this._range.from >= this._contentLength) {\n                to = this._range.from + this._contentLength - 1;\n            }\n        }\n\n        this._currentRequestRange = { from, to };\n        this._internalOpen(this.mediaConfig, this._currentRequestRange);\n    }\n\n    /**\n     * 请求数据\n     */\n    _internalOpen(mediaConfig: MediaConfig | null, seekRange: SeekRange): void {\n        if(!mediaConfig || !this.mediaConfig) {\n            return;\n        }\n        this._lastTimeLoaded = 0;\n        let sourceURL = mediaConfig.url;\n\n        if(this.userConfig.reuseRedirectedURL) {\n            if(this._currentRedirectedURL) {\n                sourceURL = this._currentRedirectedURL;\n            } else if(mediaConfig.redirectedURL !== undefined) {\n                sourceURL = mediaConfig.redirectedURL;\n            }\n        }\n\n        const seekConfig = this.seekHandler.getConfig(sourceURL, seekRange);\n        this._currentRequestURL = seekConfig.url;\n        this._xhr = new XMLHttpRequest();\n        const xhr = this._xhr;\n        xhr.open('GET', seekConfig.url, true);\n        xhr.responseType = 'arraybuffer';\n        xhr.onreadystatechange = this._onReadyStateChange.bind(this);\n        xhr.onprogress = this._onProgress.bind(this);\n        xhr.onload = this._onLoad.bind(this);\n        xhr.onerror = this._onXhrError.bind(this);\n\n        if(mediaConfig.withCredentials) {\n            xhr.withCredentials = true;\n        }\n\n        if(typeof seekConfig.headers === 'object') {\n            const { headers } = seekConfig;\n            Object.keys(headers).forEach((key) => {\n                xhr.setRequestHeader(key, headers[key]);\n            });\n        }\n        // add additional headers\n        if(typeof this.userConfig.headers === 'object') {\n            const { headers } = this.userConfig;\n            Object.keys(headers).forEach((key) => {\n                xhr.setRequestHeader(key, headers[key]);\n            });\n        }\n        xhr.send();\n    }\n\n    abort(): void {\n        this._requestAbort = true;\n        this._internalAbort();\n        this._status = LoaderStatus.kComplete;\n    }\n\n    _onReadyStateChange(e: Event): void {\n        const xhr = <XMLHttpRequest>e.target;\n\n        if(xhr.readyState === 2) {\n            if(xhr.responseURL !== undefined) {\n                const redirectedURL: string = this.seekHandler.removeURLParameters(xhr.responseURL);\n                if(\n                    xhr.responseURL !== this._currentRequestURL\n                    && redirectedURL !== this._currentRedirectedURL\n                ) {\n                    this._currentRedirectedURL = redirectedURL;\n                    if(this._onURLRedirect) {\n                        this._onURLRedirect(redirectedURL);\n                    }\n                }\n            }\n\n            if(xhr.status >= 200 && xhr.status <= 299) {\n                if(this._waitForTotalLength) {\n                    return;\n                }\n                this._status = LoaderStatus.kBuffering;\n            } else {\n                this._status = LoaderStatus.kError;\n                if(this._onError) {\n                    this._onError(LoaderErrors.HTTP_STATUS_CODE_INVALID, {\n                        code: xhr.status,\n                        reason: xhr.statusText\n                    });\n                } else {\n                    throw new RuntimeException(\n                        `RangeLoader: http code invalid, ${xhr.status} ${xhr.statusText}`\n                    );\n                }\n            }\n        }\n    }\n\n    _onProgress(e: ProgressEvent): void {\n        if(this._status === LoaderStatus.kError) {\n            return;\n        }\n        // 判断 _range null。\n        if(!this._range) {\n            return;\n        }\n\n        if(this._contentLength === null) {\n            let openNextRange: boolean = false;\n\n            if(this._waitForTotalLength) {\n                this._waitForTotalLength = false;\n                this._totalLengthReceived = true;\n                openNextRange = true;\n\n                const { total } = e;\n                this._internalAbort();\n                if(total != null && total !== 0) {\n                    this._totalLength = total;\n                }\n            }\n\n            if(this._range.to === -1) {\n                this._contentLength = <number> this._totalLength - this._range.from;\n            } else {\n                this._contentLength = this._range.to - this._range.from + 1;\n            }\n\n            if(openNextRange) {\n                this._openSubRange();\n                return;\n            }\n\n            if(this._onContentLengthKnown) {\n                this._onContentLengthKnown(this._contentLength);\n            }\n        }\n\n        const delta: number = e.loaded - this._lastTimeLoaded;\n        this._lastTimeLoaded = e.loaded;\n        this._speedSampler.addBytes(delta);\n    }\n\n    _onLoad(e: Event): void {\n        if(!this._range || !e.target) {\n            return;\n        }\n        if(this._status === LoaderStatus.kError) {\n            return;\n        }\n\n        if(this._waitForTotalLength) {\n            this._waitForTotalLength = false;\n            return;\n        }\n\n        this._lastTimeLoaded = 0;\n        let KBps: number = this._speedSampler.lastSecondKBps;\n\n        if(KBps === 0) {\n            this._zeroSpeedChunkCount++;\n            if(this._zeroSpeedChunkCount >= 3) {\n                KBps = this._speedSampler.currentKBps;\n            }\n        }\n\n        if(KBps !== 0) {\n            const normalized: number = this._normalizeSpeed(KBps);\n            if(this._currentSpeedNormalized !== normalized) {\n                this._currentSpeedNormalized = normalized;\n                this._currentChunkSizeKB = normalized;\n            }\n        }\n\n        const chunk = (e.target as XMLHttpRequest).response;\n        const byteStart: number = this._range.from + this._receivedLength;\n        this._receivedLength += chunk.byteLength;\n\n        let reportComplete = false;\n        if(this._contentLength !== null && this._receivedLength < this._contentLength) {\n            this._openSubRange();\n        } else {\n            reportComplete = true;\n        }\n\n        if(this._onDataArrival) {\n            this._onDataArrival(chunk, byteStart, this._receivedLength);\n        }\n        if(reportComplete) {\n            this._status = LoaderStatus.kComplete;\n            if(this._onComplete) {\n                this._onComplete(this._range.from, this._range.from + this._receivedLength - 1);\n            }\n        }\n    }\n\n    _onXhrError(e: ProgressEvent): void {\n        this._status = LoaderStatus.kError;\n        let type: number | string = 0;\n        let info: null | { code: number; reason: string };\n\n        if(\n            this._contentLength\n            && this._receivedLength > 0\n            && this._receivedLength < this._contentLength\n        ) {\n            type = LoaderErrors.EARLY_EOF;\n            info = {\n                code: -1,\n                reason: 'RangeLoder meet Early-Eof'\n            };\n        } else {\n            type = LoaderErrors.EXCEPTION;\n            info = { code: -1, reason: `${e.constructor.name} ${e.type}` };\n        }\n\n        if(this._onError) {\n            this._onError(type, info);\n        } else {\n            throw new RuntimeException(info.reason);\n        }\n    }\n\n    _normalizeSpeed(input: number): number {\n        const list = this._chunkSizeKBList;\n        const last: number = list.length - 1;\n        let mid: number = 0;\n        let lbound: number = 0;\n        let ubound = last;\n\n        if(input < list[0]) {\n            return list[0];\n        }\n\n        while(lbound <= ubound) {\n            mid = lbound + Math.floor((ubound - lbound) / 2);\n            if(mid === last || (input >= list[mid] && input < list[mid + 1])) {\n                return list[mid];\n            } if(list[mid] < input) {\n                lbound = mid + 1;\n            } else {\n                ubound = mid - 1;\n            }\n        }\n        return list[0];\n    }\n\n    _internalAbort(): void {\n        if(this._xhr) {\n            this._xhr.onreadystatechange = null;\n            this._xhr.onprogress = null;\n            this._xhr.onload = null;\n            this._xhr.onerror = null;\n            this._xhr.abort();\n            this._xhr = null;\n        }\n    }\n\n    on(eventName: string, callback: EventEmitter.ListenerFn): void {\n        this.eventEmitter.on(eventName, callback);\n    }\n\n    once(eventName: string, callback: EventEmitter.ListenerFn): void {\n        this.eventEmitter.once(eventName, callback);\n    }\n\n    off(eventName: string, callback?: EventEmitter.ListenerFn): void {\n        this.eventEmitter.off(eventName, callback);\n    }\n}\nexport default RangeLoader;\n","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Log from '../Utils/Logger';\nimport BaseLoader from './BaseLoader';\nimport LoaderStatus from './LoaderStatus';\nimport LoaderErrors from './LoaderErrors';\nimport { RuntimeException } from '../Utils/Exception';\nimport MediaConfig from '../Interfaces/MediaConfig';\nimport getGlobal from '../Utils/getGlobalObject';\n\nconst GlobalEnvironment = getGlobal();\n\n// For FLV over WebSocket live stream\nclass WebSocketLoader extends BaseLoader {\n    _ws: WebSocket | null;\n\n    _requestAbort: boolean;\n\n    _receivedLength: number;\n\n    static isSupported() {\n        try {\n            return (typeof (GlobalEnvironment as any).WebSocket !== 'undefined');\n        } catch (e) {\n            return false;\n        }\n    }\n\n    constructor() {\n        super('websocket-loader', 'flv');\n        this._needStash = true;\n        this._ws = null;\n        this._requestAbort = false;\n        this._receivedLength = 0;\n    }\n\n    destroy() {\n        if(this._ws) {\n            this.abort();\n        }\n        super.destroy();\n    }\n\n    startLoad(dataSource: MediaConfig) {\n        try {\n            this._ws = new (GlobalEnvironment as any).WebSocket(dataSource.url);\n            const ws = this._ws;\n            if(!ws) return;\n            ws.binaryType = 'arraybuffer';\n            ws.onopen = this._onWebSocketOpen.bind(this);\n            ws.onclose = this._onWebSocketClose.bind(this);\n            ws.onmessage = this._onWebSocketMessage.bind(this);\n            ws.onerror = this._onWebSocketError.bind(this);\n            this._status = LoaderStatus.kConnecting;\n        } catch (e) {\n            this._status = LoaderStatus.kError;\n\n            const info = { code: e.code, reason: e.message };\n\n            if(this._onError) {\n                this._onError(LoaderErrors.EXCEPTION, info);\n            } else {\n                throw new RuntimeException(info.reason);\n            }\n        }\n    }\n\n    abort() {\n        const ws = this._ws;\n        if(ws && (ws.readyState === 0 || ws.readyState === 1)) { // CONNECTING || OPEN\n            this._requestAbort = true;\n            ws.close();\n        }\n\n        this._ws = null;\n        this._status = LoaderStatus.kComplete;\n    }\n\n    _onWebSocketOpen() {\n        this._status = LoaderStatus.kBuffering;\n    }\n\n    _onWebSocketClose() {\n        if(this._requestAbort === true) {\n            this._requestAbort = false;\n            return;\n        }\n\n        this._status = LoaderStatus.kComplete;\n\n        if(this._onComplete) {\n            this._onComplete(0, this._receivedLength - 1);\n        }\n    }\n\n    _onWebSocketMessage(e: MessageEvent) {\n        if(e.data instanceof ArrayBuffer) {\n            this._dispatchArrayBuffer(e.data);\n        } else if(e.data instanceof Blob) {\n            const reader = new FileReader();\n            reader.onload = () => {\n                this._dispatchArrayBuffer(<ArrayBuffer>reader.result);\n            };\n            reader.readAsArrayBuffer(e.data);\n        } else {\n            this._status = LoaderStatus.kError;\n            const info = { code: -1, reason: `Unsupported WebSocket message type: ${e.data.constructor.name}` };\n\n            if(this._onError) {\n                this._onError(LoaderErrors.EXCEPTION, info);\n            } else {\n                throw new RuntimeException(info.reason);\n            }\n        }\n    }\n\n    _dispatchArrayBuffer(arraybuffer: ArrayBuffer) {\n        const chunk = arraybuffer;\n        const byteStart = this._receivedLength;\n        this._receivedLength += chunk.byteLength;\n\n        if(this._onDataArrival) {\n            this._onDataArrival(chunk, byteStart, this._receivedLength);\n        }\n    }\n\n    _onWebSocketError() {\n        this._status = LoaderStatus.kError;\n\n        const info = {\n            code: -1,\n            reason: 'websoket error'\n        };\n\n        if(this._onError) {\n            this._onError(LoaderErrors.EXCEPTION, info);\n        } else {\n            throw new RuntimeException(info.reason);\n        }\n    }\n}\n\nexport default WebSocketLoader;\n","import SeekRange from '../Interfaces/SeekRange';\n\nclass RangeSeekHandler {\n    private _zeroStart: number | boolean\n\n    constructor(zeroStart: number | boolean) {\n        this._zeroStart = zeroStart || false;\n    }\n\n    getConfig(url: string, range: SeekRange) {\n        const headers = Object.create(null);\n\n        if(range.from !== 0 || range.to !== -1) {\n            let param;\n            if(range.to !== -1) {\n                param = `bytes=${range.from.toString()}-${range.to.toString()}`;\n            } else {\n                param = `bytes=${range.from.toString()}-`;\n            }\n            headers.Range = param;\n        } else if(this._zeroStart) {\n            headers.Range = 'bytes=0-';\n        }\n\n        return {\n            url,\n            headers\n        };\n    }\n\n    removeURLParameters(seekedURL: string) {\n        return seekedURL;\n    }\n}\n\nexport default RangeSeekHandler;\n","import Logger from '../Utils/Logger';\nimport SpeedChecker from '../Utils/networkSpeedChecker';\nimport LoaderStatus from '../Loaders/LoaderStatus';\nimport Errors from '../Errors/index';\nimport Events from '../Events/index';\nimport FetchStreamLoader from '../Loaders/FetchStreamLoader';\nimport MozChunkedLoader from '../Loaders/XHRMozChunkedLoader';\nimport MSStreamLoader from '../Loaders/XHRMsStreamLoader';\nimport RangeLoader from '../Loaders/XhrRangeLoader';\nimport WebSocketLoader from '../Loaders/WebSocketLoader';\nimport FragmentLoader from '../Loaders/FragmentLoader';\nimport RangeSeekHandler from '../Utils/range-seek-handler';\nimport ParamSeekHandler from '../Utils/param-seek-handler';\nimport {\n    RuntimeException,\n    IllegalStateException,\n    InvalidArgumentException\n} from '../Utils/Exception';\nimport MediaConfig from '../Interfaces/MediaConfig';\nimport SeekRange from '../Interfaces/SeekRange';\nimport ErrorData from '../Interfaces/ErrorData';\nimport HJPlayerConfig from '../Interfaces/HJPlayerConfig';\nimport TSManifest from '../Interfaces/TSManifest';\nimport { TSExtraData } from '../Interfaces/TSExtraData';\n\nclass IOController {\n    /**\n     * 文件标签\n     */\n    Tag: string\n\n    /**\n     * 媒体文件设置\n     */\n    private _mediaConfig: MediaConfig\n\n    /**\n     * 用户设置\n     */\n    private _config: HJPlayerConfig\n\n    /**\n     * 存储的buffer初始大小\n     */\n    private _stashInitialSize: number\n\n    /**\n     * 缓冲池已用大小\n     */\n    private _stashUsed: number\n\n    /**\n     * 存储的buffer尺寸\n     */\n    private _stashSize: number\n\n    /**\n     * 是否允许 LoaderIO 建立缓冲池\n     */\n    private _enableStash: boolean\n\n    /**\n     * 缓冲池的尺寸\n     */\n    private _bufferSize: number\n\n    /**\n     * LoaderIO的缓冲池\n     */\n    private _stashBuffer: ArrayBuffer\n\n    /**\n     * 缓冲池缓冲的Buffer数据流在媒体文件中的位置\n     */\n    private _stashByteStart: number\n\n    /**\n     * 加载器实例\n     */\n    private _loader:\n        | FetchStreamLoader\n        | MozChunkedLoader\n        | MSStreamLoader\n        | RangeLoader\n        | WebSocketLoader\n        | FragmentLoader\n        | null\n\n    // 加载媒体文件的加载器实例\n    /**\n     * 加载媒体文件的加载器定义类\n     */\n    private _loaderClass:\n        | FetchStreamLoader\n        | MozChunkedLoader\n        | MSStreamLoader\n        | RangeLoader\n        | WebSocketLoader\n        | FragmentLoader\n        | any\n\n    /**\n     * 视频 seek 处理函数, 可根据后台服务自己去定义\n     */\n    private _seekHandler: ParamSeekHandler | RangeSeekHandler | any\n\n    /**\n     * 媒体设置里的URL是否为 WebSocket 地址\n     */\n    private _isWebSocketURL: boolean\n\n    /**\n     * 加载文件体积\n     */\n    private _refTotalLength: number | null\n\n    /**\n     * 总体文件大小\n     */\n    private _totalLength: number | null\n    /**\n     *  全部请求的标志\n     */\n\n    private _fullRequestFlag: boolean\n\n    /**\n     * 请求的范围 from xxx, to xxx\n     */\n    private _currentRange: SeekRange | null\n\n    /**\n     * HTTP 301/302跳转后的地址\n     */\n    private _redirectedURL: string | null\n\n    /**\n     * 计算后的网速标准值\n     */\n    private _speedNormalized: number | null\n\n    /**\n     * 网速标准表, 用于把 networkSpeedChecker 估算后得到的网速经计算后得到标准值 _speedNormalized\n     */\n    private _speedNormalizeList: Array<number>\n\n    /**\n     * 是否过早的遇到 EOF\n     */\n    private _isEarlyEofReconnecting: boolean\n\n    /**\n     * 是否暂停\n     */\n    private _paused: boolean\n\n    /**\n     * 恢复下载时的续传点\n     */\n    private _resumeFrom: number\n\n    // 恢复下载时的续传点\n    /**\n     * 数据透传到IOController的处理函数\n     */\n    private _onDataArrival: Function | null\n\n    /**\n     *  当 seek 结束时上报的函数\n     */\n    private _onSeeked: Function | null\n\n    /**\n     * 发生错误的处理函数\n     */\n    private _onError: Function | null\n\n    /**\n     * 加载完成时透传的函数\n     */\n    private _onComplete: Function | null\n\n    /**\n     * 遇到 HTTP 301/302 网址跳转时处理的函数\n     */\n    private _onRedirect: Function | null\n\n    /**\n     * 当从 EarlyEof 恢复时透传的函数\n     */\n    private _onRecoveredEarlyEof: Function | null\n\n    /**\n     * 当M3U8文档被解析之后向上提交\n     */\n    private _onManifestParsed: Function | null\n\n    /**\n     * 额外的数据, 在flv.js中用于传输segment的索引值\n     */\n    private _extraData: number | null;\n\n    /**\n     * hls 解析的Levels\n     */\n    private _tsExtraData: TSExtraData | undefined\n\n    /**\n     * 网速检查器\n     */\n    private _speedChecker: SpeedChecker\n\n    constructor(dataSource: MediaConfig, config: HJPlayerConfig, extraData: number) {\n        this.Tag = 'IOController';\n\n        this._config = config;\n        this._extraData = extraData;\n\n        this._stashInitialSize = 1024 * 384; // default initial size: 384KB\n        if(config.stashInitialSize !== undefined && config.stashInitialSize > 0) {\n            // apply from config\n            this._stashInitialSize = config.stashInitialSize * 1024;\n        }\n\n        this._stashUsed = 0;\n        this._stashSize = this._stashInitialSize;\n        this._bufferSize = 1024 * 1024 * 3; // initial size: 3MB\n        this._stashBuffer = new ArrayBuffer(this._bufferSize);\n        this._stashByteStart = 0;\n        this._enableStash = true;\n        if(config.enableStashBuffer === false) {\n            this._enableStash = false;\n        }\n\n        this._loader = null;\n        this._loaderClass = null;\n        this._seekHandler = null;\n        this._mediaConfig = dataSource;\n        this._isWebSocketURL = /wss?:\\/\\/(.+?)/.test(dataSource.url);\n        this._refTotalLength = dataSource.fileSize ? dataSource.fileSize : null;\n        this._totalLength = this._refTotalLength;\n        this._tsExtraData = undefined;\n        this._fullRequestFlag = false;\n        this._currentRange = null;\n        this._redirectedURL = null;\n        this._speedNormalized = 0;\n        this._speedChecker = new SpeedChecker();\n        this._speedNormalizeList = [64, 128, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096];\n        this._isEarlyEofReconnecting = false;\n        this._paused = false;\n        this._resumeFrom = 0;\n        this._onDataArrival = null;\n        this._onSeeked = null;\n        this._onError = null;\n        this._onComplete = null;\n        this._onRedirect = null;\n        this._onRecoveredEarlyEof = null;\n        this._onManifestParsed = null;\n        this._selectSeekHandler();\n        this._selectLoader();\n        this._createLoader();\n    }\n\n    destroy() {\n        if(this._loader!.isWorking()) {\n            this._loader!.abort();\n        }\n        this._loader!.destroy();\n        this._loader = null;\n        this._loaderClass = null;\n        delete (this as any)._mediaConfig;\n        delete (this as any)._stashBuffer;\n        this._stashByteStart = 0;\n        this._bufferSize = 0;\n        this._stashSize = 0;\n        this._stashUsed = 0;\n        this._currentRange = null;\n        delete (this as any)._speedChecker;\n        this._isEarlyEofReconnecting = false;\n        this._onDataArrival = null;\n        this._onSeeked = null;\n        this._onError = null;\n        this._onComplete = null;\n        this._onRedirect = null;\n        this._onRecoveredEarlyEof = null;\n        this._onManifestParsed = null;\n        this._extraData = null;\n    }\n\n    isWorking() {\n        return this._loader && this._loader.isWorking() && !this._paused;\n    }\n\n    isPaused() {\n        return this._paused;\n    }\n\n    get status() {\n        return this._loader!.status;\n    }\n\n    get extraData() {\n        return this._extraData;\n    }\n\n    set extraData(data) {\n        this._extraData = data;\n    }\n\n    // prototype: function onDataArrival(chunks: ArrayBuffer, byteStart: number): number\n    get onDataArrival() {\n        return this._onDataArrival;\n    }\n\n    set onDataArrival(callback) {\n        this._onDataArrival = callback;\n    }\n\n    get onSeeked() {\n        return this._onSeeked;\n    }\n\n    set onSeeked(callback) {\n        this._onSeeked = callback;\n    }\n\n    // prototype: function onError(type: number, info: {code: number, msg: string}): void\n    get onError() {\n        return this._onError;\n    }\n\n    set onError(callback) {\n        this._onError = callback;\n    }\n\n    get onComplete() {\n        return this._onComplete;\n    }\n\n    set onComplete(callback) {\n        this._onComplete = callback;\n    }\n\n    get onRedirect() {\n        return this._onRedirect;\n    }\n\n    set onRedirect(callback) {\n        this._onRedirect = callback;\n    }\n\n    get onRecoveredEarlyEof() {\n        return this._onRecoveredEarlyEof;\n    }\n\n    set onRecoveredEarlyEof(callback) {\n        this._onRecoveredEarlyEof = callback;\n    }\n\n    get onManifestParsed() {\n        return this._onManifestParsed;\n    }\n\n    set onManifestParsed(callback) {\n        this._onManifestParsed = callback;\n    }\n\n    get currentURL() {\n        return this._mediaConfig.url;\n    }\n\n    get hasRedirect() {\n        return this._redirectedURL != null || this._mediaConfig.redirectedURL !== undefined;\n    }\n\n    get currentRedirectedURL() {\n        return this._redirectedURL || this._mediaConfig.redirectedURL;\n    }\n\n    // in KB/s\n    get currentSpeed() {\n        if(this._loader instanceof RangeLoader) {\n            // SpeedSampler is inaccuracy if loader is RangeLoader\n            return this._loader.currentSpeed;\n        }\n        return this._speedChecker.lastSecondKBps;\n    }\n\n    get loaderType() {\n        return this._loader!.type;\n    }\n\n    _selectSeekHandler() {\n        const config = this._config;\n\n        if(config.seekType === 'range') {\n            this._seekHandler = new RangeSeekHandler(this._config.rangeLoadZeroStart);\n        } else if(config.seekType === 'param') {\n            const paramStart = config.seekParamStart || 'bstart';\n            const paramEnd = config.seekParamEnd || 'bend';\n\n            this._seekHandler = new ParamSeekHandler(paramStart, paramEnd);\n        } else if(config.seekType === 'custom') {\n            if(typeof config.CustomSeekHandler !== 'function') {\n                throw new InvalidArgumentException(\n                    'Custom seekType specified in config but invalid CustomSeekHandler!'\n                );\n            }\n            this._seekHandler = new config.CustomSeekHandler();\n        } else {\n            throw new InvalidArgumentException(`Invalid seekType in config: ${config.seekType}`);\n        }\n    }\n\n    _selectLoader() {\n        if(this._mediaConfig.type === 'flv') {\n            if(this._config.customLoader != null) {\n                this._loaderClass = this._config.customLoader;\n            } else if(this._isWebSocketURL) {\n                this._loaderClass = WebSocketLoader;\n            } else if(FetchStreamLoader.isSupported()) {\n                this._loaderClass = FetchStreamLoader;\n            } else if(MozChunkedLoader.isSupported()) {\n                this._loaderClass = MozChunkedLoader;\n            } else if(RangeLoader.isSupported()) {\n                this._loaderClass = RangeLoader;\n            } else {\n                throw new RuntimeException(\n                    \"Your browser doesn't support xhr with arraybuffer responseType!\"\n                );\n            }\n        } else if(this._mediaConfig.type === 'm3u8') {\n            this._loaderClass = FragmentLoader;\n        }\n    }\n\n    _createLoader() {\n        this._loader = new this._loaderClass(this._seekHandler, this._config);\n        this._bindLoaderEvents();\n    }\n\n    _bindLoaderEvents() {\n        if(!this._loader) return;\n        if(this._loader.needStashBuffer === false) {\n            this._enableStash = false;\n        }\n        this._loader.onContentLengthKnown = this._onContentLengthKnown.bind(this);\n        this._loader.onURLRedirect = this._onURLRedirect.bind(this);\n        this._loader.onDataArrival = this._onLoaderChunkArrival.bind(this);\n        this._loader.onComplete = this._onLoaderComplete.bind(this);\n        this._loader.onError = this._onLoaderError.bind(this);\n        if(this._mediaConfig.type === 'm3u8') {\n            this._loader.on(Events.MANIFEST_PARSED, (data: TSManifest) => {\n                this._onManifestParsed && this._onManifestParsed(data);\n            });\n        }\n    }\n\n    /**\n     * 从选择的点开始加载\n     * @param optionalFrom 开始加载的点\n     */\n    open(optionalFrom?: number) {\n        this._currentRange = { from: 0, to: -1 };\n        if(optionalFrom) {\n            this._currentRange.from = optionalFrom;\n        }\n\n        this._speedChecker.reset();\n        if(!optionalFrom) {\n            this._fullRequestFlag = true;\n        }\n\n        this._loader && this._loader.startLoad(this._mediaConfig, { ...this._currentRange });\n    }\n\n    abort() {\n        this._loader!.abort();\n\n        if(this._paused) {\n            this._paused = false;\n            this._resumeFrom = 0;\n        }\n    }\n\n    pause() {\n        if(this.isWorking()) {\n            this._loader!.abort();\n            if(this._currentRange) {\n                if(this._stashUsed !== 0) {\n                    this._resumeFrom = this._stashByteStart;\n                    this._currentRange.to = this._stashByteStart - 1;\n                } else {\n                    this._resumeFrom = this._currentRange.to + 1;\n                }\n            }\n\n            this._stashUsed = 0;\n            this._stashByteStart = 0;\n            this._paused = true;\n        }\n    }\n\n    resume() {\n        if(this._paused) {\n            this._paused = false;\n            const bytes = this._resumeFrom;\n            this._resumeFrom = 0;\n            this._internalSeek(bytes, true);\n        }\n    }\n\n    seek(bytes: number) {\n        this._paused = false;\n        this._stashUsed = 0;\n        this._stashByteStart = 0;\n        this._internalSeek(bytes, true);\n    }\n\n    /**\n     * hls流处理seek, 查找相应的ts文件, 然后下载\n     */\n    tsSeek(milliseconds: number) {\n        this._loader instanceof FragmentLoader && this._loader.seek(milliseconds);\n    }\n\n    /**\n     * 加载下一个片段\n     */\n    loadNextFrag() {\n        this._loader instanceof FragmentLoader && this._loader.loadNextFrag();\n    }\n\n    /**\n     * When seeking request is from media seeking, unconsumed stash data should be dropped\n     * However, stash data shouldn't be dropped if seeking requested from http reconnection\n     *\n     * @dropUnconsumed: Ignore and discard all unconsumed data in stash buffer\n     */\n    _internalSeek(bytes: number, dropUnconsumed?: boolean) {\n        if(this._loader!.isWorking()) {\n            this._loader!.abort();\n        }\n\n        if(this._mediaConfig.type === 'flv') {\n            this._flushStashBuffer(dropUnconsumed);\n            // dispatch & flush stash buffer before seek\n            this._loader!.destroy();\n            this._loader = null;\n            const requestRange = { from: bytes, to: -1 };\n            this._currentRange = { from: requestRange.from, to: -1 };\n            this._stashSize = this._stashInitialSize;\n            this._createLoader();\n            this._loader!.startLoad(this._mediaConfig, requestRange);\n        } else {\n            if(this._loader instanceof FragmentLoader) {\n                this._loader.resume();\n                this._loader.loadNextFrag();\n            }\n        }\n        this._speedChecker.reset();\n        if(this._onSeeked) {\n            this._onSeeked();\n        }\n    }\n\n    /**\n     * 扩冲数据池\n     * @param expectedBytes 期望的数据池大小\n     */\n    _expandBuffer(expectedBytes: number) {\n        let bufferNewSize = this._stashSize;\n        while(bufferNewSize + 1024 * 1024 * 1 < expectedBytes) {\n            bufferNewSize *= 2;\n        }\n\n        bufferNewSize += 1024 * 1024 * 1; // bufferSize = stashSize + 1MB\n        if(bufferNewSize === this._bufferSize) {\n            return;\n        }\n\n        const newBuffer = new ArrayBuffer(bufferNewSize);\n\n        if(this._stashUsed > 0) {\n            // copy existing data into new buffer\n            const stashOldArray = new Uint8Array(this._stashBuffer, 0, this._stashUsed);\n            const stashNewArray = new Uint8Array(newBuffer, 0, bufferNewSize);\n            stashNewArray.set(stashOldArray, 0);\n        }\n\n        this._stashBuffer = newBuffer;\n        this._bufferSize = bufferNewSize;\n    }\n\n    /**\n     * 标准化网速值, 使之等于标准1M, 2M, 4M 10M等带宽的网速最大值\n     * @param input speedChecker返回的网速值\n     */\n    _normalizeSpeed(input: number) {\n        const list = this._speedNormalizeList;\n        const last = list.length - 1;\n        let mid = 0;\n        let lbound = 0;\n        let ubound = last;\n\n        if(input < list[0]) {\n            return list[0];\n        }\n\n        // binary search\n        while(lbound <= ubound) {\n            mid = lbound + Math.floor((ubound - lbound) / 2);\n            if(mid === last || (input >= list[mid] && input < list[mid + 1])) {\n                return list[mid];\n            } if(list[mid] < input) {\n                lbound = mid + 1;\n            } else {\n                ubound = mid - 1;\n            }\n        }\n    }\n\n    _adjustStashSize(normalized: number) {\n        let stashSizeKB = 0;\n\n        if(this._config.isLive) {\n            // live stream: always use single normalized speed for size of stashSizeKB\n            stashSizeKB = normalized;\n        } else {\n            if(normalized < 512) {\n                stashSizeKB = normalized;\n            } else if(normalized >= 512 && normalized <= 1024) {\n                stashSizeKB = Math.floor(normalized * 1.5);\n            } else {\n                stashSizeKB = normalized * 2;\n            }\n        }\n\n        if(stashSizeKB > 8192) {\n            stashSizeKB = 8192;\n        }\n\n        const bufferSize = stashSizeKB * 1024 + 1024 * 1024 * 1; // stashSize + 1MB\n        if(this._bufferSize < bufferSize) {\n            this._expandBuffer(bufferSize);\n        }\n        this._stashSize = stashSizeKB * 1024;\n    }\n\n    /**\n     * 向上发送数据块, 并返回已经解析处理的数据的长度\n     * @param chunks 发送的数据内容\n     * @param byteStart 数据内容在总的数据中的索引值\n     * @param extraData 额外的数据\n     */\n    _dispatchChunks(chunks: ArrayBuffer, byteStart: number, extraData?: TSExtraData): number {\n        this._currentRange && (this._currentRange.to = byteStart + chunks.byteLength - 1);\n        if(this._onDataArrival) {\n            return this._onDataArrival(chunks, byteStart, extraData);\n        }\n        return 0;\n    }\n\n    /**\n     * 发生 301/302 地址跳转后的处理函数\n     * @param redirectedURL 跳转的地址\n     */\n    _onURLRedirect(redirectedURL: string) {\n        this._redirectedURL = redirectedURL;\n        if(this._onRedirect) {\n            this._onRedirect(redirectedURL);\n        }\n    }\n\n    /**\n     * 当在response header 中获知请求文件大小后处理的函数\n     * @param contentLength 在请求头中获知文件的大小\n     */\n    _onContentLengthKnown(contentLength: number) {\n        if(contentLength && this._fullRequestFlag) {\n            this._totalLength = contentLength;\n            this._fullRequestFlag = false;\n        }\n    }\n\n    /**\n     * 收到loader发送过来的数据块的处理函数\n     * @param chunk loader接受到的数据块\n     * @param byteStart 该数据块在已经收数据流里索引\n     * @param receivedLength 收到的长度\n     * @param extraData 额外数据\n     */\n    _onLoaderChunkArrival(\n        chunk: ArrayBuffer,\n        byteStart: number,\n        receivedLength: number,\n        extraData?: TSExtraData\n    ) {\n        if(!this._onDataArrival) {\n            throw new IllegalStateException(\n                'IOController: No existing consumer (onDataArrival) callback!'\n            );\n        }\n        if(this._paused) {\n            return;\n        }\n\n        // 当收到数据流时如果处于 EarlyEOF 状态中, 而取消该状态, 通知外部已恢复\n        if(this._isEarlyEofReconnecting) {\n            this._isEarlyEofReconnecting = false;\n            if(this._onRecoveredEarlyEof) {\n                this._onRecoveredEarlyEof();\n            }\n        }\n        this._speedChecker.addBytes(new Uint8Array(chunk).length);\n        this._tsExtraData = extraData;\n        // adjust stash buffer size according to network speed dynamically\n        const KBps = this._speedChecker.lastSecondKBps;\n\n        if(KBps !== 0) {\n            const normalized = this._normalizeSpeed(KBps);\n            if(this._speedNormalized !== normalized) {\n                this._speedNormalized = Number(normalized);\n                this._adjustStashSize(normalized as number);\n            }\n        }\n\n        if(this._mediaConfig.type === 'm3u8') {\n            this._dispatchChunks(chunk, this._stashByteStart, this._tsExtraData);\n            return;\n        }\n\n        if(!this._enableStash) {\n            // disable stash\n            if(this._stashUsed === 0) {\n                // dispatch chunk directly to consumer;\n                // check ret value (consumed bytes) and stash unconsumed to stashBuffer\n                const consumed = this._dispatchChunks(chunk, byteStart, extraData);\n                if(consumed < chunk.byteLength) {\n                    // unconsumed data remain.\n                    const remain = chunk.byteLength - consumed;\n                    if(remain > this._bufferSize) {\n                        this._expandBuffer(remain);\n                    }\n                    const stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\n                    stashArray.set(new Uint8Array(chunk, consumed), 0);\n                    this._stashUsed += remain;\n                    this._stashByteStart = byteStart + consumed;\n                }\n            } else {\n                // else: Merge chunk into stashBuffer, and dispatch stashBuffer to consumer.\n                if(this._stashUsed + chunk.byteLength > this._bufferSize) {\n                    this._expandBuffer(this._stashUsed + chunk.byteLength);\n                }\n                const stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\n                stashArray.set(new Uint8Array(chunk), this._stashUsed);\n                this._stashUsed += chunk.byteLength;\n                const consumed = this._dispatchChunks(\n                    this._stashBuffer.slice(0, this._stashUsed),\n                    this._stashByteStart,\n                    extraData\n                );\n                if(consumed < this._stashUsed && consumed > 0) {\n                    // unconsumed data remain\n                    const remainArray = new Uint8Array(this._stashBuffer, consumed);\n                    stashArray.set(remainArray, 0);\n                }\n                this._stashUsed -= consumed;\n                this._stashByteStart += consumed;\n            }\n        } else {\n            // enable stash\n            if(this._stashUsed === 0 && this._stashByteStart === 0) {\n                // seeked? or init chunk?\n                // This is the first chunk after seek action\n                this._stashByteStart = byteStart;\n            }\n            if(this._stashUsed + chunk.byteLength <= this._stashSize) {\n                // just stash\n                const stashArray = new Uint8Array(this._stashBuffer, 0, this._stashSize);\n                stashArray.set(new Uint8Array(chunk), this._stashUsed);\n                this._stashUsed += chunk.byteLength;\n            } else {\n                // stashUsed + chunkSize > stashSize, size limit exceeded\n                let stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\n                if(this._stashUsed > 0) {\n                    // There're stash datas in buffer\n                    // dispatch the whole stashBuffer, and stash remain data\n                    // then append chunk to stashBuffer (stash)\n                    const buffer = this._stashBuffer.slice(0, this._stashUsed);\n                    const consumed = this._dispatchChunks(buffer, this._stashByteStart, extraData);\n                    if(consumed < buffer.byteLength) {\n                        if(consumed > 0) {\n                            const remainArray = new Uint8Array(buffer, consumed);\n                            stashArray.set(remainArray, 0);\n                            this._stashUsed = remainArray.byteLength;\n                            this._stashByteStart += consumed;\n                        }\n                    } else {\n                        this._stashUsed = 0;\n                        this._stashByteStart += consumed;\n                    }\n                    if(this._stashUsed + chunk.byteLength > this._bufferSize) {\n                        this._expandBuffer(this._stashUsed + chunk.byteLength);\n                        stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\n                    }\n                    stashArray.set(new Uint8Array(chunk), this._stashUsed);\n                    this._stashUsed += chunk.byteLength;\n                } else {\n                    // stash buffer empty, but chunkSize > stashSize (oh, holy shit)\n                    // dispatch chunk directly and stash remain data\n                    const consumed = this._dispatchChunks(chunk, byteStart, extraData);\n                    if(consumed < chunk.byteLength) {\n                        const remain = chunk.byteLength - consumed;\n                        if(remain > this._bufferSize) {\n                            this._expandBuffer(remain);\n                            stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\n                        }\n                        stashArray.set(new Uint8Array(chunk, consumed), 0);\n                        this._stashUsed += remain;\n                        this._stashByteStart = byteStart + consumed;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * 清空存储的buffer;\n     * @param dropUnconsumed 是否丢弃未处理的数据\n     */\n    _flushStashBuffer(dropUnconsumed?: boolean) {\n        if(this._stashUsed > 0) {\n            const buffer = this._stashBuffer.slice(0, this._stashUsed);\n            const consumed = this._dispatchChunks(buffer, this._stashByteStart, this._tsExtraData);\n            const remain = buffer.byteLength - consumed;\n\n            if(consumed < buffer.byteLength) {\n                if(dropUnconsumed) {\n                    Logger.warn(\n                        this.Tag,\n                        `${remain} bytes unconsumed data remain when flush buffer, dropped`\n                    );\n                } else {\n                    if(consumed > 0) {\n                        const stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\n                        const remainArray = new Uint8Array(buffer, consumed);\n                        stashArray.set(remainArray, 0);\n                        this._stashUsed = remainArray.byteLength;\n                        this._stashByteStart += consumed;\n                    }\n                    return 0;\n                }\n            }\n            this._stashUsed = 0;\n            this._stashByteStart = 0;\n            return remain;\n        }\n        return 0;\n    }\n\n    _onLoaderComplete() {\n        // Force-flush stash buffer, and drop unconsumed data\n        this._flushStashBuffer(true);\n\n        if(this._onComplete) {\n            this._onComplete(this._extraData);\n        }\n    }\n\n    _onLoaderError(type: string, data: ErrorData) {\n        Logger.error(this.Tag, `Loader error, code = ${data.code}, msg = ${data.reason}`);\n\n        this._flushStashBuffer(false);\n\n        if(this._isEarlyEofReconnecting) {\n            // Auto-reconnect for EarlyEof failed, throw UnrecoverableEarlyEof error to upper-layer\n            this._isEarlyEofReconnecting = false;\n            type = Errors.UNRECOVERABLE_EARLY_EOF;\n        }\n\n        switch(type) {\n        case Errors.EARLY_EOF: {\n            if(!this._config.isLive) {\n                // Do internal http reconnect if not live stream\n                if(this._totalLength && this._currentRange) {\n                    const nextFrom = this._currentRange.to + 1;\n                    if(nextFrom < this._totalLength) {\n                        Logger.warn(this.Tag, 'Connection lost, trying reconnect...');\n                        this._isEarlyEofReconnecting = true;\n                        this._internalSeek(nextFrom, false);\n                    }\n                    return;\n                }\n                // else: We don't know totalLength, throw UnrecoverableEarlyEof\n            }\n            // live stream: throw UnrecoverableEarlyEof error to upper-layer\n            type = Errors.UNRECOVERABLE_EARLY_EOF;\n            break;\n        }\n        case Errors.UNRECOVERABLE_EARLY_EOF:\n        case Errors.CONNECTING_TIMEOUT:\n        case Errors.HTTP_STATUS_CODE_INVALID:\n        case Errors.EXCEPTION:\n            break;\n        default:\n            break;\n        }\n\n        if(this._onError) {\n            this._onError(type, data);\n        } else {\n            throw new RuntimeException(`IOException: ${data.reason}`);\n        }\n    }\n}\n\nexport default IOController;\n","import getMediaSource from './mediasource-helper';\n\nexport default function isSupported(): boolean {\n    const mediaSource = getMediaSource();\n    const sourceBuffer = (window as any).SourceBuffer || (window as any).WebKitSourceBuffer;\n    const isTypeSupported = mediaSource\n        && typeof mediaSource.isTypeSupported === 'function'\n        && mediaSource.isTypeSupported('video/mp4; codecs=\"avc1.42E01E,mp4a.40.2\"');\n\n    // if SourceBuffer is exposed ensure its API is valid\n    // safari and old version of Chrome doe not expose SourceBuffer globally so checking SourceBuffer.prototype is impossible\n    const sourceBufferValidAPI = !sourceBuffer\n        || (sourceBuffer.prototype\n            && typeof sourceBuffer.prototype.appendBuffer === 'function'\n            && typeof sourceBuffer.prototype.remove === 'function');\n    return !!isTypeSupported && !!sourceBufferValidAPI;\n}\n","/**\n * MediaSource helper\n */\n\nexport default function getMediaSource(): typeof MediaSource {\n    return (window as any).MediaSource || (window as any).WebKitMediaSource;\n}\n","function webpackBootstrapFunc (modules) {\n/******/  // The module cache\n/******/  var installedModules = {};\n\n/******/  // The require function\n/******/  function __webpack_require__(moduleId) {\n\n/******/    // Check if module is in cache\n/******/    if(installedModules[moduleId])\n/******/      return installedModules[moduleId].exports;\n\n/******/    // Create a new module (and put it into the cache)\n/******/    var module = installedModules[moduleId] = {\n/******/      i: moduleId,\n/******/      l: false,\n/******/      exports: {}\n/******/    };\n\n/******/    // Execute the module function\n/******/    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/    // Flag the module as loaded\n/******/    module.l = true;\n\n/******/    // Return the exports of the module\n/******/    return module.exports;\n/******/  }\n\n/******/  // expose the modules object (__webpack_modules__)\n/******/  __webpack_require__.m = modules;\n\n/******/  // expose the module cache\n/******/  __webpack_require__.c = installedModules;\n\n/******/  // identity function for calling harmony imports with the correct context\n/******/  __webpack_require__.i = function(value) { return value; };\n\n/******/  // define getter function for harmony exports\n/******/  __webpack_require__.d = function(exports, name, getter) {\n/******/    if(!__webpack_require__.o(exports, name)) {\n/******/      Object.defineProperty(exports, name, {\n/******/        configurable: false,\n/******/        enumerable: true,\n/******/        get: getter\n/******/      });\n/******/    }\n/******/  };\n\n/******/  // define __esModule on exports\n/******/  __webpack_require__.r = function(exports) {\n/******/    Object.defineProperty(exports, '__esModule', { value: true });\n/******/  };\n\n/******/  // getDefaultExport function for compatibility with non-harmony modules\n/******/  __webpack_require__.n = function(module) {\n/******/    var getter = module && module.__esModule ?\n/******/      function getDefault() { return module['default']; } :\n/******/      function getModuleExports() { return module; };\n/******/    __webpack_require__.d(getter, 'a', getter);\n/******/    return getter;\n/******/  };\n\n/******/  // Object.prototype.hasOwnProperty.call\n/******/  __webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/  // __webpack_public_path__\n/******/  __webpack_require__.p = \"/\";\n\n/******/  // on error function for async loading\n/******/  __webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n  var f = __webpack_require__(__webpack_require__.s = ENTRY_MODULE)\n  return f.default || f // try to call default if defined to also support babel esmodule exports\n}\n\nvar moduleNameReqExp = '[\\\\.|\\\\-|\\\\+|\\\\w|\\/|@]+'\nvar dependencyRegExp = '\\\\(\\\\s*(\\/\\\\*.*?\\\\*\\/)?\\\\s*.*?(' + moduleNameReqExp + ').*?\\\\)' // additional chars when output.pathinfo is true\n\n// http://stackoverflow.com/a/2593661/130442\nfunction quoteRegExp (str) {\n  return (str + '').replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&')\n}\n\nfunction isNumeric(n) {\n  return !isNaN(1 * n); // 1 * n converts integers, integers as string (\"123\"), 1e3 and \"1e3\" to integers and strings to NaN\n}\n\nfunction getModuleDependencies (sources, module, queueName) {\n  var retval = {}\n  retval[queueName] = []\n\n  var fnString = module.toString()\n  var wrapperSignature = fnString.match(/^function\\s?\\w*\\(\\w+,\\s*\\w+,\\s*(\\w+)\\)/)\n  if (!wrapperSignature) return retval\n  var webpackRequireName = wrapperSignature[1]\n\n  // main bundle deps\n  var re = new RegExp('(\\\\\\\\n|\\\\W)' + quoteRegExp(webpackRequireName) + dependencyRegExp, 'g')\n  var match\n  while ((match = re.exec(fnString))) {\n    if (match[3] === 'dll-reference') continue\n    retval[queueName].push(match[3])\n  }\n\n  // dll deps\n  re = new RegExp('\\\\(' + quoteRegExp(webpackRequireName) + '\\\\(\"(dll-reference\\\\s(' + moduleNameReqExp + '))\"\\\\)\\\\)' + dependencyRegExp, 'g')\n  while ((match = re.exec(fnString))) {\n    if (!sources[match[2]]) {\n      retval[queueName].push(match[1])\n      sources[match[2]] = __webpack_require__(match[1]).m\n    }\n    retval[match[2]] = retval[match[2]] || []\n    retval[match[2]].push(match[4])\n  }\n\n  // convert 1e3 back to 1000 - this can be important after uglify-js converted 1000 to 1e3\n  var keys = Object.keys(retval);\n  for (var i = 0; i < keys.length; i++) {\n    for (var j = 0; j < retval[keys[i]].length; j++) {\n      if (isNumeric(retval[keys[i]][j])) {\n        retval[keys[i]][j] = 1 * retval[keys[i]][j];\n      }\n    }\n  }\n\n  return retval\n}\n\nfunction hasValuesInQueues (queues) {\n  var keys = Object.keys(queues)\n  return keys.reduce(function (hasValues, key) {\n    return hasValues || queues[key].length > 0\n  }, false)\n}\n\nfunction getRequiredModules (sources, moduleId) {\n  var modulesQueue = {\n    main: [moduleId]\n  }\n  var requiredModules = {\n    main: []\n  }\n  var seenModules = {\n    main: {}\n  }\n\n  while (hasValuesInQueues(modulesQueue)) {\n    var queues = Object.keys(modulesQueue)\n    for (var i = 0; i < queues.length; i++) {\n      var queueName = queues[i]\n      var queue = modulesQueue[queueName]\n      var moduleToCheck = queue.pop()\n      seenModules[queueName] = seenModules[queueName] || {}\n      if (seenModules[queueName][moduleToCheck] || !sources[queueName][moduleToCheck]) continue\n      seenModules[queueName][moduleToCheck] = true\n      requiredModules[queueName] = requiredModules[queueName] || []\n      requiredModules[queueName].push(moduleToCheck)\n      var newModules = getModuleDependencies(sources, sources[queueName][moduleToCheck], queueName)\n      var newModulesKeys = Object.keys(newModules)\n      for (var j = 0; j < newModulesKeys.length; j++) {\n        modulesQueue[newModulesKeys[j]] = modulesQueue[newModulesKeys[j]] || []\n        modulesQueue[newModulesKeys[j]] = modulesQueue[newModulesKeys[j]].concat(newModules[newModulesKeys[j]])\n      }\n    }\n  }\n\n  return requiredModules\n}\n\nmodule.exports = function (moduleId, options) {\n  options = options || {}\n  var sources = {\n    main: __webpack_modules__\n  }\n\n  var requiredModules = options.all ? { main: Object.keys(sources.main) } : getRequiredModules(sources, moduleId)\n\n  var src = ''\n\n  Object.keys(requiredModules).filter(function (m) { return m !== 'main' }).forEach(function (module) {\n    var entryModule = 0\n    while (requiredModules[module][entryModule]) {\n      entryModule++\n    }\n    requiredModules[module].push(entryModule)\n    sources[module][entryModule] = '(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })'\n    src = src + 'var ' + module + ' = (' + webpackBootstrapFunc.toString().replace('ENTRY_MODULE', JSON.stringify(entryModule)) + ')({' + requiredModules[module].map(function (id) { return '' + JSON.stringify(id) + ': ' + sources[module][id].toString() }).join(',') + '});\\n'\n  })\n\n  src = src + 'new ((' + webpackBootstrapFunc.toString().replace('ENTRY_MODULE', JSON.stringify(moduleId)) + ')({' + requiredModules.main.map(function (id) { return '' + JSON.stringify(id) + ': ' + sources.main[id].toString() }).join(',') + '}))(self);'\n\n  var blob = new window.Blob([src], { type: 'text/javascript' })\n  if (options.bare) { return blob }\n\n  var URL = window.URL || window.webkitURL || window.mozURL || window.msURL\n\n  var workerUrl = URL.createObjectURL(blob)\n  var worker = new window.Worker(workerUrl)\n  worker.objectURL = workerUrl\n\n  return worker\n}\n","import LoggingControl from '../Utils/logging-control';\n// import Polyfill from '../Utils/polyfill'; 暂时不需要\nimport TransmuxingController from './TransmuxingController';\nimport Events from '../Events/index';\nimport Segment, { MediaSegment, InitSegment } from '../Interfaces/Segment';\nimport { MediaInfo } from '../Interfaces/MediaInfo';\nimport Metadata from '../Interfaces/Metadata';\nimport StatisticsInfoObject from '../Interfaces/StatisticsInfo';\nimport WEBWORKER_CMD from '../Utils/workerCmd';\n\n/* post message to worker:\n   data: {\n       cmd: string\n       param: any\n   }\n\n   receive message from worker:\n   data: {\n       msg: string,\n       data: any\n   }\n */\n/* eslint-disable */\nconst TransmuxingWorker = function (self: Worker) {\n    const TAG: string = 'TransmuxingWorker';\n    let controller: TransmuxingController | null = null;\n    const logcatListener = onLogcatCallback.bind(self);\n\n    // Polyfill.install();\n\n    self.addEventListener('message', (e) => {\n        switch(e.data.cmd) {\n        case WEBWORKER_CMD.INIT:\n            controller = new TransmuxingController(\n                e.data.param[0],\n                e.data.param[1],\n                e.data.param[2],\n                e.data.param[3]\n            );\n            controller.on(Events.IO_ERROR, onIOError.bind(self));\n            controller.on(Events.DEMUX_ERROR, onDemuxError.bind(self));\n            controller.on(Events.INIT_SEGMENT, onInitSegment.bind(self));\n            controller.on(Events.MEDIA_SEGMENT, onMediaSegment.bind(self));\n            controller.on(Events.LOAD_COMPLETE, onLoadingComplete.bind(self));\n            controller.on(Events.RECOVERED_EARLY_EOF, onRecoveredEarlyEof.bind(self));\n            controller.on(Events.MEDIA_INFO, onMediaInfo.bind(self));\n            controller.on(Events.METADATA_ARRIVED, onMetaDataArrived.bind(self));\n            controller.on(Events.SCRIPTDATA_ARRIVED, onScriptDataArrived.bind(self));\n            controller.on(Events.STATISTICS_INFO, onStatisticsInfo.bind(self));\n            controller.on(Events.RECOMMEND_SEEKPOINT, onRecommendSeekpoint.bind(self));\n            controller.on(Events.GET_SEI_INFO, onGetSeiInfo.bind(self));\n            controller.on(Events.MANIFEST_PARSED, onManifestParsed.bind(self));\n            break;\n        case WEBWORKER_CMD.DESTROY:\n            if(controller) {\n                controller.destroy();\n                controller = null;\n            }\n            self.postMessage({ msg: 'destroyed' });\n            break;\n        case WEBWORKER_CMD.START:\n            controller && controller.start();\n            break;\n        case WEBWORKER_CMD.STOP:\n            controller && controller.stop();\n            break;\n        case WEBWORKER_CMD.SEEK:\n            controller && controller.seek(e.data.param);\n            break;\n        case WEBWORKER_CMD.PAUSE:\n            controller && controller.pause();\n            break;\n        case WEBWORKER_CMD.RESUME:\n            controller && controller.resume();\n            break;\n        case WEBWORKER_CMD.LOG_CONFIG_CHANGE: {\n            const config = e.data.param;\n            LoggingControl.applyConfig(config);\n\n            if(config.enableCallback === true) {\n                LoggingControl.addLogListener(logcatListener);\n            } else {\n                LoggingControl.removeLogListener(logcatListener);\n            }\n            break;\n        }\n        }\n    });\n\n    function onInitSegment(type: string, initSegment: InitSegment) {\n        const obj = {\n            msg: Events.INIT_SEGMENT,\n            data: {\n                type,\n                data: initSegment\n            }\n        };\n        // self.postMessage(obj, [initSegment.data]);  // data: ArrayBuffer\n        let { data } = initSegment;\n        if(initSegment.data instanceof Uint8Array) {\n            data = initSegment.data.buffer;\n        }\n        self.postMessage(obj, [data]);\n    }\n\n    function onMediaSegment(type: string, mediaSegment: MediaSegment) {\n        const obj = {\n            msg: Events.MEDIA_SEGMENT,\n            data: {\n                type,\n                data: mediaSegment\n            }\n        };\n        let { data } = mediaSegment;\n        if(mediaSegment.data instanceof Uint8Array) {\n            data = mediaSegment.data.buffer;\n        }\n        self.postMessage(obj, [data]); // data: ArrayBuffer\n    }\n\n    function onLoadingComplete() {\n        const obj = {\n            msg: Events.LOAD_COMPLETE\n        };\n        self.postMessage(obj);\n    }\n\n    function onRecoveredEarlyEof() {\n        const obj = {\n            msg: Events.RECOVERED_EARLY_EOF\n        };\n        self.postMessage(obj);\n    }\n\n    function onMediaInfo(mediaInfo: MediaInfo) {\n        const obj = {\n            msg: Events.MEDIA_INFO,\n            data: mediaInfo\n        };\n        self.postMessage(obj);\n    }\n\n    function onMetaDataArrived(metadata: Metadata) {\n        const obj = {\n            msg: Events.METADATA_ARRIVED,\n            data: metadata\n        };\n        self.postMessage(obj);\n    }\n    /**\n     * 向外发送 flv的script内容\n     * @param data TODO flv的script内容格式\n     */\n    function onScriptDataArrived(data: any) {\n        const obj = {\n            msg: Events.SCRIPTDATA_ARRIVED,\n            data\n        };\n        self.postMessage(obj);\n    }\n\n    function onStatisticsInfo(statInfo: StatisticsInfoObject) {\n        const obj = {\n            msg: Events.STATISTICS_INFO,\n            data: statInfo\n        };\n        self.postMessage(obj);\n    }\n\n    function onIOError(type: string, info: string) {\n        self.postMessage({\n            msg: Events.IO_ERROR,\n            data: {\n                type,\n                info\n            }\n        });\n    }\n\n    function onDemuxError(type: string, info: string) {\n        self.postMessage({\n            msg: Events.DEMUX_ERROR,\n            data: {\n                type,\n                info\n            }\n        });\n    }\n\n    function onRecommendSeekpoint(milliseconds: number) {\n        self.postMessage({\n            msg: Events.RECOMMEND_SEEKPOINT,\n            data: milliseconds\n        });\n    }\n\n    function onGetSeiInfo(data: Uint8Array) {\n        self.postMessage({\n            msg: Events.GET_SEI_INFO,\n            data\n        });\n    }\n\n    function onManifestParsed(data: any) {\n        self.postMessage({\n            msg: Events.MANIFEST_PARSED,\n            data\n        });\n    }\n\n    function onLogcatCallback(logType: string, logInfo: string) {\n        self.postMessage({\n            msg: Events.WORKER_LOG,\n            data: {\n                type: logType,\n                msg: logInfo\n            }\n        });\n    }\n};\n/* eslint-enable */\nexport default TransmuxingWorker;\n","/*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE\n * @version   v4.2.8+1e68dce6\n */\n\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.ES6Promise = factory());\n}(this, (function () { 'use strict';\n\nfunction objectOrFunction(x) {\n  var type = typeof x;\n  return x !== null && (type === 'object' || type === 'function');\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\n\n\nvar _isArray = void 0;\nif (Array.isArray) {\n  _isArray = Array.isArray;\n} else {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n}\n\nvar isArray = _isArray;\n\nvar len = 0;\nvar vertxNext = void 0;\nvar customSchedulerFn = void 0;\n\nvar asap = function asap(callback, arg) {\n  queue[len] = callback;\n  queue[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 2, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    if (customSchedulerFn) {\n      customSchedulerFn(flush);\n    } else {\n      scheduleFlush();\n    }\n  }\n};\n\nfunction setScheduler(scheduleFn) {\n  customSchedulerFn = scheduleFn;\n}\n\nfunction setAsap(asapFn) {\n  asap = asapFn;\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // see https://github.com/cujojs/when/issues/410 for details\n  return function () {\n    return process.nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  // Store setTimeout reference so es6-promise will be unaffected by\n  // other code modifying setTimeout (like sinon.useFakeTimers())\n  var globalSetTimeout = setTimeout;\n  return function () {\n    return globalSetTimeout(flush, 1);\n  };\n}\n\nvar queue = new Array(1000);\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue[i];\n    var arg = queue[i + 1];\n\n    callback(arg);\n\n    queue[i] = undefined;\n    queue[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertx() {\n  try {\n    var vertx = Function('return this')().require('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush = void 0;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush = useMessageChannel();\n} else if (browserWindow === undefined && typeof require === 'function') {\n  scheduleFlush = attemptVertx();\n} else {\n  scheduleFlush = useSetTimeout();\n}\n\nfunction then(onFulfillment, onRejection) {\n  var parent = this;\n\n  var child = new this.constructor(noop);\n\n  if (child[PROMISE_ID] === undefined) {\n    makePromise(child);\n  }\n\n  var _state = parent._state;\n\n\n  if (_state) {\n    var callback = arguments[_state - 1];\n    asap(function () {\n      return invokeCallback(_state, child, callback, parent._result);\n    });\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}\n\n/**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {Any} value value that the returned promise will be resolved with\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$1(object) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop);\n  resolve(promise, object);\n  return promise;\n}\n\nvar PROMISE_ID = Math.random().toString(36).substring(2);\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nfunction selfFulfillment() {\n  return new TypeError(\"You cannot resolve a promise with itself\");\n}\n\nfunction cannotReturnOwn() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then$$1.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then$$1) {\n  asap(function (promise) {\n    var sealed = false;\n    var error = tryThen(then$$1, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        resolve(promise, value);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      return resolve(promise, value);\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$1) {\n  if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then$$1 === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then$$1)) {\n      handleForeignThenable(promise, maybeThenable, then$$1);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction resolve(promise, value) {\n  if (promise === value) {\n    reject(promise, selfFulfillment());\n  } else if (objectOrFunction(value)) {\n    var then$$1 = void 0;\n    try {\n      then$$1 = value.then;\n    } catch (error) {\n      reject(promise, error);\n      return;\n    }\n    handleMaybeThenable(promise, value, then$$1);\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onerror) {\n    promise._onerror(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length !== 0) {\n    asap(publish, promise);\n  }\n}\n\nfunction reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n\n  asap(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var _subscribers = parent._subscribers;\n  var length = _subscribers.length;\n\n\n  parent._onerror = null;\n\n  _subscribers[length] = child;\n  _subscribers[length + FULFILLED] = onFulfillment;\n  _subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    asap(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = void 0,\n      callback = void 0,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = void 0,\n      error = void 0,\n      succeeded = true;\n\n  if (hasCallback) {\n    try {\n      value = callback(detail);\n    } catch (e) {\n      succeeded = false;\n      error = e;\n    }\n\n    if (promise === value) {\n      reject(promise, cannotReturnOwn());\n      return;\n    }\n  } else {\n    value = detail;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n    resolve(promise, value);\n  } else if (succeeded === false) {\n    reject(promise, error);\n  } else if (settled === FULFILLED) {\n    fulfill(promise, value);\n  } else if (settled === REJECTED) {\n    reject(promise, value);\n  }\n}\n\nfunction initializePromise(promise, resolver) {\n  try {\n    resolver(function resolvePromise(value) {\n      resolve(promise, value);\n    }, function rejectPromise(reason) {\n      reject(promise, reason);\n    });\n  } catch (e) {\n    reject(promise, e);\n  }\n}\n\nvar id = 0;\nfunction nextId() {\n  return id++;\n}\n\nfunction makePromise(promise) {\n  promise[PROMISE_ID] = id++;\n  promise._state = undefined;\n  promise._result = undefined;\n  promise._subscribers = [];\n}\n\nfunction validationError() {\n  return new Error('Array Methods must be provided an Array');\n}\n\nvar Enumerator = function () {\n  function Enumerator(Constructor, input) {\n    this._instanceConstructor = Constructor;\n    this.promise = new Constructor(noop);\n\n    if (!this.promise[PROMISE_ID]) {\n      makePromise(this.promise);\n    }\n\n    if (isArray(input)) {\n      this.length = input.length;\n      this._remaining = input.length;\n\n      this._result = new Array(this.length);\n\n      if (this.length === 0) {\n        fulfill(this.promise, this._result);\n      } else {\n        this.length = this.length || 0;\n        this._enumerate(input);\n        if (this._remaining === 0) {\n          fulfill(this.promise, this._result);\n        }\n      }\n    } else {\n      reject(this.promise, validationError());\n    }\n  }\n\n  Enumerator.prototype._enumerate = function _enumerate(input) {\n    for (var i = 0; this._state === PENDING && i < input.length; i++) {\n      this._eachEntry(input[i], i);\n    }\n  };\n\n  Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {\n    var c = this._instanceConstructor;\n    var resolve$$1 = c.resolve;\n\n\n    if (resolve$$1 === resolve$1) {\n      var _then = void 0;\n      var error = void 0;\n      var didError = false;\n      try {\n        _then = entry.then;\n      } catch (e) {\n        didError = true;\n        error = e;\n      }\n\n      if (_then === then && entry._state !== PENDING) {\n        this._settledAt(entry._state, i, entry._result);\n      } else if (typeof _then !== 'function') {\n        this._remaining--;\n        this._result[i] = entry;\n      } else if (c === Promise$1) {\n        var promise = new c(noop);\n        if (didError) {\n          reject(promise, error);\n        } else {\n          handleMaybeThenable(promise, entry, _then);\n        }\n        this._willSettleAt(promise, i);\n      } else {\n        this._willSettleAt(new c(function (resolve$$1) {\n          return resolve$$1(entry);\n        }), i);\n      }\n    } else {\n      this._willSettleAt(resolve$$1(entry), i);\n    }\n  };\n\n  Enumerator.prototype._settledAt = function _settledAt(state, i, value) {\n    var promise = this.promise;\n\n\n    if (promise._state === PENDING) {\n      this._remaining--;\n\n      if (state === REJECTED) {\n        reject(promise, value);\n      } else {\n        this._result[i] = value;\n      }\n    }\n\n    if (this._remaining === 0) {\n      fulfill(promise, this._result);\n    }\n  };\n\n  Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {\n    var enumerator = this;\n\n    subscribe(promise, undefined, function (value) {\n      return enumerator._settledAt(FULFILLED, i, value);\n    }, function (reason) {\n      return enumerator._settledAt(REJECTED, i, reason);\n    });\n  };\n\n  return Enumerator;\n}();\n\n/**\n  `Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = resolve(2);\n  let promise3 = resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = reject(new Error(\"2\"));\n  let promise3 = reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all(entries) {\n  return new Enumerator(this, entries).promise;\n}\n\n/**\n  `Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} promises array of promises to observe\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race(entries) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (!isArray(entries)) {\n    return new Constructor(function (_, reject) {\n      return reject(new TypeError('You must pass an array to race.'));\n    });\n  } else {\n    return new Constructor(function (resolve, reject) {\n      var length = entries.length;\n      for (var i = 0; i < length; i++) {\n        Constructor.resolve(entries[i]).then(resolve, reject);\n      }\n    });\n  }\n}\n\n/**\n  `Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {Any} reason value that the returned promise will be rejected with.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$1(reason) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop);\n  reject(promise, reason);\n  return promise;\n}\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise's eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class Promise\n  @param {Function} resolver\n  Useful for tooling.\n  @constructor\n*/\n\nvar Promise$1 = function () {\n  function Promise(resolver) {\n    this[PROMISE_ID] = nextId();\n    this._result = this._state = undefined;\n    this._subscribers = [];\n\n    if (noop !== resolver) {\n      typeof resolver !== 'function' && needsResolver();\n      this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n    }\n  }\n\n  /**\n  The primary way of interacting with a promise is through its `then` method,\n  which registers callbacks to receive either a promise's eventual value or the\n  reason why the promise cannot be fulfilled.\n   ```js\n  findUser().then(function(user){\n    // user is available\n  }, function(reason){\n    // user is unavailable, and you are given the reason why\n  });\n  ```\n   Chaining\n  --------\n   The return value of `then` is itself a promise.  This second, 'downstream'\n  promise is resolved with the return value of the first promise's fulfillment\n  or rejection handler, or rejected if the handler throws an exception.\n   ```js\n  findUser().then(function (user) {\n    return user.name;\n  }, function (reason) {\n    return 'default name';\n  }).then(function (userName) {\n    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n    // will be `'default name'`\n  });\n   findUser().then(function (user) {\n    throw new Error('Found user, but still unhappy');\n  }, function (reason) {\n    throw new Error('`findUser` rejected and we're unhappy');\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n  });\n  ```\n  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n   ```js\n  findUser().then(function (user) {\n    throw new PedagogicalException('Upstream error');\n  }).then(function (value) {\n    // never reached\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // The `PedgagocialException` is propagated all the way down to here\n  });\n  ```\n   Assimilation\n  ------------\n   Sometimes the value you want to propagate to a downstream promise can only be\n  retrieved asynchronously. This can be achieved by returning a promise in the\n  fulfillment or rejection handler. The downstream promise will then be pending\n  until the returned promise is settled. This is called *assimilation*.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // The user's comments are now available\n  });\n  ```\n   If the assimliated promise rejects, then the downstream promise will also reject.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // If `findCommentsByAuthor` fulfills, we'll have the value here\n  }, function (reason) {\n    // If `findCommentsByAuthor` rejects, we'll have the reason here\n  });\n  ```\n   Simple Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let result;\n   try {\n    result = findResult();\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n  findResult(function(result, err){\n    if (err) {\n      // failure\n    } else {\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findResult().then(function(result){\n    // success\n  }, function(reason){\n    // failure\n  });\n  ```\n   Advanced Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let author, books;\n   try {\n    author = findAuthor();\n    books  = findBooksByAuthor(author);\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n   function foundBooks(books) {\n   }\n   function failure(reason) {\n   }\n   findAuthor(function(author, err){\n    if (err) {\n      failure(err);\n      // failure\n    } else {\n      try {\n        findBoooksByAuthor(author, function(books, err) {\n          if (err) {\n            failure(err);\n          } else {\n            try {\n              foundBooks(books);\n            } catch(reason) {\n              failure(reason);\n            }\n          }\n        });\n      } catch(error) {\n        failure(err);\n      }\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findAuthor().\n    then(findBooksByAuthor).\n    then(function(books){\n      // found books\n  }).catch(function(reason){\n    // something went wrong\n  });\n  ```\n   @method then\n  @param {Function} onFulfilled\n  @param {Function} onRejected\n  Useful for tooling.\n  @return {Promise}\n  */\n\n  /**\n  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n  as the catch block of a try/catch statement.\n  ```js\n  function findAuthor(){\n  throw new Error('couldn't find that author');\n  }\n  // synchronous\n  try {\n  findAuthor();\n  } catch(reason) {\n  // something went wrong\n  }\n  // async with promises\n  findAuthor().catch(function(reason){\n  // something went wrong\n  });\n  ```\n  @method catch\n  @param {Function} onRejection\n  Useful for tooling.\n  @return {Promise}\n  */\n\n\n  Promise.prototype.catch = function _catch(onRejection) {\n    return this.then(null, onRejection);\n  };\n\n  /**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuther();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuther();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @return {Promise}\n  */\n\n\n  Promise.prototype.finally = function _finally(callback) {\n    var promise = this;\n    var constructor = promise.constructor;\n\n    if (isFunction(callback)) {\n      return promise.then(function (value) {\n        return constructor.resolve(callback()).then(function () {\n          return value;\n        });\n      }, function (reason) {\n        return constructor.resolve(callback()).then(function () {\n          throw reason;\n        });\n      });\n    }\n\n    return promise.then(callback, callback);\n  };\n\n  return Promise;\n}();\n\nPromise$1.prototype.then = then;\nPromise$1.all = all;\nPromise$1.race = race;\nPromise$1.resolve = resolve$1;\nPromise$1.reject = reject$1;\nPromise$1._setScheduler = setScheduler;\nPromise$1._setAsap = setAsap;\nPromise$1._asap = asap;\n\n/*global self*/\nfunction polyfill() {\n  var local = void 0;\n\n  if (typeof global !== 'undefined') {\n    local = global;\n  } else if (typeof self !== 'undefined') {\n    local = self;\n  } else {\n    try {\n      local = Function('return this')();\n    } catch (e) {\n      throw new Error('polyfill failed because global object is unavailable in this environment');\n    }\n  }\n\n  var P = local.Promise;\n\n  if (P) {\n    var promiseToString = null;\n    try {\n      promiseToString = Object.prototype.toString.call(P.resolve());\n    } catch (e) {\n      // silently ignored\n    }\n\n    if (promiseToString === '[object Promise]' && !P.cast) {\n      return;\n    }\n  }\n\n  local.Promise = Promise$1;\n}\n\n// Strange compat..\nPromise$1.polyfill = polyfill;\nPromise$1.Promise = Promise$1;\n\nreturn Promise$1;\n\n})));\n\n\n\n//# sourceMappingURL=es6-promise.map\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","import EventEmitter from 'eventemitter3';\nimport Events from '../Events/index';\nimport Codec from '../Codecs/index';\nimport HJPlayerConfig from '../Interfaces/HJPlayerConfig';\nimport MediaConfig from '../Interfaces/MediaConfig';\nimport { InvalidArgumentException, IllegalStateException } from '../Utils/Exception';\n\nclass NativePlayer {\n    /**\n     * 解码器\n     */\n    Codec: Codec | null\n\n    /**\n     * 文件标签\n     */\n    Tag: string\n\n    /**\n     * 播放器类型\n     */\n    _type: string\n\n    /**\n     * 事件中心\n     */\n    _emitter: EventEmitter\n\n    /**\n     * 媒体设置\n     */\n    mediaConfig: MediaConfig\n\n    /**\n     * 用户设置\n     */\n    userConfig: HJPlayerConfig\n\n    /**\n     * 媒体元素\n     */\n    _mediaElement: HTMLMediaElement | null\n\n    /**\n     * 加载时设置的seek time\n     */\n    _pendingSeekTime: number | null\n\n    /**\n     * 统计信息报告定时器\n     */\n    _statisticsReportTimer: number | null\n\n    /**\n     * 回调函数包裹\n     */\n    e: any\n\n    constructor(mediaConfig: MediaConfig, userConfig: HJPlayerConfig) {\n        this.Tag = 'NativePlayer';\n        this._type = 'NativePlayer';\n        this._emitter = new EventEmitter();\n        this.Codec = null;\n        if(mediaConfig.segments) {\n            throw new InvalidArgumentException(\n                `NativePlayer(${mediaConfig.type}) doesn't support multipart playback!`\n            );\n        }\n\n        this.e = {\n            onvLoadedMetadata: this._onvLoadedMetadata.bind(this)\n        };\n\n        this._pendingSeekTime = null;\n        this._statisticsReportTimer = null;\n        this.mediaConfig = mediaConfig;\n        this.userConfig = userConfig;\n        this._mediaElement = null;\n    }\n\n    destroy() {\n        if(this._mediaElement) {\n            this.unload();\n            this.detachMediaElement();\n        }\n        this.e = null;\n        delete (this as any).mediaConfig;\n        this._emitter.removeAllListeners();\n        delete (this as any)._emitter;\n    }\n\n    on(event: string, listener: EventEmitter.ListenerFn) {\n        if(event === Events.MEDIA_INFO) {\n            if(this._mediaElement != null && this._mediaElement.readyState !== 0) {\n                // HAVE_NOTHING\n                Promise.resolve().then(() => {\n                    this._emitter.emit(Events.MEDIA_INFO, this.mediaInfo);\n                });\n            }\n        } else if(event === Events.STATISTICS_INFO) {\n            if(this._mediaElement != null && this._mediaElement.readyState !== 0) {\n                Promise.resolve().then(() => {\n                    this._emitter.emit(Events.STATISTICS_INFO, this.statisticsInfo);\n                });\n            }\n        }\n        this._emitter.addListener(event, listener);\n    }\n\n    off(event: string, listener: EventEmitter.ListenerFn) {\n        this._emitter.removeListener(event, listener);\n    }\n\n    /**\n     * 绑定媒体元素\n     * @param mediaElement 媒体元素\n     */\n    attachMediaElement(mediaElement: HTMLMediaElement) {\n        this._mediaElement = mediaElement;\n        mediaElement.addEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n\n        if(this._pendingSeekTime != null) {\n            try {\n                mediaElement.currentTime = this._pendingSeekTime;\n                this._pendingSeekTime = null;\n            } catch (e) {\n                // IE11 may throw InvalidStateError if readyState === 0\n                // Defer set currentTime operation after loadedmetadata\n            }\n        }\n    }\n\n    /**\n     * 解绑媒体元素\n     */\n    detachMediaElement() {\n        if(this._mediaElement) {\n            this._mediaElement.src = '';\n            this._mediaElement.removeAttribute('src');\n            this._mediaElement.removeEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n            this._mediaElement = null;\n        }\n        if(this._statisticsReportTimer != null) {\n            window.clearInterval(this._statisticsReportTimer);\n            this._statisticsReportTimer = null;\n        }\n    }\n\n    /**\n     * 加载媒体文件\n     */\n    load() {\n        if(!this._mediaElement) {\n            throw new IllegalStateException('HTMLMediaElement must be attached before load()!');\n        }\n        this._mediaElement.src = this.mediaConfig.url;\n\n        if(this._mediaElement.readyState > 0) {\n            this._mediaElement.currentTime = 0;\n        }\n\n        this._mediaElement.preload = 'auto';\n        this._mediaElement.load();\n        this._statisticsReportTimer = window.setInterval(\n            this._reportStatisticsInfo.bind(this),\n            this.userConfig.statisticsInfoReportInterval\n        );\n    }\n\n    /**\n     * 停止加载媒体文件\n     */\n    unload() {\n        if(this._mediaElement) {\n            this._mediaElement.src = '';\n            this._mediaElement.removeAttribute('src');\n        }\n        if(this._statisticsReportTimer != null) {\n            window.clearInterval(this._statisticsReportTimer);\n            this._statisticsReportTimer = null;\n        }\n    }\n\n    play() {\n        if(this._mediaElement) return this._mediaElement.play();\n    }\n\n    pause() {\n        this._mediaElement && this._mediaElement.pause();\n    }\n\n    get type() {\n        return this._type;\n    }\n\n    get buffered() {\n        if(this._mediaElement) {\n            return this._mediaElement.buffered;\n        }\n        return null;\n    }\n\n    get duration() {\n        if(this._mediaElement) {\n            return this._mediaElement.duration;\n        }\n        return 0;\n    }\n\n    get volume() {\n        if(this._mediaElement) {\n            return this._mediaElement.volume;\n        }\n        return 0;\n    }\n\n    set volume(value: number) {\n        this._mediaElement && (this._mediaElement.volume = value);\n    }\n\n    get muted() {\n        if(this._mediaElement) {\n            return this._mediaElement.muted;\n        }\n        return false;\n    }\n\n    set muted(muted: boolean) {\n        this._mediaElement && (this._mediaElement.muted = muted);\n    }\n\n    get currentTime() {\n        if(this._mediaElement) {\n            return this._mediaElement.currentTime;\n        }\n        return 0;\n    }\n\n    set currentTime(seconds) {\n        if(this._mediaElement) {\n            this._mediaElement.currentTime = seconds;\n        } else {\n            this._pendingSeekTime = seconds;\n        }\n    }\n\n    get mediaInfo(): {\n        mediaPrefix: string\n        duration?: number\n        width?: number\n        height?: number\n        } {\n        const mediaPrefix = this._mediaElement instanceof HTMLAudioElement ? 'audio/' : 'video/';\n        const info = Object.create(null);\n        info.mimeType = mediaPrefix + this.mediaConfig.type;\n        if(this._mediaElement) {\n            info.duration = Math.floor(this._mediaElement.duration * 1000);\n            if(this._mediaElement instanceof HTMLVideoElement) {\n                info.width = this._mediaElement.videoWidth;\n                info.height = this._mediaElement.videoHeight;\n            }\n        }\n        return info;\n    }\n\n    get statisticsInfo(): {\n        playerType: string\n        url: string\n        decoded?: number\n        dropped?: number\n        } {\n        const info = Object.create(null);\n        info.playerType = this._type;\n        info.url = this.mediaConfig.url;\n\n        if(!(this._mediaElement instanceof HTMLVideoElement)) {\n            return info;\n        }\n\n        let hasQualityInfo = true;\n        let decoded = 0;\n        let dropped = 0;\n\n        if(this._mediaElement.getVideoPlaybackQuality) {\n            const quality = this._mediaElement.getVideoPlaybackQuality();\n            decoded = quality.totalVideoFrames;\n            dropped = quality.droppedVideoFrames;\n        } else if((this._mediaElement as any).webkitDecodedFrameCount !== undefined) {\n            decoded = (this._mediaElement as any).webkitDecodedFrameCount;\n            dropped = (this._mediaElement as any).webkitDroppedFrameCount;\n        } else {\n            hasQualityInfo = false;\n        }\n\n        if(hasQualityInfo) {\n            info.decodedFrames = decoded;\n            info.droppedFrames = dropped;\n        }\n\n        return info;\n    }\n\n    _onvLoadedMetadata() {\n        if(this._pendingSeekTime != null && this._mediaElement) {\n            this._mediaElement.currentTime = this._pendingSeekTime;\n            this._pendingSeekTime = null;\n        }\n        this._emitter.emit(Events.MEDIA_INFO, this.mediaInfo);\n    }\n\n    /**\n     * 报告统计信息\n     */\n    _reportStatisticsInfo() {\n        this._emitter.emit(Events.STATISTICS_INFO, this.statisticsInfo);\n    }\n}\n\nexport default NativePlayer;\n","import typeSupportData from '../Interfaces/typeSupportData';\n\nconst typeSupport = function typeSupport(): typeSupportData {\n    const MediaSource = (window as any).MediaSource || (window as any).WebKitMediaSource;\n    if(MediaSource) {\n        return {\n            mp4: MediaSource.isTypeSupported('video/mp4'),\n            mpeg: MediaSource.isTypeSupported('audio/mpeg'),\n            mp3: MediaSource.isTypeSupported('audio/mp4; codecs=\"mp3\"')\n        };\n    }\n    return {\n        mp4: false,\n        mpeg: false,\n        mp3: false\n    };\n};\n\nexport default typeSupport;\n","import EventEmitter from 'eventemitter3';\nimport Logger from '../Utils/Logger';\nimport LoggingControl from '../Utils/logging-control';\nimport TransmuxingController from './TransmuxingController';\nimport Events from '../Events/index';\nimport TransmuxingWorker from './TransmuxingWorker';\nimport MediaInfo from './MediaInfo';\nimport getMediaTypeSupport from '../Utils/getMediaTypeSupport';\nimport { InitSegment, MediaSegment } from '../Interfaces/Segment';\nimport TempNavigatorType from '../Interfaces/TempNavigator';\nimport MediaConfig from '../Interfaces/MediaConfig';\nimport StatisticsInfoObject from '../Interfaces/StatisticsInfo';\nimport Metadata from '../Interfaces/Metadata';\nimport WEBWORKER_CMD from '../Utils/workerCmd';\nimport HJPlayerConfig from '../Interfaces/HJPlayerConfig';\nimport TSManifest from '../Interfaces/TSManifest';\n\nconst webworkify = require('webworkify-webpack');\n\nconst typeSupported = getMediaTypeSupport();\nconst tempNavigator: TempNavigatorType = {\n    vendor: window.navigator.vendor || '',\n    userAgent: window.navigator.userAgent\n};\nclass Transmuxer {\n    /**\n     * 文件标签\n     */\n    Tag: string\n\n    /**\n     * 事件中心\n     */\n    private _emitter: EventEmitter\n\n    /**\n     * webworker\n     */\n    private _worker?: any\n    /**\n     * web-worker是否在摧毁中\n     */\n\n    private _workerDestroying?: boolean\n\n    /**\n     * 转码控制器\n     */\n    private _controller?: TransmuxingController\n\n    /**\n     * 回调函数的包裹体\n     */\n    e: any\n\n    constructor(mediaDataSource: MediaConfig, config: HJPlayerConfig) {\n        this.Tag = 'Transmuxer';\n        this._emitter = new EventEmitter();\n        const WORK: any = webworkify;\n        if(config.enableWorker && typeof Worker !== 'undefined') {\n            try {\n                this._worker = WORK(require.resolve('./TransmuxingWorker'));\n                this._workerDestroying = false;\n                this._worker\n                    && this._worker.addEventListener('message', this._onWorkerMessage.bind(this));\n                this._worker\n                    && this._worker.postMessage({\n                        cmd: WEBWORKER_CMD.INIT,\n                        param: [mediaDataSource, config, typeSupported, tempNavigator]\n                    });\n                this.e = {\n                    onLoggingConfigChanged: this._onLoggingConfigChanged.bind(this)\n                };\n                LoggingControl.registerListener(this.e.onLoggingConfigChanged);\n                this._worker\n                    && this._worker.postMessage({\n                        cmd: WEBWORKER_CMD.LOG_CONFIG_CHANGE,\n                        param: LoggingControl.getConfig()\n                    });\n            } catch (error) {\n                Logger.error(\n                    this.Tag,\n                    'Error while initialize transmuxing worker, fallback to inline transmuxing'\n                );\n                delete (this as any)._worker;\n                this._controller = new TransmuxingController(\n                    mediaDataSource,\n                    config,\n                    typeSupported,\n                    tempNavigator\n                );\n            }\n        } else {\n            this._controller = new TransmuxingController(\n                mediaDataSource,\n                config,\n                typeSupported,\n                tempNavigator\n            );\n        }\n\n        if(this._controller) {\n            const ctl = this._controller;\n            ctl.on(Events.IO_ERROR, this._onIOError.bind(this));\n            ctl.on(Events.DEMUX_ERROR, this._onDemuxError.bind(this));\n            ctl.on(Events.INIT_SEGMENT, this._onInitSegment.bind(this));\n            ctl.on(Events.MEDIA_SEGMENT, this._onMediaSegment.bind(this));\n            ctl.on(Events.LOAD_COMPLETE, this._onLoadingComplete.bind(this));\n            ctl.on(Events.RECOVERED_EARLY_EOF, this._onRecoveredEarlyEof.bind(this));\n            ctl.on(Events.MEDIA_INFO, this._onMediaInfo.bind(this));\n            ctl.on(Events.METADATA_ARRIVED, this._onMetaDataArrived.bind(this));\n            ctl.on(Events.SCRIPTDATA_ARRIVED, this._onScriptDataArrived.bind(this));\n            ctl.on(Events.STATISTICS_INFO, this._onStatisticsInfo.bind(this));\n            ctl.on(Events.RECOMMEND_SEEKPOINT, this._onRecommendSeekpoint.bind(this));\n            ctl.on(Events.GET_SEI_INFO, this._onGetSeiInfo.bind(this));\n            ctl.on(Events.MANIFEST_PARSED, this._onMainfestParsed.bind(this));\n        }\n    }\n\n    /**\n     * 自我销毁\n     */\n    destroy() {\n        if(this._worker) {\n            if(!this._workerDestroying) {\n                this._workerDestroying = true;\n                this._worker.postMessage({ cmd: WEBWORKER_CMD.DESTROY });\n                LoggingControl.removeListener(this.e.onLoggingConfigChanged);\n                this.e = null;\n            }\n        } else {\n            this._controller && this._controller.destroy();\n            delete (this as any)._controller;\n        }\n        this._emitter.removeAllListeners();\n        delete (this as any)._emitter;\n    }\n\n    on(event: string, listener: EventEmitter.ListenerFn) {\n        this._emitter.addListener(event, listener);\n    }\n\n    off(event: string, listener: EventEmitter.ListenerFn) {\n        this._emitter.removeListener(event, listener);\n    }\n\n    /**\n     * 是否使用了多线程\n     */\n    hasWorker(): boolean {\n        return this._worker != null;\n    }\n\n    /**\n     * 开始\n     */\n    open() {\n        if(this._worker) {\n            this._worker.postMessage({ cmd: WEBWORKER_CMD.START });\n        } else {\n            this._controller && this._controller.start();\n        }\n    }\n\n    /**\n     * 停止\n     */\n    close() {\n        if(this._worker) {\n            this._worker.postMessage({ cmd: WEBWORKER_CMD.STOP });\n        } else {\n            this._controller && this._controller.stop();\n        }\n    }\n\n    /**\n     * 跳转的时间点\n     * @param milliseconds 跳转的时间点\n     */\n    seek(milliseconds: number) {\n        if(this._worker) {\n            this._worker.postMessage({ cmd: WEBWORKER_CMD.SEEK, param: milliseconds });\n        } else {\n            this._controller && this._controller.seek(milliseconds);\n        }\n    }\n\n    /**\n     * 暂停转码\n     */\n    pause() {\n        if(this._worker) {\n            this._worker.postMessage({ cmd: WEBWORKER_CMD.PAUSE });\n        } else {\n            this._controller && this._controller.pause();\n        }\n    }\n\n    /**\n     * 恢复转码\n     */\n    resume() {\n        if(this._worker) {\n            this._worker.postMessage({ cmd: WEBWORKER_CMD.RESUME });\n        } else {\n            this._controller && this._controller.resume();\n        }\n    }\n\n    /**\n     * 收到初始化片段向上报告\n     * @param type 片段类型\n     * @param initSegment 片段数据\n     */\n    _onInitSegment(type: string, initSegment: InitSegment) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(Events.INIT_SEGMENT, type, initSegment);\n        });\n    }\n\n    /**\n     * 收到媒体片段向上报告\n     * @param type 片段类型\n     * @param initSegment 片段数据\n     */\n    _onMediaSegment(type: string, mediaSegment: MediaSegment) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(Events.MEDIA_SEGMENT, type, mediaSegment);\n        });\n    }\n\n    /**\n     * 当加载完成时向上报告\n     */\n    _onLoadingComplete() {\n        Promise.resolve().then(() => {\n            this._emitter.emit(Events.LOAD_COMPLETE);\n        });\n    }\n\n    /**\n     * 从过早遇到 EOF 事件恢复后向上报告\n     */\n    _onRecoveredEarlyEof() {\n        Promise.resolve().then(() => {\n            this._emitter.emit(Events.RECOVERED_EARLY_EOF);\n        });\n    }\n\n    /**\n     * 当收到解析后的媒体信息后向上提交\n     * @param mediaInfo 媒体信息\n     */\n    _onMediaInfo(mediaInfo: MediaInfo) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(Events.MEDIA_INFO, mediaInfo);\n        });\n    }\n\n    _onMetaDataArrived(metadata: Metadata) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(Events.METADATA_ARRIVED, metadata);\n        });\n    }\n\n    _onScriptDataArrived(data: any) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(Events.SCRIPTDATA_ARRIVED, data);\n        });\n    }\n\n    _onStatisticsInfo(statisticsInfo: StatisticsInfoObject) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(Events.STATISTICS_INFO, statisticsInfo);\n        });\n    }\n\n    _onIOError(type: string, info: string) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(Events.IO_ERROR, type, info);\n        });\n    }\n\n    _onDemuxError(type: string, info: string) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(Events.DEMUX_ERROR, type, info);\n        });\n    }\n\n    /**\n     * 当收到 推荐的seek时间点后向上提交\n     * @param milliseconds 推荐的seek时间点\n     */\n    _onRecommendSeekpoint(milliseconds: number) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(Events.RECOMMEND_SEEKPOINT, milliseconds);\n        });\n    }\n\n    /**\n     * 收到解析到媒体增强信息后向上提交\n     * @param data 媒体增强信息的Uin8Array\n     */\n    _onGetSeiInfo(data: Uint8Array) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(Events.GET_SEI_INFO, data);\n        });\n    }\n\n    _onLoggingConfigChanged(config: HJPlayerConfig) {\n        if(this._worker) {\n            this._worker.postMessage({ cmd: WEBWORKER_CMD.LOG_CONFIG_CHANGE, param: config });\n        }\n    }\n\n    /**\n     * 收到M3U8文档解析数据后向上提交\n     * @param data M3U8文档解析数据, 暂时标为any\n     */\n    _onMainfestParsed(data: TSManifest) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(Events.MANIFEST_PARSED, data);\n        });\n    }\n\n    /**\n     * 当收到web-worker消息时的处理操作\n     * @param event 收到的信息体\n     */\n    _onWorkerMessage(event: MessageEvent) {\n        const message = event.data;\n        const { data } = message;\n\n        if(message.msg === 'destroyed' || this._workerDestroying) {\n            this._workerDestroying = false;\n            this._worker && this._worker.terminate();\n            delete (this as any)._worker;\n            return;\n        }\n\n        switch(message.msg) {\n        case Events.INIT_SEGMENT:\n        case Events.MEDIA_SEGMENT:\n            this._emitter.emit(message.msg, data.type, data.data);\n            break;\n        case Events.LOAD_COMPLETE:\n        case Events.RECOVERED_EARLY_EOF:\n            this._emitter.emit(message.msg);\n            break;\n        case Events.MEDIA_INFO:\n            Object.setPrototypeOf(data, MediaInfo.prototype);\n            this._emitter.emit(message.msg, data);\n            break;\n        case Events.METADATA_ARRIVED:\n        case Events.SCRIPTDATA_ARRIVED:\n        case Events.STATISTICS_INFO:\n            this._emitter.emit(message.msg, data);\n            break;\n        case Events.IO_ERROR:\n        case Events.DEMUX_ERROR:\n            this._emitter.emit(message.msg, data.type, data.info);\n            break;\n        case Events.RECOMMEND_SEEKPOINT:\n            this._emitter.emit(message.msg, data);\n            break;\n        case Events.GET_SEI_INFO:\n            this._emitter.emit(message.msg, data);\n            break;\n        case Events.MANIFEST_PARSED:\n            this._emitter.emit(message.msg, data);\n            break;\n        case Events.WORKER_LOG:\n            Logger.emitter.emit(Events.HJ_PLAYER_LOG, data.type, data.msg);\n            break;\n        default:\n            break;\n        }\n    }\n}\n\nexport default Transmuxer;\n","import SampleInfo from './SampleInfo';\n\nclass IDRSampleList {\n    private _list: SampleInfo[] = []\n\n    public clear() {\n        this._list = [];\n    }\n\n    public appendArray(syncPoints: SampleInfo[]) {\n        const list = this._list;\n\n        if(syncPoints.length === 0) {\n            return;\n        }\n\n        if(list.length > 0 && syncPoints[0].originalDts < list[list.length - 1].originalDts) {\n            this.clear();\n        }\n        Array.prototype.push.apply(list, syncPoints);\n    }\n\n    public getLastSyncPointBeforeDts(dts: number) {\n        if(this._list.length === 0) {\n            return null;\n        }\n\n        const list = this._list;\n        let idx = 0;\n        const last = list.length - 1;\n        let mid = 0;\n        let lbound = 0;\n        let ubound = last;\n\n        if(dts < list[0].dts) {\n            idx = 0;\n            lbound = ubound + 1;\n        }\n\n        while(lbound <= ubound) {\n            mid = lbound + Math.floor((ubound - lbound) / 2);\n            if(mid === last || (dts >= list[mid].dts && dts < list[mid + 1].dts)) {\n                idx = mid;\n                break;\n            } else if(list[mid].dts < dts) {\n                lbound = mid + 1;\n            } else {\n                ubound = mid - 1;\n            }\n        }\n        return this._list[idx];\n    }\n}\n\nexport default IDRSampleList;\n","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint no-param-reassign:0 */\n/* eslint max-len:0 */\n\nimport EventEmitter from 'eventemitter3';\nimport Log from '../Utils/Logger';\nimport Browser from '../Utils/Browser';\nimport Events from '../Events/index';\nimport { IllegalStateException } from '../Utils/Exception';\nimport { MediaSegment, InitSegment } from '../Interfaces/Segment';\nimport IDRSampleList from '../Utils/IDRSampleList';\nimport MediaConfig from '../Interfaces/MediaConfig';\n\n// Media Source Extensions controller\n\ninterface MSEControllerConfig {\n    isLive: boolean\n    autoCleanupSourceBuffer?: boolean\n    autoCleanupMaxBackwardDuration: number\n    autoCleanupMinBackwardDuration: number\n}\ninterface MSEControllerE {\n    onSourceOpen: () => void\n    onSourceEnded: () => void\n    onSourceClose: () => void\n    onSourceBufferError: () => void\n    onSourceBufferUpdateEnd: () => void\n}\ninterface SourceBufferObj {\n    video: SourceBuffer | null\n    audio: SourceBuffer | null\n    [key: string]: SourceBuffer | null\n}\n\nclass MSEController {\n    public TAG: string = 'MSEController'\n\n    private _config: MSEControllerConfig\n\n    private _mediaConfig: any\n\n    private _emitter: EventEmitter = new EventEmitter()\n\n    public on = this._emitter.on.bind(this._emitter)\n\n    public off = this._emitter.off.bind(this._emitter)\n\n    public e: MSEControllerE = {\n        onSourceOpen: this._onSourceOpen.bind(this),\n        onSourceEnded: this._onSourceEnded.bind(this),\n        onSourceClose: this._onSourceClose.bind(this),\n        onSourceBufferError: () => { },\n        onSourceBufferUpdateEnd: this._onSourceBufferUpdateEnd.bind(this)\n    }\n\n    private _mediaSourceObjectURL: string | null = null\n\n    private _mediaSource: MediaSource | null = null\n\n    private _mediaElement: HTMLMediaElement | null = null\n\n    private _isBufferFull: boolean = false\n\n    private _hasPendingEos: boolean = false\n\n    private _requireSetMediaDuration: boolean = false\n\n    private _pendingMediaDuration: number = 0\n\n    private _pendingSourceBufferInit: Array<InitSegment> = []\n\n    private _mimeTypes: { [P in keyof SourceBufferObj]: string | null } = {\n        video: null,\n        audio: null\n    }\n\n    private _sourceBuffers: SourceBufferObj = {\n        video: null,\n        audio: null\n    }\n\n    private _lastInitSegments: Record<string, InitSegment | null> = {\n        video: null,\n        audio: null\n    }\n\n    private _pendingSegments: {\n        [P in keyof SourceBufferObj]: Array<InitSegment | MediaSegment> | null\n    } = {\n            video: [],\n            audio: []\n        }\n\n    private _pendingRemoveRanges: {\n        [P in keyof SourceBufferObj]: Array<{ start: number; end: number }> | null\n    } = {\n            video: [],\n            audio: []\n        }\n\n    private _idrList: IDRSampleList = new IDRSampleList()\n\n    constructor(config: MSEControllerConfig, mediaConfig?: MediaConfig) {\n        this._config = config;\n        if (mediaConfig) {\n            this._mediaConfig = mediaConfig;\n        }\n        if (this._config.isLive && this._config.autoCleanupSourceBuffer === undefined) {\n            // For live stream, do auto cleanup by default\n            this._config.autoCleanupSourceBuffer = true;\n        }\n    }\n\n    destroy() {\n        if (this._mediaElement || this._mediaSource) {\n            this.detachMediaElement();\n        }\n        this._emitter.removeAllListeners();\n        delete (this as any)._emitter;\n        delete (this as any).e;\n    }\n\n    attachMediaElement(mediaElement: HTMLMediaElement) {\n        if (this._mediaSource) {\n            throw new IllegalStateException('MediaSource has been attached to an HTMLMediaElement!');\n        }\n        if (window.MediaSource) {\n            const ms = new window.MediaSource();\n\n            ms.addEventListener('sourceopen', this.e.onSourceOpen);\n            ms.addEventListener('sourceended', this.e.onSourceEnded);\n            ms.addEventListener('sourceclose', this.e.onSourceClose);\n\n            this._mediaSource = ms;\n            this._mediaElement = mediaElement;\n            this._mediaSourceObjectURL = window.URL.createObjectURL(this._mediaSource);\n            mediaElement.src = this._mediaSourceObjectURL;\n        } else {\n            const _this = this;\n            const sourceOpenEvent = this._mediaConfig.sourceOpenEvent || 'timeupdate';\n\n            //@ts-ignore\n            function handleSourceOpen() {\n                _this.e.onSourceOpen();\n                mediaElement.removeEventListener(sourceOpenEvent, handleSourceOpen);\n            }\n            mediaElement.addEventListener(sourceOpenEvent, handleSourceOpen);\n            mediaElement.addEventListener('ended', this.e.onSourceEnded);\n            mediaElement.addEventListener('emptied', this.e.onSourceClose);\n            this._mediaElement = mediaElement;\n        }\n    }\n\n    detachMediaElement() {\n        if (this._mediaSource) {\n            const ms = this._mediaSource;\n            Object.keys(this._sourceBuffers).forEach((type: string) => {\n                // pending segments should be discard\n                const ps = this._pendingSegments[type];\n                ps!.splice(0, ps!.length);\n                this._pendingSegments[type] = null;\n                this._pendingRemoveRanges[type] = null;\n                this._lastInitSegments[type] = null;\n\n                // remove all sourcebuffers\n                const sb = this._sourceBuffers[type];\n                if (sb) {\n                    if (ms.readyState !== 'closed') {\n                        // ms edge can throw an error: Unexpected call to method or property access\n                        try {\n                            ms.removeSourceBuffer(sb);\n                        } catch (error) {\n                            Log.error(this.TAG, error.message);\n                        }\n                        if (this.e) {\n                            sb.removeEventListener('error', this.e.onSourceBufferError);\n                            sb.removeEventListener('updateend', this.e.onSourceBufferUpdateEnd);\n                        }\n                    }\n                    this._mimeTypes[type] = null;\n                    this._sourceBuffers[type] = null;\n                }\n            });\n\n            if (ms.readyState === 'open') {\n                try {\n                    ms.endOfStream();\n                } catch (error) {\n                    Log.error(this.TAG, error.message);\n                }\n            }\n            if (this.e) {\n                ms.removeEventListener('sourceopen', this.e.onSourceOpen);\n                ms.removeEventListener('sourceended', this.e.onSourceEnded);\n                ms.removeEventListener('sourceclose', this.e.onSourceClose);\n            }\n\n            this._pendingSourceBufferInit = [];\n            this._isBufferFull = false;\n            this._idrList.clear();\n            this._mediaSource = null;\n        }\n\n        if (this._mediaElement) {\n            this._mediaElement.src = '';\n            this._mediaElement.removeAttribute('src');\n            this._mediaElement = null;\n        }\n        if (this._mediaSourceObjectURL) {\n            window.URL.revokeObjectURL(this._mediaSourceObjectURL);\n            this._mediaSourceObjectURL = null;\n        }\n    }\n\n    appendInitSegment(initSegment: InitSegment, deferred?: boolean) {\n        if (!this._mediaSource || this._mediaSource.readyState !== 'open') {\n            // sourcebuffer creation requires mediaSource.readyState === 'open'\n            // so we defer the sourcebuffer creation, until sourceopen event triggered\n            this._pendingSourceBufferInit.push(initSegment);\n            // make sure that this InitSegment is in the front of pending segments queue\n            this._pendingSegments[initSegment.type]!.push(initSegment);\n            return;\n        }\n\n        const is = initSegment;\n        let mimeType = `${is.container}`;\n        if (is.codec && is.codec.length > 0) {\n            mimeType += `;codecs=${is.codec}`;\n        }\n\n        let firstInitSegment = false;\n\n        // Log.info(this.TAG, `Received Initialization Segment, mimeType: ${mimeType}`);\n        this._lastInitSegments[is.type] = is;\n\n        if (mimeType !== this._mimeTypes[is.type]) {\n            if (!this._mimeTypes[is.type]) {\n                // empty, first chance create sourcebuffer\n                firstInitSegment = true;\n                try {\n                    const sb = this._mediaSource.addSourceBuffer(mimeType);\n                    if (this.e) {\n                        sb.addEventListener('error', this.e.onSourceBufferError);\n                        sb.addEventListener('updateend', this.e.onSourceBufferUpdateEnd);\n                    }\n\n                    this._sourceBuffers[is.type] = sb;\n                } catch (error) {\n                    Log.error(this.TAG, error.message);\n                    this._emitter.emit(Events.ERROR, {\n                        code: error.code,\n                        reason: error.message\n                    });\n                    return;\n                }\n            } else {\n                Log.info(\n                    this.TAG,\n                    `Notice: ${is.type} mimeType changed, origin: ${this._mimeTypes[is.type]\n                    }, target: ${mimeType}`\n                );\n            }\n            this._mimeTypes[is.type] = mimeType;\n        }\n\n        if (!deferred) {\n            // deferred means this InitSegment has been pushed to pendingSegments queue\n            this._pendingSegments[is.type]!.push(is);\n        }\n        if (!firstInitSegment) {\n            // append immediately only if init segment in subsequence\n            if (this._sourceBuffers[is.type] && !this._sourceBuffers[is.type]!.updating) {\n                this._doAppendSegments();\n            }\n        }\n        if (Browser.safari && is.container === 'audio/mpeg' && is.mediaDuration > 0) {\n            // 'audio/mpeg' track under Safari may cause MediaElement's duration to be NaN\n            // Manually correct MediaSource.duration to make progress bar seekable, and report right duration\n            this._requireSetMediaDuration = true;\n            this._pendingMediaDuration = is.mediaDuration / 1000; // in seconds\n            this._updateMediaSourceDuration();\n        }\n    }\n\n    appendMediaSegment(mediaSegment: MediaSegment) {\n        const ms = mediaSegment;\n        this._pendingSegments[ms.type]!.push(ms);\n\n        if (this._config.autoCleanupSourceBuffer && this._needCleanupSourceBuffer()) {\n            this._doCleanupSourceBuffer();\n        }\n\n        const sb = this._sourceBuffers[ms.type];\n        if (sb && !sb.updating && !this._hasPendingRemoveRanges()) {\n            this._doAppendSegments();\n        }\n    }\n\n    seek() {\n        // remove all appended buffers\n        Object.keys(this._sourceBuffers).forEach((type) => {\n            if (!this._sourceBuffers[type]) {\n                return;\n            }\n\n            // abort current buffer append algorithm\n            const sb = this._sourceBuffers[type];\n            if (this._mediaSource!.readyState === 'open') {\n                try {\n                    // If range removal algorithm is running, InvalidStateError will be throwed\n                    // Ignore it.\n                    sb!.abort();\n                } catch (error) {\n                    Log.error(this.TAG, error.message);\n                }\n            }\n\n            // IDRList should be clear\n            this._idrList.clear();\n\n            // pending segments should be discard\n            const ps = this._pendingSegments[type];\n            ps!.splice(0, ps!.length);\n\n            if (this._mediaSource!.readyState === 'closed') {\n                // Parent MediaSource object has been detached from HTMLMediaElement\n                return;\n            }\n\n            // record ranges to be remove from SourceBuffer\n            for (let i = 0; i < sb!.buffered.length; i++) {\n                const start = sb!.buffered.start(i);\n                const end = sb!.buffered.end(i);\n                this._pendingRemoveRanges[type]!.push({ start, end });\n            }\n\n            // if sb is not updating, let's remove ranges now!\n            if (!sb!.updating) {\n                this._doRemoveRanges();\n            }\n\n            // Safari 10 may get InvalidStateError in the later appendBuffer() after SourceBuffer.remove() call\n            // Internal parser's state may be invalid at this time. Re-append last InitSegment to workaround.\n            // Related issue: https://bugs.webkit.org/show_bug.cgi?id=159230\n            if (Browser.safari) {\n                const lastInitSegment = this._lastInitSegments[type];\n                if (lastInitSegment) {\n                    this._pendingSegments[type]!.push(lastInitSegment);\n                    if (!sb!.updating) {\n                        this._doAppendSegments();\n                    }\n                }\n            }\n        });\n    }\n\n    endOfStream() {\n        const ms = this._mediaSource;\n        const sb = this._sourceBuffers;\n        if (!ms || ms.readyState !== 'open') {\n            if (ms && ms.readyState === 'closed' && this._hasPendingSegments()) {\n                // If MediaSource hasn't turned into open state, and there're pending segments\n                // Mark pending endOfStream, defer call until all pending segments appended complete\n                this._hasPendingEos = true;\n            }\n            return;\n        }\n        if ((sb.video && sb.video.updating) || (sb.audio && sb.audio.updating)) {\n            // If any sourcebuffer is updating, defer endOfStream operation\n            // See _onSourceBufferUpdateEnd()\n            this._hasPendingEos = true;\n        } else {\n            this._hasPendingEos = false;\n            // Notify media data loading complete\n            // This is helpful for correcting total duration to match last media segment\n            // Otherwise MediaElement's ended event may not be triggered\n            ms.endOfStream();\n        }\n    }\n\n    getNearestKeyframe(dts: number) {\n        return this._idrList.getLastSyncPointBeforeDts(dts);\n    }\n\n    private _needCleanupSourceBuffer() {\n        let res = false;\n        if (!this._config.autoCleanupSourceBuffer) {\n            return res;\n        }\n\n        const { currentTime } = this._mediaElement || { currentTime: 0 };\n\n        Object.keys(this._sourceBuffers).some((type) => {\n            const sb = this._sourceBuffers[type];\n            if (sb) {\n                const { buffered } = sb;\n                if (buffered.length >= 1) {\n                    if (\n                        currentTime - buffered.start(0)\n                        >= this._config.autoCleanupMaxBackwardDuration\n                    ) {\n                        res = true;\n                    }\n                }\n            }\n            return res;\n        });\n\n        return res;\n    }\n\n    private _doCleanupSourceBuffer() {\n        const { currentTime } = this._mediaElement || { currentTime: 0 };\n        Object.keys(this._sourceBuffers).forEach((type) => {\n            const sb = this._sourceBuffers[type];\n            if (sb) {\n                const { buffered } = sb;\n                let doRemove = false;\n\n                for (let i = 0; i < buffered.length; i++) {\n                    const start = buffered.start(i);\n                    const end = buffered.end(i);\n\n                    if (start <= currentTime && currentTime < end + 3) {\n                        // padding 3 seconds\n                        if (currentTime - start >= this._config.autoCleanupMaxBackwardDuration) {\n                            doRemove = true;\n                            const removeEnd = currentTime - this._config.autoCleanupMinBackwardDuration;\n                            this._pendingRemoveRanges[type]!.push({\n                                start,\n                                end: removeEnd\n                            });\n                        }\n                    } else if (end < currentTime) {\n                        doRemove = true;\n                        this._pendingRemoveRanges[type]!.push({ start, end });\n                    }\n                }\n\n                if (doRemove && !sb.updating) {\n                    this._doRemoveRanges();\n                }\n            }\n        });\n    }\n\n    private _updateMediaSourceDuration() {\n        const sb = this._sourceBuffers;\n        if (\n            this._mediaElement\n            && (this._mediaElement.readyState === 0 || this._mediaSource!.readyState !== 'open')\n        ) {\n            return;\n        }\n        if ((sb.video && sb.video.updating) || (sb.audio && sb.audio.updating)) {\n            return;\n        }\n\n        const current = this._mediaSource!.duration;\n        const target = this._pendingMediaDuration;\n        if (target > 0 && (Number.isNaN(current) || target > current)) {\n            Log.info(this.TAG, `Update MediaSource duration from ${current} to ${target}`);\n            this._mediaSource!.duration = target;\n        }\n\n        this._requireSetMediaDuration = false;\n        this._pendingMediaDuration = 0;\n    }\n\n    private _doRemoveRanges() {\n        Object.keys(this._pendingRemoveRanges).forEach((type: string) => {\n            if (!this._sourceBuffers[type] || this._sourceBuffers[type]!.updating) {\n                return;\n            }\n            const sb = this._sourceBuffers[type];\n            const ranges = this._pendingRemoveRanges[type];\n            while (ranges && ranges.length && !sb!.updating) {\n                const range = ranges.shift();\n                sb!.remove(range!.start, range!.end);\n            }\n        });\n    }\n\n    private _doAppendSegments() {\n        const pendingSegments = this._pendingSegments;\n        Object.keys(pendingSegments).forEach((type) => {\n            if (!this._sourceBuffers[type] || this._sourceBuffers[type]!.updating) {\n                return;\n            }\n\n            if (pendingSegments[type]!.length > 0) {\n                const segment = pendingSegments[type]!.shift();\n\n                if (segment && (segment as any).timestampOffset) {\n                    // For MPEG audio stream in MSE, if unbuffered-seeking occurred\n                    // We need explicitly set timestampOffset to the desired point in timeline for mpeg SourceBuffer.\n                    const currentOffset = this._sourceBuffers[type]!.timestampOffset;\n                    const targetOffset = (segment as any).timestampOffset / 1000; // in seconds\n                    const delta = Math.abs(currentOffset - targetOffset);\n                    if (delta > 0.1) {\n                        // If time delta > 100ms\n                        Log.info(\n                            this.TAG,\n                            `Update MPEG audio timestampOffset from ${currentOffset} to ${targetOffset}`\n                        );\n                        this._sourceBuffers[type]!.timestampOffset = targetOffset;\n                    }\n                    delete (segment as any).timestampOffset;\n                }\n\n                if (!segment!.data || segment!.data.byteLength === 0) {\n                    // Ignore empty buffer\n                    return;\n                }\n\n                try {\n                    this._sourceBuffers[type]!.appendBuffer(segment!.data);\n                    this._isBufferFull = false;\n                    if (type === 'video' && Object.prototype.hasOwnProperty.call(segment, 'info')) {\n                        this._idrList.appendArray((segment as MediaSegment).info.syncPoints);\n                    }\n                } catch (error) {\n                    this._pendingSegments[type]!.unshift(segment!);\n                    if (error.code === 22) {\n                        // QuotaExceededError\n                        /* Notice that FireFox may not throw QuotaExceededError if SourceBuffer is full\n                         * Currently we can only do lazy-load to avoid SourceBuffer become scattered.\n                         * SourceBuffer eviction policy may be changed in future version of FireFox.\n                         *\n                         * Related issues:\n                         * https://bugzilla.mozilla.org/show_bug.cgi?id=1279885\n                         * https://bugzilla.mozilla.org/show_bug.cgi?id=1280023\n                         */\n\n                        // report buffer full, abort network IO\n                        if (!this._isBufferFull) {\n                            this._emitter.emit(Events.BUFFER_FULL);\n                        }\n                        this._isBufferFull = true;\n                    } else {\n                        Log.error(this.TAG, error.message);\n                        this._emitter.emit(Events.ERROR, {\n                            code: error.code,\n                            reason: error.message\n                        });\n                    }\n                }\n            }\n        });\n    }\n\n    private _onSourceOpen() {\n        // console.info('debubg_Hjplayer_onSourceOpen', +new Date());\n        Log.info(this.TAG, 'MediaSource onSourceOpen');\n\n        if (this.e && this._mediaSource) {\n            this._mediaSource!.removeEventListener('sourceopen', this.e.onSourceOpen);\n        }\n\n        // deferred sourcebuffer creation / initialization\n        if (this._pendingSourceBufferInit.length > 0) {\n            const pendings = this._pendingSourceBufferInit;\n            while (pendings.length) {\n                const segment = pendings.shift();\n                this.appendInitSegment(segment!, true);\n            }\n        }\n        // there may be some pending media segments, append them\n        if (this._hasPendingSegments()) {\n            this._doAppendSegments();\n        }\n        this._emitter.emit(Events.SOURCE_OPEN);\n    }\n\n    private _onSourceEnded() {\n        // fired on endOfStream\n        Log.info(this.TAG, 'MediaSource onSourceEnded');\n    }\n\n    private _onSourceClose() {\n        // fired on detaching from media element\n        Log.info(this.TAG, 'MediaSource onSourceClose');\n        if (this._mediaSource && this.e != null) {\n            this._mediaSource.removeEventListener('sourceopen', this.e.onSourceOpen);\n            this._mediaSource.removeEventListener('sourceended', this.e.onSourceEnded);\n            this._mediaSource.removeEventListener('sourceclose', this.e.onSourceClose);\n        }\n    }\n\n    private _hasPendingSegments() {\n        const ps = this._pendingSegments;\n        return ps.video!.length > 0 || ps.audio!.length > 0;\n    }\n\n    private _hasPendingRemoveRanges() {\n        const prr = this._pendingRemoveRanges;\n        return prr.video!.length > 0 || prr.audio!.length > 0;\n    }\n\n    private _onSourceBufferUpdateEnd() {\n        if (this._requireSetMediaDuration) {\n            this._updateMediaSourceDuration();\n        } else if (this._hasPendingRemoveRanges()) {\n            this._doRemoveRanges();\n        } else if (this._hasPendingSegments()) {\n            this._doAppendSegments();\n        } else if (this._hasPendingEos) {\n            this.endOfStream();\n        }\n        this._emitter.emit(Events.UPDATE_END);\n    }\n\n    setMediaSourceDuration(duration: number) {\n        if (this._mediaSource) {\n            this._mediaSource!.duration = duration;\n        }\n    }\n}\n\nexport default MSEController;\n","/* eslint-diabale   */\nimport EventEmitter from 'eventemitter3';\nimport Events from '../Events/index';\nimport Errors from '../Errors/index';\nimport Transmuxer from '../Controller/Transmuxer';\nimport MSEController from '../Controller/MSEController';\nimport { InitSegment, MediaSegment } from '../Interfaces/Segment';\nimport MediaConfig from '../Interfaces/MediaConfig';\nimport { IllegalStateException } from '../Utils/Exception';\nimport Browser from '../Utils/Browser';\nimport Logger from '../Utils/Logger';\nimport MediaInfoObject from '../Interfaces/MediaInfoObject';\nimport StatisticsInfoObject from '../Interfaces/StatisticsInfo';\nimport SeekpointRecord from '../Interfaces/SeekpointRecord';\nimport Metadata from '../Interfaces/Metadata';\nimport ErrorData from '../Interfaces/ErrorData';\nimport HJPlayerConfig from '../Interfaces/HJPlayerConfig';\nimport TSManifest from '../Interfaces/TSManifest';\n/* eslint-enabale   */\n\nclass MSEPlayer {\n    /**\n     * 文件标签\n     */\n    Tag: string\n\n    /**\n     * 播放器类型\n     */\n    private _type: string\n\n    /**\n     * 事件中心\n     */\n    private _emitter: EventEmitter | null\n\n    /**\n     * 媒体设置\n     */\n    mediaConfig: MediaConfig | null\n\n    /**\n     * 用户设置\n     */\n    userConfig: HJPlayerConfig | null\n\n    /**\n     * 存放回调函数的对象\n     */\n    private e: any\n\n    /**\n     * 获得当前时间的函数\n     */\n    private _now: Function\n\n    /**\n     * 等待跳转的时间点, 在没有媒体元素时先记录该时间点\n     */\n    private _pendingSeekTime: number | null\n\n    private _requestSetTime: boolean\n\n    /**\n     * seek点记录\n     */\n    private _seekpointRecord: SeekpointRecord | null\n\n    /**\n     * 进度检查定时器\n     */\n    private _progressCheckTimer: number | undefined\n\n    /**\n     * 媒体元素\n     */\n    private _mediaElement: HTMLMediaElement | null\n\n    /**\n     * MediaSource 控制器\n     */\n    private _msectl: MSEController | null\n\n    /**\n     * 转码器\n     */\n    private _transmuxer: Transmuxer | null\n\n    /**\n     * MediaSource 是否处于已 opened 状态\n     */\n    private _mseSourceOpened: boolean\n\n    /**\n     * 是否正在等待load, 如果是的话, 会在 souceOpen 事件之后 执行 load 操作\n     */\n    private _hasPendingLoad: boolean\n\n    /**\n     * 接收到的媒体数据流是否可以支持播放\n     */\n    private _receivedCanPlay: boolean\n\n    /**\n     * 媒体的信息\n     */\n    private _mediaInfo: MediaInfoObject | null\n\n    /**\n     * 媒体播放时的统计信息\n     */\n    private _statisticsInfo: StatisticsInfoObject | null\n\n    /**\n     * M3U8文档是否已经解析\n     */\n    private _manifestParsed: boolean\n\n    /**\n     * 开始播放时设定的 currentTime\n     */\n    private _startPosition: number\n\n    /**\n     * 当前播放的M3U8 playlist文档 解析后的内筒\n     */\n    private _currentDetail: any | null\n\n    /**\n     * 是否一直 seek 到 关键帧\n     */\n    private _alwaysSeekKeyframe: boolean\n\n    constructor(mediaConfig: MediaConfig, config: HJPlayerConfig) {\n        this.Tag = 'MSEPlayer';\n        this._type = 'MSEPlayer';\n        this._emitter = new EventEmitter();\n        this.userConfig = config;\n        this.mediaConfig = mediaConfig;\n        this.e = {\n            onvLoadedMetadata: this._onvLoadedMetadata.bind(this),\n            onvSeeking: this._onvSeeking.bind(this),\n            onvCanPlay: this._onvCanPlay.bind(this),\n            onvStalled: this._onvStalled.bind(this),\n            onvProgress: this._onvProgress.bind(this),\n        };\n\n        if(window.performance && window.performance.now) {\n            this._now = window.performance.now.bind(window.performance);\n        } else {\n            this._now = Date.now;\n        }\n\n        this._pendingSeekTime = null; // in seconds\n        this._requestSetTime = false;\n        this._seekpointRecord = null;\n        this._progressCheckTimer = undefined;\n        this._mediaElement = null;\n        this._msectl = null;\n        this._transmuxer = null;\n        this._mseSourceOpened = false;\n        this._hasPendingLoad = false;\n        this._receivedCanPlay = false;\n        this._mediaInfo = null;\n        this._statisticsInfo = null;\n\n        const chromeNeedIDRFix = Browser.chrome\n            && (Browser.version.major < 50\n                || (Browser.version.major === 50 && Browser.version.build < 2661));\n        this._alwaysSeekKeyframe = !!(chromeNeedIDRFix || Browser.msedge || Browser.msie);\n\n        if(this._alwaysSeekKeyframe) {\n            this.userConfig.accurateSeek = false;\n        }\n\n        this._manifestParsed = false; // 是否已经解析了M3U8文件\n        this._startPosition = 0; // 起播点\n        this._currentDetail = null; // playList-loader 解析出来的文档\n    }\n\n    /**\n     * MSEPlayer销毁\n     */\n    destroy() {\n        if(this._progressCheckTimer !== undefined) {\n            window.clearInterval(this._progressCheckTimer);\n            this._progressCheckTimer = undefined;\n        }\n        if(this._transmuxer) {\n            this.unload();\n        }\n        if(this._mediaElement) {\n            this.detachMediaElement();\n        }\n        this.e = null;\n        this._emitter && this._emitter.removeAllListeners();\n        this._manifestParsed = false;\n        this._startPosition = 0;\n        this._currentDetail = null;\n        this._statisticsInfo = null;\n        this._mediaInfo = null;\n        this._seekpointRecord = null;\n        delete (this as any)._emitter;\n        delete (this as any).mediaConfig;\n        delete (this as any).userConfig;\n        this._emitter = null;\n        this.mediaConfig = null;\n        this.userConfig = null;\n    }\n\n    /**\n     * MSEPlayer绑定事件\n     * @param event 事件名\n     * @param listener 回调函数\n     */\n    on(event: string, listener: EventEmitter.ListenerFn) {\n        if(!this._emitter) return;\n        if(event === Events.MEDIA_INFO) {\n            if(this._mediaInfo !== null) {\n                Promise.resolve().then(() => {\n                    this._emitter && this._emitter.emit(Events.MEDIA_INFO, this.mediaInfo);\n                });\n            }\n        } else if(event === Events.STATISTICS_INFO) {\n            if(this._statisticsInfo !== null) {\n                Promise.resolve().then(() => {\n                    this._emitter && this._emitter.emit(Events.STATISTICS_INFO, this.statisticsInfo);\n                });\n            }\n        }\n        this._emitter.addListener(event, listener);\n    }\n\n    /**\n     * MSEPlayer取消绑定事件\n     * @param event 事件名\n     * @param listener 回调函数\n     */\n    off(event: string, listener: EventEmitter.ListenerFn) {\n        this._emitter && this._emitter.removeListener(event, listener);\n    }\n\n    /**\n     * 媒体元素和 MediaSource 链接起来\n     * @param mediaElement 要绑定的媒体元素\n     */\n    attachMediaElement(mediaElement: HTMLMediaElement) {\n        this._mediaElement = mediaElement;\n        mediaElement.addEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n        mediaElement.addEventListener('seeking', this.e.onvSeeking);\n        mediaElement.addEventListener('canplay', this.e.onvCanPlay);\n        mediaElement.addEventListener('stalled', this.e.onvStalled);\n        mediaElement.addEventListener('progress', this.e.onvProgress);\n\n        if (this.userConfig) {\n            if (this.mediaConfig) {\n                this._msectl = new MSEController(this.userConfig, this.mediaConfig);\n            } else {\n                this._msectl = new MSEController(this.userConfig);\n            }\n        }\n\n        this._msectl!.on(Events.UPDATE_END, this._onmseUpdateEnd.bind(this));\n        this._msectl!.on(Events.BUFFER_FULL, this._onmseBufferFull.bind(this));\n        this._msectl!.on(Events.SOURCE_OPEN, () => {\n            // console.info('debug_Hjplayer_SOURCE_OPEN', +new Date());\n            this._mseSourceOpened = true;\n            if(this._hasPendingLoad) {\n                this._hasPendingLoad = false;\n                this.load();\n            }\n        });\n\n        this._msectl!.on(Events.ERROR, (info: ErrorData) => {\n            this._emitter && this._emitter.emit(Events.ERROR, Errors.MEDIA_ERROR, Errors.MEDIA_MSE_ERROR, info);\n        });\n\n        this._msectl!.attachMediaElement(mediaElement);\n\n        if(this._pendingSeekTime != null) {\n            try {\n                mediaElement.currentTime = this._pendingSeekTime;\n                this._pendingSeekTime = null;\n            } catch (e) {\n                // IE11 may throw InvalidStateError if readyState === 0\n                // We can defer set currentTime operation after loadedmetadata\n            }\n        }\n    }\n\n    /**\n     * MediaSource 与 媒体元素 分离链接\n     */\n    detachMediaElement() {\n        if(this._mediaElement && this.e) {\n            this._msectl && this._msectl.detachMediaElement();\n            this._mediaElement.removeEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n            this._mediaElement.removeEventListener('seeking', this.e.onvSeeking);\n            this._mediaElement.removeEventListener('canplay', this.e.onvCanPlay);\n            this._mediaElement.removeEventListener('stalled', this.e.onvStalled);\n            this._mediaElement.removeEventListener('progress', this.e.onvProgress);\n            this._mediaElement = null;\n        }\n        if(this._msectl) {\n            this._msectl.destroy();\n            this._msectl = null;\n        }\n        this._startPosition = 0;\n    }\n\n    /**\n     * 加载媒体文件, 并绑定回调事件\n     */\n    load() {\n        // console.info('debug_HjPlayer_loading', +new Date());\n        if(!this._mediaElement) {\n            throw new IllegalStateException('HTMLMediaElement must be attached before load()!');\n        }\n        if(this._transmuxer) {\n            throw new IllegalStateException(\n                'FlvPlayer.load() has been called, please call unload() first!'\n            );\n        }\n        if(this._hasPendingLoad) {\n            return;\n        }\n\n        if(this.userConfig!.deferLoadAfterSourceOpen && this._mseSourceOpened === false) {\n            this._hasPendingLoad = true;\n            return;\n        }\n\n        if(this._mediaElement.readyState > 0) {\n            // IE11 may throw InvalidStateError if readyState === 0\n            this._setMediaCurrentTime(0);\n        }\n\n        this.mediaConfig && this.userConfig && (this._transmuxer = new Transmuxer(this.mediaConfig, this.userConfig));\n\n        this._transmuxer!.on(Events.INIT_SEGMENT, (type: string, is: InitSegment) => {\n            this._msectl && this._msectl.appendInitSegment(is);\n        });\n        this._transmuxer!.on(Events.MEDIA_SEGMENT, (type: string, ms: MediaSegment) => {\n            this._msectl && this._msectl.appendMediaSegment(ms);\n            // lazyLoad check TODO 需要TS解码器中的Segment中添加Sample的相关信息, 添加后同样适用 HLS 点播流\n            // && this.mediaConfig!.type === 'flv'\n            if(\n                this.userConfig!.lazyLoad\n                && !this.userConfig!.isLive\n                && this._mediaElement\n            ) {\n                const { currentTime } = this._mediaElement;\n                if(\n                    ms.info\n                    && ms.info.endDts >= (currentTime + this.userConfig!.lazyLoadMaxDuration) * 1000\n                ) {\n                    if(this._progressCheckTimer === undefined) {\n                        Logger.info(\n                            this.Tag,\n                            'Maximum buffering duration exceeded, suspend transmuxing task'\n                        );\n                        Logger.info(this.Tag, `start load at ${ms.info.endDts}`);\n                        this._suspendTransmuxer();\n                    }\n                }\n            }\n        });\n        this._transmuxer!.on(Events.LOAD_COMPLETE, () => {\n            this._msectl && this._msectl.endOfStream();\n            this._emitter!.emit(Events.LOAD_COMPLETE);\n        });\n        this._transmuxer!.on(Events.RECOVERED_EARLY_EOF, () => {\n            this._emitter!.emit(Events.RECOVERED_EARLY_EOF);\n        });\n        this._transmuxer!.on(Events.IO_ERROR, (detail: string, info: ErrorData) => {\n            this._emitter!.emit(Events.ERROR, Errors.NETWORK_ERROR, detail, info);\n        });\n        this._transmuxer!.on(Events.DEMUX_ERROR, (detail: string, info: string) => {\n            this._emitter!.emit(Events.ERROR, Errors.MEDIA_ERROR, detail, { code: -1, reason: info });\n        });\n        this._transmuxer!.on(Events.MEDIA_INFO, (mediaInfo: MediaInfoObject) => {\n            this._mediaInfo = mediaInfo;\n            this._emitter!.emit(Events.MEDIA_INFO, { ...mediaInfo });\n        });\n        this._transmuxer!.on(Events.METADATA_ARRIVED, (metadata: Metadata) => {\n            this._emitter!.emit(Events.METADATA_ARRIVED, metadata);\n        });\n        this._transmuxer!.on(Events.SCRIPTDATA_ARRIVED, (data: any) => {\n            this._emitter!.emit(Events.SCRIPTDATA_ARRIVED, data);\n        });\n        this._transmuxer!.on(Events.STATISTICS_INFO, (statInfo: StatisticsInfoObject) => {\n            this._statisticsInfo = this._fillStatisticsInfo(statInfo);\n            this._emitter!.emit(Events.STATISTICS_INFO, { ...this._statisticsInfo });\n        });\n        this._transmuxer!.on(Events.RECOMMEND_SEEKPOINT, (milliseconds: number) => {\n            if(this._mediaElement && !this.userConfig!.accurateSeek) {\n                this._setMediaCurrentTime(milliseconds / 1000);\n            }\n        });\n\n        this._transmuxer!.on(Events.GET_SEI_INFO, (data: Uint8Array) => {\n            this._emitter!.emit(Events.GET_SEI_INFO, data);\n        });\n\n        this._transmuxer!.on(Events.MANIFEST_PARSED, (data: TSManifest) => { // 只对HLS生效\n            // this._dealVideoCurrentTime(data);\n            if(!this._manifestParsed) {\n                this._manifestParsed = true;\n                if(data.details.live === true) {\n                    this.setMediaSourceDuration(Infinity);\n                } else {\n                    this.setMediaSourceDuration(data.details.totalduration);\n                }\n            }\n            this._emitter!.emit(Events.MANIFEST_PARSED, data);\n            this._currentDetail = data.details;\n        });\n\n        this._transmuxer && this._transmuxer.open();\n    }\n\n    /**\n     * 停止加载\n     */\n    unload() {\n        if(this._mediaElement) {\n            this._mediaElement.pause();\n        }\n        if(this._msectl) {\n            this._msectl.seek();\n        }\n        if(this._transmuxer) {\n            this._transmuxer.close();\n            this._transmuxer.destroy();\n            this._transmuxer = null;\n        }\n        this._manifestParsed = false;\n        this._startPosition = 0;\n        this._currentDetail = null;\n    }\n\n    /**\n     * 开始播放\n     */\n    play() {\n        if(this._mediaElement) {\n            return this._mediaElement.play();\n        }\n    }\n\n    /**\n     * 暂停\n     */\n    pause() {\n        this._mediaElement && this._mediaElement.pause();\n    }\n\n    /**\n     * 返回当前播放器类型\n     */\n    get type() {\n        return this._type;\n    }\n\n    /**\n     * 返回媒体元素已缓存的时间段\n     */\n    get buffered() {\n        return this._mediaElement ? this._mediaElement.buffered : null;\n    }\n\n    /**\n     * 返回媒体元素加载的时长或者整个媒体文件的时长\n     */\n    get duration() {\n        return this._mediaElement ? this._mediaElement.duration : 0;\n    }\n\n    /**\n     * 获取媒体元素的声音大小\n     */\n    get volume() {\n        return this._mediaElement ? this._mediaElement.volume : 0;\n    }\n\n    /**\n     * 设置媒体元素的声音\n     */\n    set volume(value) {\n        this._mediaElement && (this._mediaElement.volume = value);\n    }\n\n    /**\n     * 获取媒体元素是否静音\n     */\n    get muted() {\n        return this._mediaElement ? this._mediaElement.muted : false;\n    }\n\n    /**\n     * 设置媒体静音\n     */\n    set muted(muted) {\n        this._mediaElement && (this._mediaElement.muted = muted);\n    }\n\n    /**\n     * 获取媒体元素当前播放的时间点\n     */\n    get currentTime() {\n        if(this._mediaElement) {\n            return this._mediaElement.currentTime;\n        }\n        return 0;\n    }\n\n    /**\n     * 设置媒体元素的 currentTime\n     */\n    set currentTime(seconds) {\n        if(this._mediaElement) {\n            this._internalSeek(seconds);\n        } else {\n            this._pendingSeekTime = seconds;\n        }\n    }\n\n    /**\n     * 获取媒体文件信息\n     */\n    get mediaInfo() {\n        return { ...this._mediaInfo };\n    }\n\n    /**\n     * 获取播放器的统计信息\n     */\n    get statisticsInfo() {\n        if(this._statisticsInfo == null) {\n            this._statisticsInfo = {};\n        }\n        this._statisticsInfo = this._fillStatisticsInfo(this._statisticsInfo);\n        return { ...this._statisticsInfo };\n    }\n\n    /**\n     * 填充 MSEPlayer 这一层的少量统计信息, 并返回全部统计信息\n     * @param statInfo 待填充 MSEPlayer 这一层信息的残缺的统计信息\n     */\n    private _fillStatisticsInfo(statInfo: StatisticsInfoObject): StatisticsInfoObject {\n        statInfo.playerType = this._type;\n\n        if(!(this._mediaElement instanceof HTMLVideoElement)) {\n            return statInfo;\n        }\n\n        let hasQualityInfo = true;\n        let decoded = 0;\n        let dropped = 0;\n\n        if(this._mediaElement.getVideoPlaybackQuality) {\n            const quality = this._mediaElement.getVideoPlaybackQuality();\n            decoded = quality.totalVideoFrames;\n            dropped = quality.droppedVideoFrames;\n        } else if((this._mediaElement as any).webkitDecodedFrameCount !== undefined) {\n            decoded = (this._mediaElement as any).webkitDecodedFrameCount;\n            dropped = (this._mediaElement as any).webkitDroppedFrameCount;\n        } else {\n            hasQualityInfo = false;\n        }\n\n        if(hasQualityInfo) {\n            statInfo.decodedFrames = decoded;\n            statInfo.droppedFrames = dropped;\n        }\n\n        return statInfo;\n    }\n\n    /**\n     * 当 MediaSource 更新结束后的处理事件, 通过判断已缓存的进度来判断是否暂停加载\n     */\n    private _onmseUpdateEnd() {\n        if(!this.userConfig!.lazyLoad || this.userConfig!.isLive || !this._mediaElement) {\n            return;\n        }\n\n        const { buffered } = this._mediaElement;\n        const { currentTime } = this._mediaElement;\n        let currentRangeEnd = 0;\n\n        for(let i = 0; i < buffered.length; i++) {\n            const start = buffered.start(i);\n            const end = buffered.end(i);\n            if(start <= currentTime && currentTime < end) {\n                currentRangeEnd = end;\n                break;\n            }\n        }\n\n        if(\n            currentRangeEnd >= currentTime + this.userConfig!.lazyLoadMaxDuration\n            && this._progressCheckTimer === undefined\n        ) {\n            Logger.info(this.Tag, 'Maximum buffering duration exceeded, suspend transmuxing task');\n            Logger.info(this.Tag, `start load at ${currentRangeEnd}`);\n            this._suspendTransmuxer();\n        }\n    }\n\n    /**\n     * 当 MediaSource Buffer 已满的处理事件, 暂停加载\n     */\n    private _onmseBufferFull() {\n        Logger.info(this.Tag, 'MSE SourceBuffer is full, suspend transmuxing task');\n        if(this._progressCheckTimer === undefined) {\n            this._suspendTransmuxer();\n        }\n    }\n\n    /**\n     * 暂停加载, 并启动进度检查定时器\n     */\n    private _suspendTransmuxer() {\n        if(this._transmuxer) {\n            this._transmuxer.pause();\n\n            if(this._progressCheckTimer === undefined) {\n                this._progressCheckTimer = window.setInterval(\n                    this._checkProgressAndResume.bind(this),\n                    1000\n                );\n            }\n        }\n    }\n\n    /**\n     * 检查播放进度, 当 currentTime 和 缓存的进度 之间的差值 小于 this.userConfig.lazyLoadRecoverDuration 时, 恢复加载\n     */\n    private _checkProgressAndResume() {\n        if(!this._mediaElement) return;\n        /**\n         * 媒体元素当前播放时间点\n         */\n        const { currentTime } = this._mediaElement;\n        /**\n         * 媒体元素缓冲的时间点\n         */\n        const { buffered } = this._mediaElement;\n        /**\n         * 是否需要回复加载\n         */\n        let needResume = false;\n\n        for(let i = 0; i < buffered.length; i++) {\n            const start = buffered.start(i);\n            const end = buffered.end(i);\n            if(currentTime >= start && currentTime < end) {\n                if(currentTime >= end - this.userConfig!.lazyLoadRecoverDuration) {\n                    needResume = true;\n                }\n                break;\n            }\n        }\n\n        if(needResume) {\n            window.clearInterval(this._progressCheckTimer);\n            this._progressCheckTimer = undefined;\n            if(needResume) {\n                Logger.info(this.Tag, 'Continue loading from paused position');\n                this._transmuxer && this._transmuxer.resume();\n            }\n        }\n    }\n\n    /**\n     * 查询要跳转的时间点是否已处于缓存区域\n     * @param seconds 查询的时间点\n     */\n    private _isTimepointBuffered(seconds: number) {\n        if(!this._mediaElement) return false;\n\n        const { buffered } = this._mediaElement;\n\n        for(let i = 0; i < buffered.length; i++) {\n            const from = buffered.start(i);\n            const to = buffered.end(i);\n            if(seconds >= from && seconds < to) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * 非用户操作的内部跳转\n     * @param seconds seek的描述\n     */\n    private _internalSeek(seconds: number) {\n        if(!this._mediaElement) return false;\n        /**\n         * 是否能直接跳转\n         */\n        const directSeek = this._isTimepointBuffered(seconds);\n        /**\n         * 是否直接跳转到视频开始处\n         */\n        let directSeekBegin = false;\n        /**\n         * 直接跳转到开始处的相应时间\n         */\n        let directSeekBeginTime = 0;\n\n        if(seconds < 1.0 && this._mediaElement.buffered.length > 0) {\n            const videoBeginTime = this._mediaElement.buffered.start(0);\n            if((videoBeginTime < 1.0 && seconds < videoBeginTime) || Browser.safari) {\n                directSeekBegin = true;\n                // also workaround for Safari: Seek to 0 may cause video stuck, use 0.1 to avoid\n                directSeekBeginTime = Browser.safari ? 0.1 : videoBeginTime;\n            }\n        }\n\n        if(directSeekBegin) {\n            // seek to video begin, set currentTime directly if beginPTS buffered\n            this._setMediaCurrentTime(directSeekBeginTime);\n            return;\n        }\n\n        if(directSeek) {\n            // buffered position\n            if(!this._alwaysSeekKeyframe) {\n                this._setMediaCurrentTime(seconds);\n            } else {\n                const idr = this._msectl\n                    ? this._msectl.getNearestKeyframe(Math.floor(seconds * 1000))\n                    : null;\n                const setTime: number = idr !== null ? idr.dts / 1000 : seconds;\n                this._setMediaCurrentTime(setTime);\n            }\n            if(this._progressCheckTimer !== undefined) {\n                this._checkProgressAndResume();\n            }\n            return;\n        }\n\n        if(this._progressCheckTimer !== undefined) {\n            window.clearInterval(this._progressCheckTimer);\n            this._progressCheckTimer = undefined;\n        }\n        this._msectl && this._msectl.seek();\n        this._transmuxer && this._transmuxer.seek(Math.floor(seconds * 1000)); // in milliseconds\n        // no need to set mediaElement.currentTime if non-accurateSeek,\n        // just wait for the recommend_seekpoint callback\n        if(this.userConfig!.accurateSeek) {\n            this._setMediaCurrentTime(seconds);\n        }\n    }\n\n    /**\n     * 过100毫秒之后检查, 如果要跳转的点还没有缓存就停止progressCheck, _msectl 和 _transmuxer 跳转到相应时间点\n     */\n    private _checkAndApplyUnbufferedSeekpoint() {\n        if(this._seekpointRecord && this._mediaElement) {\n            if(this._seekpointRecord.recordTime <= this._now() - 100) {\n                const target = this._mediaElement.currentTime;\n                this._seekpointRecord = null;\n                if(!this._isTimepointBuffered(target)) {\n                    if(this._progressCheckTimer !== undefined) {\n                        window.clearTimeout(this._progressCheckTimer);\n                        this._progressCheckTimer = undefined;\n                    }\n                    // .currentTime is consists with .buffered timestamp\n                    // Chrome/Edge use DTS, while FireFox/Safari use PTS\n                    this._msectl && this._msectl.seek();\n                    this._transmuxer && this._transmuxer.seek(Math.floor(target * 1000));\n                    // set currentTime if accurateSeek, or wait for recommend_seekpoint callback\n                    if(this.userConfig!.accurateSeek && this._mediaElement) {\n                        // this._requestSetTime = true\n                        // this._mediaElement.currentTime = target\n                        this._setMediaCurrentTime(target);\n                    }\n                }\n            } else {\n                window.setTimeout(this._checkAndApplyUnbufferedSeekpoint.bind(this), 50);\n            }\n        }\n    }\n\n    /**\n     * 当 MediaElement 触发 `stalled`事件 或者 触发 `progress` 时的操作, 进行检查和恢复处理\n     * @param stalled 是否卡住了\n     */\n    private _checkAndResumeStuckPlayback(stalled?: boolean) {\n        if(!this._mediaElement) return false;\n        const media = this._mediaElement;\n        if(stalled || !this._receivedCanPlay || media.readyState < 2) {\n            // HAVE_CURRENT_DATA\n            const { buffered } = media;\n            if(buffered.length > 0 && media.currentTime < buffered.start(0)) {\n                Logger.warn(\n                    this.Tag,\n                    `Playback seems stuck at ${media.currentTime}, seek to ${buffered.start(0)}`\n                );\n                this._setMediaCurrentTime(buffered.start(0));\n                this._mediaElement.removeEventListener('progress', this.e.onvProgress);\n            }\n        } else {\n            // Playback didn't stuck, remove progress event listener\n            this._mediaElement.removeEventListener('progress', this.e.onvProgress);\n        }\n    }\n\n    /**\n     * 当接收到视频Metadata数据时的处理函数, 当已收到Metadata后把等待跳转的时间点设置为元素的currentTime\n     * 当IE11在 attachMedia时设置 currentTime 报错, 那么在 LoadedMetadata 后设置 currentTime\n     */\n    private _onvLoadedMetadata() {\n        if(this._pendingSeekTime != null && this._mediaElement) {\n            this._mediaElement.currentTime = this._pendingSeekTime;\n            this._pendingSeekTime = null;\n        }\n    }\n\n    /**\n     * 当视频 seek 的时候处理函数\n     */\n    private _onvSeeking() {\n        // handle seeking request from browser's progress bar\n        if(!this._mediaElement) return false;\n        const target = this._mediaElement.currentTime;\n        const { buffered } = this._mediaElement;\n\n        if(this._requestSetTime) {\n            this._requestSetTime = false;\n            return;\n        }\n\n        if(target < 1.0 && buffered.length > 0) {\n            // seek to video begin, set currentTime directly if beginPTS buffered\n            const videoBeginTime = buffered.start(0);\n            if((videoBeginTime < 1.0 && target < videoBeginTime) || Browser.safari) {\n                // also workaround for Safari: Seek to 0 may cause video stuck, use 0.1 to avoid\n                // this._mediaElement.currentTime = Browser.safari ? 0.1 : videoBeginTime\n                this._setMediaCurrentTime(Browser.safari ? 0.1 : videoBeginTime);\n                return;\n            }\n        }\n\n        if(this._isTimepointBuffered(target)) {\n            if(this._alwaysSeekKeyframe && this._msectl) {\n                const idr = this._msectl.getNearestKeyframe(Math.floor(target * 1000));\n                if(idr != null) {\n                    this._setMediaCurrentTime(idr.dts / 1000);\n                }\n            }\n            if(this._progressCheckTimer !== undefined) {\n                this._checkProgressAndResume();\n            }\n            return;\n        }\n\n        this._seekpointRecord = {\n            seekPoint: target,\n            recordTime: this._now()\n        };\n\n        window.setTimeout(this._checkAndApplyUnbufferedSeekpoint.bind(this), 50);\n    }\n\n    private _onvCanPlay() {\n        this._receivedCanPlay = true;\n        this._mediaElement && this._mediaElement.removeEventListener('canplay', this.e.onvCanPlay);\n    }\n\n    private _onvStalled() {\n        this._checkAndResumeStuckPlayback(true);\n    }\n\n    private _onvProgress() {\n        this._checkAndResumeStuckPlayback();\n    }\n\n    /**\n     * 给 media 设置 currentTime\n     * @param seconds 设置的时间\n     */\n    private _setMediaCurrentTime(seconds: number) {\n        this._requestSetTime = true;\n        this._mediaElement && (this._mediaElement.currentTime = seconds);\n    }\n\n    setMediaSourceDuration(duration: number) {\n        this._msectl!.setMediaSourceDuration(duration);\n    }\n}\n\nexport default MSEPlayer;\n","import EventEmitter from 'eventemitter3';\nimport FLVCodec from './FLVCodec';\nimport TSCodec from './TSCodec';\n\nclass Codec {\n    Tag: string\n\n    eventEmitter: EventEmitter\n\n    constructor() {\n        this.Tag = 'Codec';\n        this.eventEmitter = new EventEmitter();\n    }\n\n    /**\n     * 获取可支持转码的转码器\n     * @param type 媒体类型\n     * @param data buffer数据\n     */\n    static getSupportCodec(type: string, data: ArrayBuffer) {\n        type = type.toUpperCase();\n\n        if(type === 'FLV' && FLVCodec.probe(data).match) {\n            return FLVCodec;\n        } if(type === 'M3U8' && TSCodec.probe(data)) {\n            return TSCodec;\n        }\n        return null;\n    }\n\n    /**\n     * 获取FLVCodec\n     */\n    static get FLVCodec() {\n        return FLVCodec;\n    }\n\n    /**\n     * 获取TSCodec\n     */\n    static get TSCodec() {\n        return TSCodec;\n    }\n}\n\nexport default Codec;\n","const CustomSeekHandler:any = undefined;\nconst headers:any = undefined;\nconst customLoader:any = undefined;\n\nconst HJPlayerDefaultConfig = {\n    /**\n     * Logger 相关的设置\n     */\n    // 强制使用全局标签 HJPLAYER\n    FORCE_GLOBAL_TAG: false,\n    // Logger的全局标签\n    GLOBAL_TAG: 'HJPLAYER',\n    // 是否触发logger的绑定事件\n    ENABLE_CALLBACK: false,\n    // 是否打开 ERROR 提示\n    ENABLE_ERROR: true,\n    // 是否打开 INFO 提示\n    ENABLE_INFO: false,\n    // 是否打开 WARN 提示\n    ENABLE_WARN: false,\n    // 是否打开 DEBUG 提示\n    ENABLE_DEBUG: false,\n    // 是否打开多线程\n    enableWorker: false,\n\n    enableStashBuffer: true,\n\n    stashInitialSize: 384,\n\n    isLive: false,\n\n    lazyLoad: true,\n\n    lazyLoadMaxDuration: 3 * 60,\n\n    lazyLoadRecoverDuration: 30,\n\n    deferLoadAfterSourceOpen: true,\n\n    // autoCleanupSourceBuffer: default as false, leave unspecified\n    autoCleanupMaxBackwardDuration: 3 * 60,\n\n    autoCleanupMinBackwardDuration: 2 * 60,\n\n    statisticsInfoReportInterval: 1000,\n\n    fixAudioTimestampGap: true,\n\n    accurateSeek: false,\n\n    seekType: 'range', // [range, param, custom]\n\n    seekParamStart: 'bstart',\n\n    seekParamEnd: 'bend',\n\n    rangeLoadZeroStart: false,\n\n    CustomSeekHandler,\n\n    reuseRedirectedURL: false,\n\n    headers,\n\n    customLoader,\n\n    tsAutoLevelChoose: false, // 自动选择ts码率, 在master.m3u8时适用\n\n    maxFragLookUpTolerance: 0.25, // used by stream-controller\n\n    defaultAudioCodec: undefined\n};\n\nexport default HJPlayerDefaultConfig;\n","import NativePlayer from './Player/NativePlayer';\nimport MSEPlayer from './Player/MSEPlayer';\nimport HJPlayerEvents from './Events/index';\nimport HJPlayerErrors from './Errors/index';\nimport HJPlayerCodec from './Codecs/index';\nimport DefaultConfig from './Utils/DefaultConfig';\nimport HJPlayerLogger from './Utils/Logger';\nimport SupportHelper from './Utils/support-helper';\nimport UserConfig from './Interfaces/UserConfig';\nimport MediaConfig from './Interfaces/MediaConfig';\nimport HJPlayerConfig from './Interfaces/HJPlayerConfig';\nimport FragmentLoader from './Loaders/FragmentLoader';\nimport FetchSteamLoader from './Loaders/FetchStreamLoader';\nimport ParamSeekHandler from './Utils/param-seek-handler';\nimport PlayListLoader from './Loaders/PlaylistLoader';\nimport IOController from './Controller/IOController';\nimport TransmuxingController from './Controller/TransmuxingController';\nimport typeSupported from './Utils/getMediaTypeSupport';\n\nclass HJPlayer {\n    /**\n     * 文件标签名\n     */\n    Tag: string\n\n    /**\n     * 媒体设置\n     */\n    mediaConfig: MediaConfig | null\n\n    /**\n     * 播放器设置\n     */\n    userConfig: HJPlayerConfig | null\n\n    constructor(mediaConfig: MediaConfig, userConfig?: UserConfig) {\n        this.Tag = 'HJPlayer';\n        this.mediaConfig = mediaConfig;\n        this.userConfig = { ...DefaultConfig, ...userConfig };\n        HJPlayerLogger.config = this.userConfig;\n        HJPlayerLogger.GLOBAL_TAG = this.userConfig.GLOBAL_TAG;\n\n        if (!this.mediaConfig) {\n            throw new Error('mediaConfig is needed');\n        }\n\n        if (!this.mediaConfig.type || typeof this.mediaConfig.type !== 'string') {\n            throw new Error('mediaConfig need correct type option');\n        }\n\n        if (!this.mediaConfig.url || typeof this.mediaConfig.url !== 'string') {\n            throw new Error('mediaConfig need correct url option');\n        }\n\n        const mediaType = this.mediaConfig.type.toLowerCase();\n\n        switch (mediaType) {\n            case 'mp4':\n                return new NativePlayer(this.mediaConfig, this.userConfig);\n            case 'flv':\n            case 'm3u8':\n                return new MSEPlayer(this.mediaConfig, this.userConfig);\n            default:\n                throw new Error('unsupport media type');\n        }\n    }\n\n    /**\n     * 浏览器是否支持功能\n     */\n    static isSupported(): boolean {\n        return SupportHelper();\n    }\n\n    /**\n     * 事件集合\n     */\n    static get Events() {\n        return HJPlayerEvents;\n    }\n\n    /**\n     * 错误集合\n     */\n    static get Errors() {\n        return HJPlayerErrors;\n    }\n\n    /**\n     * 解码器\n     */\n    static get Codec() {\n        return HJPlayerCodec;\n    }\n\n    /**\n     * 日志器\n     */\n    static get Logger() {\n        return HJPlayerLogger;\n    }\n\n    /**\n     * HLS流加载器\n     */\n    static get FragmentLoader() {\n        return FragmentLoader;\n    }\n\n    /**\n     * FLV流氏加载器\n     */\n    static get FetchSteamLoader() {\n        return FetchSteamLoader;\n    }\n\n    static get ParamSeekHandler() {\n        return ParamSeekHandler;\n    }\n\n    static get PlayListLoader() {\n        return PlayListLoader;\n    }\n\n    static get IOController() {\n        return IOController;\n    }\n\n    static get HJPlayerDefaultConfig() {\n        return DefaultConfig;\n    }\n\n    static get TransmuxingController() {\n        return TransmuxingController;\n    }\n\n    static get typeSupported() {\n        return typeSupported();\n    }\n}\n\nexport default HJPlayer;\n","const es6Promise = require('es6-promise');\n\nclass Polyfill {\n    static install() {\n        Polyfill.addIsNaN();\n        Polyfill.addIsInfinite();\n        Polyfill.addPromise();\n    }\n\n    static addIsNaN() {\n        /* eslint-disable */\n        Number.isNaN = Number.isNaN || self.isNaN;\n    }\n\n    static addIsInfinite() {\n        Number.isFinite = Number.isFinite || self.isFinite;\n    }\n\n    static addPromise() {\n        if (typeof self.Promise !== 'function') {\n            es6Promise.polyfill();\n        }\n    }\n}\n\nexport default Polyfill;\n","import HJPlayer from './HJPlayer';\nimport Polyfill from './Utils/Polyfill';\n\nPolyfill.install();\n\nexport default HJPlayer;\n"],"sourceRoot":""}